!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	gain_analysis.h	/^        uint32_t A[STEPS_per_dB * MAX_dB];$/;"	m	struct:replaygain_data	access:public
ABButter	gain_analysis.c	/^static const Float_t ABButter[9][2 * BUTTER_ORDER + 1] = {$/;"	v	file:
ABR_320	lame.h	/^    ABR_320 = 320,$/;"	e	enum:preset_mode_e
ABR_8	lame.h	/^    ABR_8 = 8,$/;"	e	enum:preset_mode_e
ABR_iteration_loop	quantize.c	/^ABR_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ener_ratio[2], const III_psy_ratio ratio[2][2])
ABR_iteration_loop	quantize.h	/^void    ABR_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ratio[2], const III_psy_ratio ratio[2][2])
ABS	util.c	298;"	d	file:
ABYule	gain_analysis.c	/^static const Float_t ABYule[9][2 * YULE_ORDER + 1] = {$/;"	v	file:
ADD_V2_FLAG	id3tag.h	7;"	d
AMD_3DNOW	lame.h	/^    AMD_3DNOW = 2,$/;"	e	enum:asm_optimizations_e
AMD_3DNow	util.h	/^            unsigned int AMD_3DNow:1; \/* K6-2, K6-III, Athlon      *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
ATH	util.h	/^        ATH_t  *ATH;         \/* all ATH related stuff *\/$/;"	m	struct:lame_internal_flags	access:public
ATH_lower_db	lame_global_flags.h	/^    float   ATH_lower_db;    \/* lower ATH by this many db            *\/$/;"	m	struct:lame_global_struct	access:public
ATH_offset_db	util.h	/^        float   ATH_offset_db;\/* add to ATH this many db            *\/$/;"	m	struct:__anon14	access:public
ATH_offset_factor	util.h	/^        float   ATH_offset_factor;\/* change ATH by this factor, derived from ATH_offset_db *\/$/;"	m	struct:__anon14	access:public
ATH_t	util.h	/^    } ATH_t;$/;"	t	typeref:struct:__anon3
ATHcurve	lame_global_flags.h	/^    float   ATHcurve;        \/* change ATH formula 4 shape           *\/$/;"	m	struct:lame_global_struct	access:public
ATHcurve	util.h	/^        float   ATHcurve;    \/* change ATH formula 4 shape           *\/$/;"	m	struct:__anon14	access:public
ATHfixpoint	util.h	/^        float   ATHfixpoint;$/;"	m	struct:__anon14	access:public
ATHformula	util.c	/^ATHformula(SessionConfig_t const *cfg, FLOAT f)$/;"	f	signature:(SessionConfig_t const *cfg, FLOAT f)
ATHformula	util.h	/^    extern FLOAT ATHformula(SessionConfig_t const *cfg, FLOAT freq);$/;"	p	signature:(SessionConfig_t const *cfg, FLOAT freq)
ATHformula_GB	util.c	/^ATHformula_GB(FLOAT f, FLOAT value, FLOAT f_min, FLOAT f_max)$/;"	f	file:	signature:(FLOAT f, FLOAT value, FLOAT f_min, FLOAT f_max)
ATHmdct	quantize_pvt.c	/^ATHmdct(SessionConfig_t const *cfg, FLOAT f)$/;"	f	file:	signature:(SessionConfig_t const *cfg, FLOAT f)
ATHonly	lame_global_flags.h	/^    int     ATHonly;         \/* only use ATH                         *\/$/;"	m	struct:lame_global_struct	access:public
ATHonly	util.h	/^        int     ATHonly;     \/* only use ATH                         *\/$/;"	m	struct:__anon14	access:public
ATHshort	lame_global_flags.h	/^    int     ATHshort;        \/* only use ATH for short blocks        *\/$/;"	m	struct:lame_global_struct	access:public
ATHshort	util.h	/^        int     ATHshort;    \/* only use ATH for short blocks        *\/$/;"	m	struct:__anon14	access:public
ATHtype	lame_global_flags.h	/^    int     ATHtype;         \/* select ATH formula                   *\/$/;"	m	struct:lame_global_struct	access:public
ATHtype	util.h	/^        int     ATHtype;$/;"	m	struct:__anon14	access:public
AddVbrFrame	VbrTag.c	/^AddVbrFrame(lame_internal_flags * gfc)$/;"	f	signature:(lame_internal_flags * gfc)
AddVbrFrame	VbrTag.h	/^void    AddVbrFrame(lame_internal_flags * gfc);$/;"	p	signature:(lame_internal_flags * gfc)
Ah	i386/nasm.h	/^	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
AnalyzeSamples	gain_analysis.c	/^AnalyzeSamples(replaygain_t * rgData, const Float_t * left_samples, const Float_t * right_samples,$/;"	f	signature:(replaygain_t * rgData, const Float_t * left_samples, const Float_t * right_samples, size_t num_samples, int num_channels)
AnalyzeSamples	gain_analysis.h	/^    int     AnalyzeSamples(replaygain_t * rgData, const Float_t * left_samples,$/;"	p	signature:(replaygain_t * rgData, const Float_t * left_samples, const Float_t * right_samples, size_t num_samples, int num_channels)
B	gain_analysis.h	/^        uint32_t B[STEPS_per_dB * MAX_dB];$/;"	m	struct:replaygain_data	access:public
BINSEARCH_DOWN	quantize.c	/^    BINSEARCH_DOWN$/;"	e	enum:__anon27	file:
BINSEARCH_NONE	quantize.c	/^    BINSEARCH_NONE,$/;"	e	enum:__anon27	file:
BINSEARCH_UP	quantize.c	/^    BINSEARCH_UP,$/;"	e	enum:__anon27	file:
BLKSIZE	encoder.h	111;"	d
BLKSIZE_s	encoder.h	113;"	d
BPC	util.h	257;"	d
BUFFER_SIZE	util.h	89;"	d
BUTTER_FILTER	gain_analysis.h	53;"	d
BUTTER_ORDER	gain_analysis.h	51;"	d
BYTES_FLAG	VbrTag.h	44;"	d
Bh	i386/nasm.h	/^	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
Bh	i386/nasm.h	/^	times (1 & ge2(($$-%%here) & 15)  & ~ge3(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Bh,0C0h$/;"	v
Bit_stream_struc	util.h	/^    } Bit_stream_struc;$/;"	t	typeref:struct:bit_stream_struc
BitrateIndex	util.c	/^BitrateIndex(int bRate,      \/* legal rates from 32 to 448 kbps *\/$/;"	f	signature:(int bRate, int version, int samplerate)
BitrateIndex	util.h	/^    extern int BitrateIndex(int, int, int);$/;"	p	signature:(int, int, int)
CBANDS	encoder.h	96;"	d
CBR_iteration_loop	quantize.c	/^CBR_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ener_ratio[2], const III_psy_ratio ratio[2][2])
CBR_iteration_loop	quantize.h	/^void    CBR_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ratio[2], const III_psy_ratio ratio[2][2])
CDECL	lame.h	41;"	d
CDECL	lame.h	42;"	d
CDECL	lame.h	44;"	d
CHANGED_FLAG	id3tag.h	6;"	d
COPY_AND_TRANSFORM	lame.c	1826;"	d	file:
COPY_MONO	mpglib_interface.c	104;"	d	file:
COPY_STEREO	mpglib_interface.c	111;"	d	file:
CPU_features	util.h	/^        } CPU_features;$/;"	m	struct:lame_internal_flags	typeref:struct:lame_internal_flags::__anon15	access:public
CRC16_POLYNOMIAL	util.h	83;"	d
CRC_update	bitstream.c	/^CRC_update(int value, int crc)$/;"	f	file:	signature:(int value, int crc)
CRC_update_lookup	VbrTag.c	/^CRC_update_lookup(uint16_t value, uint16_t crc)$/;"	f	file:	signature:(uint16_t value, uint16_t crc)
CRC_writeheader	bitstream.c	/^CRC_writeheader(lame_internal_flags const *gfc, char *header)$/;"	f	signature:(lame_internal_flags const *gfc, char *header)
CRC_writeheader	bitstream.h	/^void    CRC_writeheader(lame_internal_flags const *gfc, char *buffer);$/;"	p	signature:(lame_internal_flags const *gfc, char *buffer)
Ch	i386/nasm.h	/^	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
CreateI2	VbrTag.c	/^CreateI2(unsigned char *buf, int nValue)$/;"	f	file:	signature:(unsigned char *buf, int nValue)
CreateI4	VbrTag.c	/^CreateI4(unsigned char *buf, uint32_t nValue)$/;"	f	file:	signature:(unsigned char *buf, uint32_t nValue)
CurrentStep	util.h	/^        int     CurrentStep[2];$/;"	m	struct:__anon11	access:public
DEBUGF	util.h	610;"	d
DECDELAY	encoder.h	89;"	d
DELBARK	psymodel.h	48;"	d
DEPRECATED_OR_OBSOLETE_CODE_REMOVED	lame.h	47;"	d
DOUBLEX	vbrquantize.c	85;"	d	file:
DOUBLEX	vbrquantize.c	87;"	d	file:
DUAL_CHANNEL	lame.h	/^  DUAL_CHANNEL,   \/* LAME doesn't supports this! *\/$/;"	e	enum:MPEG_mode_e
Dh	i386/nasm.h	/^	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0$/;"	v
Dh	i386/nasm.h	/^	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
EBh	i386/nasm.h	/^	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h$/;"	v
ENCDELAY	encoder.h	57;"	d
EQ	machine.h	167;"	d
EQ	machine.h	172;"	d
ERRORF	util.h	611;"	d
EXTREME	lame.h	/^    EXTREME = 1002,$/;"	e	enum:preset_mode_e
EXTREME_FAST	lame.h	/^    EXTREME_FAST = 1005,$/;"	e	enum:preset_mode_e
EncResult_t	util.h	/^    } EncResult_t;$/;"	t	typeref:struct:__anon10
EncStateVar_t	util.h	/^    } EncStateVar_t;$/;"	t	typeref:struct:__anon8
ExtractI4	VbrTag.c	/^ExtractI4(const unsigned char *buf)$/;"	f	file:	signature:(const unsigned char *buf)
FALSE	util.h	41;"	d
FAST_LOG	util.h	102;"	d
FAST_LOG	util.h	97;"	d
FAST_LOG10	util.h	101;"	d
FAST_LOG10	util.h	96;"	d
FAST_LOG10_X	util.h	103;"	d
FAST_LOG10_X	util.h	98;"	d
FAST_LOG_X	util.h	104;"	d
FAST_LOG_X	util.h	99;"	d
FFTOFFSET	encoder.h	83;"	d
FLOAT	machine.h	/^typedef float FLOAT;$/;"	t
FLOAT8	machine.h	/^typedef double FLOAT8;$/;"	t
FLOAT8_MAX	machine.h	147;"	d
FLOAT8_MAX	machine.h	149;"	d
FLOAT8_MAX	machine.h	153;"	d
FLOAT8_MAX	machine.h	155;"	d
FLOAT_MAX	machine.h	132;"	d
FLOAT_MAX	machine.h	137;"	d
FLOAT_MAX	machine.h	139;"	d
FRAMES_FLAG	VbrTag.h	43;"	d
FRAME_ID	id3tag.c	118;"	d	file:
FRONTEND_FILETOOLARGE	lame.h	/^    FRONTEND_FILETOOLARGE = -82$/;"	e	enum:__anon21
FRONTEND_FILETOOLARGE	lameerror.h	/^    FRONTEND_FILETOOLARGE = -82,$/;"	e	enum:__anon28
FRONTEND_READERROR	lame.h	/^    FRONTEND_READERROR    = -80,$/;"	e	enum:__anon21
FRONTEND_READERROR	lameerror.h	/^    FRONTEND_READERROR = -80,$/;"	e	enum:__anon28
FRONTEND_WRITEERROR	lame.h	/^    FRONTEND_WRITEERROR   = -81,$/;"	e	enum:__anon21
FRONTEND_WRITEERROR	lameerror.h	/^    FRONTEND_WRITEERROR = -81,$/;"	e	enum:__anon28
FindNearestBitrate	util.c	/^FindNearestBitrate(int bRate, \/* legal rates from 8 to 320 *\/$/;"	f	signature:(int bRate, int version, int samplerate)
FindNearestBitrate	util.h	/^    extern int FindNearestBitrate(int, int, int);$/;"	p	signature:(int, int, int)
Float_t	gain_analysis.h	/^    typedef sample_t Float_t; \/* Type used for filtering *\/$/;"	t
FrameDataNode	id3tag.h	/^typedef struct FrameDataNode {$/;"	s
FrameDataNode	id3tag.h	/^} FrameDataNode;$/;"	t	typeref:struct:FrameDataNode
FrameDataNode::__anon17::__anon18::b	id3tag.h	/^            unsigned char *b; \/* ptr to raw bytes                 *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
FrameDataNode::__anon17::__anon18::l	id3tag.h	/^            char   *l;       \/* ptr to Latin-1 chars             *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
FrameDataNode::__anon17::__anon18::u	id3tag.h	/^            unsigned short *u; \/* ptr to UCS-2 text                *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
FrameDataNode::__anon17::dim	id3tag.h	/^        size_t  dim;$/;"	m	struct:FrameDataNode::__anon17	access:public
FrameDataNode::__anon17::enc	id3tag.h	/^        int     enc;         \/* 0:Latin-1, 1:UCS-2, 2:RAW        *\/$/;"	m	struct:FrameDataNode::__anon17	access:public
FrameDataNode::__anon17::ptr	id3tag.h	/^        } ptr;$/;"	m	struct:FrameDataNode::__anon17	typeref:union:FrameDataNode::__anon17::__anon18	access:public
FrameDataNode::dsc	id3tag.h	/^    } dsc  , txt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::__anon17	access:public
FrameDataNode::fid	id3tag.h	/^    uint32_t fid;             \/* Frame Identifier                 *\/$/;"	m	struct:FrameDataNode	access:public
FrameDataNode::lng	id3tag.h	/^    char    lng[4];          \/* 3-character language descriptor  *\/$/;"	m	struct:FrameDataNode	access:public
FrameDataNode::nxt	id3tag.h	/^    struct FrameDataNode *nxt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::FrameDataNode	access:public
FrameDataNode::txt	id3tag.h	/^    } dsc  , txt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::__anon17	access:public
GAIN_ANALYSIS_ERROR	gain_analysis.h	/^    enum { GAIN_NOT_ENOUGH_SAMPLES = -24601, GAIN_ANALYSIS_ERROR = 0, GAIN_ANALYSIS_OK =$/;"	e	enum:__anon38
GAIN_ANALYSIS_H	gain_analysis.h	29;"	d
GAIN_ANALYSIS_OK	gain_analysis.h	/^    enum { GAIN_NOT_ENOUGH_SAMPLES = -24601, GAIN_ANALYSIS_ERROR = 0, GAIN_ANALYSIS_OK =$/;"	e	enum:__anon38
GAIN_NOT_ENOUGH_SAMPLES	gain_analysis.h	/^    enum { GAIN_NOT_ENOUGH_SAMPLES = -24601, GAIN_ANALYSIS_ERROR = 0, GAIN_ANALYSIS_OK =$/;"	e	enum:__anon38
GENRE_ALPHA_COUNT	id3tag.c	113;"	d	file:
GENRE_INDEX_OTHER	id3tag.c	115;"	d	file:
GENRE_NAME_COUNT	id3tag.c	98;"	d	file:
GENRE_NUM_UNKNOWN	id3tag.c	276;"	d	file:
GetTitleGain	gain_analysis.c	/^GetTitleGain(replaygain_t * rgData)$/;"	f	signature:(replaygain_t * rgData)
GetTitleGain	gain_analysis.h	/^    Float_t GetTitleGain(replaygain_t * rgData);$/;"	p	signature:(replaygain_t * rgData)
GetVbrTag	VbrTag.c	/^GetVbrTag(VBRTAGDATA * pTagData, const unsigned char *buf)$/;"	f	signature:(VBRTAGDATA * pTagData, const unsigned char *buf)
GetVbrTag	VbrTag.h	/^int     GetVbrTag(VBRTAGDATA * pTagData, const unsigned char *buf);$/;"	p	signature:(VBRTAGDATA * pTagData, const unsigned char *buf)
HBLKSIZE	encoder.h	112;"	d
HBLKSIZE_s	encoder.h	114;"	d
HTN	tables.h	68;"	d
Huffmancode	bitstream.c	/^Huffmancode(lame_internal_flags * const gfc, const unsigned int tableindex,$/;"	f	file:	signature:(lame_internal_flags * const gfc, const unsigned int tableindex, int start, int end, gr_info const *gi)
I1LIMIT	psymodel.c	244;"	d	file:
I2LIMIT	psymodel.c	245;"	d	file:
ID_AENC	id3tag.c	/^        , ID_AENC = FRAME_ID('A', 'E', 'N', 'C')$/;"	e	enum:MiscIDs	file:
ID_ALBUM	id3tag.c	/^        , ID_ALBUM = FRAME_ID('T', 'A', 'L', 'B')$/;"	e	enum:UsualStringIDs	file:
ID_APIC	id3tag.c	/^        , ID_APIC = FRAME_ID('A', 'P', 'I', 'C')$/;"	e	enum:MiscIDs	file:
ID_ARTIST	id3tag.c	/^        , ID_ARTIST = FRAME_ID('T', 'P', 'E', '1')$/;"	e	enum:UsualStringIDs	file:
ID_COMMENT	id3tag.c	/^        , ID_COMMENT = FRAME_ID('C', 'O', 'M', 'M') \/* full text string *\/$/;"	e	enum:UsualStringIDs	file:
ID_DATE	id3tag.c	/^typedef enum NumericStringIDs { ID_DATE = FRAME_ID('T', 'D', 'A', 'T') \/* "ddMM" *\/$/;"	e	enum:NumericStringIDs	file:
ID_ENCODER	id3tag.c	/^        , ID_ENCODER = FRAME_ID('T', 'S', 'S', 'E')$/;"	e	enum:UsualStringIDs	file:
ID_ENCR	id3tag.c	/^        , ID_ENCR = FRAME_ID('E', 'N', 'C', 'R')$/;"	e	enum:MiscIDs	file:
ID_GENRE	id3tag.c	/^        , ID_GENRE = FRAME_ID('T', 'C', 'O', 'N')$/;"	e	enum:UsualStringIDs	file:
ID_GEOB	id3tag.c	/^        , ID_GEOB = FRAME_ID('G', 'E', 'O', 'B')$/;"	e	enum:MiscIDs	file:
ID_GRID	id3tag.c	/^        , ID_GRID = FRAME_ID('G', 'R', 'I', 'D')$/;"	e	enum:MiscIDs	file:
ID_LINK	id3tag.c	/^        , ID_LINK = FRAME_ID('L', 'I', 'N', 'K')$/;"	e	enum:MiscIDs	file:
ID_PCNT	id3tag.c	/^        , ID_PCNT = FRAME_ID('P', 'C', 'N', 'T')$/;"	e	enum:MiscIDs	file:
ID_PCST	id3tag.c	/^        , ID_PCST = FRAME_ID('P', 'C', 'S', 'T') \/* iTunes Podcast indicator, only presence important *\/$/;"	e	enum:MiscIDs	file:
ID_PLAYLENGTH	id3tag.c	/^        , ID_PLAYLENGTH = FRAME_ID('T', 'L', 'E', 'N')$/;"	e	enum:UsualStringIDs	file:
ID_PRIV	id3tag.c	/^        , ID_PRIV = FRAME_ID('P', 'R', 'I', 'V')$/;"	e	enum:MiscIDs	file:
ID_SYLT	id3tag.c	/^        , ID_SYLT = FRAME_ID('S', 'Y', 'L', 'T')$/;"	e	enum:MiscIDs	file:
ID_TIME	id3tag.c	/^        , ID_TIME = FRAME_ID('T', 'I', 'M', 'E') \/* "hhmm" *\/$/;"	e	enum:NumericStringIDs	file:
ID_TITLE	id3tag.c	/^typedef enum UsualStringIDs { ID_TITLE = FRAME_ID('T', 'I', 'T', '2')$/;"	e	enum:UsualStringIDs	file:
ID_TPOS	id3tag.c	/^        , ID_TPOS = FRAME_ID('T', 'P', 'O', 'S') \/* '0'-'9' and '\/' allowed *\/$/;"	e	enum:NumericStringIDs	file:
ID_TRACK	id3tag.c	/^        , ID_TRACK = FRAME_ID('T', 'R', 'C', 'K') \/* '0'-'9' and '\/' allowed *\/$/;"	e	enum:NumericStringIDs	file:
ID_TXXX	id3tag.c	/^typedef enum MiscIDs { ID_TXXX = FRAME_ID('T', 'X', 'X', 'X')$/;"	e	enum:MiscIDs	file:
ID_USER	id3tag.c	/^        , ID_USER = FRAME_ID('U', 'S', 'E', 'R') \/* full text string *\/$/;"	e	enum:MiscIDs	file:
ID_VSLT	id3tag.c	/^        , ID_VSLT = FRAME_ID('V', 'S', 'L', 'T') \/* full text string *\/$/;"	e	enum:MiscIDs	file:
ID_WFED	id3tag.c	/^        , ID_WFED = FRAME_ID('W', 'F', 'E', 'D') \/* iTunes Podcast URL as TEXT FRAME !!! violates standard *\/$/;"	e	enum:MiscIDs	file:
ID_WXXX	id3tag.c	/^        , ID_WXXX = FRAME_ID('W', 'X', 'X', 'X')$/;"	e	enum:MiscIDs	file:
ID_YEAR	id3tag.c	/^        , ID_YEAR = FRAME_ID('T', 'Y', 'E', 'R') \/* "yyyy" *\/$/;"	e	enum:NumericStringIDs	file:
III_psy_ratio	l3side.h	/^} III_psy_ratio;$/;"	t	typeref:struct:__anon32
III_psy_xmin	l3side.h	/^} III_psy_xmin;$/;"	t	typeref:struct:__anon31
III_side_info_t	l3side.h	/^} III_side_info_t;$/;"	t	typeref:struct:__anon34
INIT_GAIN_ANALYSIS_ERROR	gain_analysis.h	/^            1, INIT_GAIN_ANALYSIS_ERROR = 0, INIT_GAIN_ANALYSIS_OK = 1$/;"	e	enum:__anon38
INIT_GAIN_ANALYSIS_OK	gain_analysis.h	/^            1, INIT_GAIN_ANALYSIS_ERROR = 0, INIT_GAIN_ANALYSIS_OK = 1$/;"	e	enum:__anon38
INSANE	lame.h	/^    INSANE = 1003,$/;"	e	enum:preset_mode_e
IPOW20	machine.h	96;"	d
IXMAX_VAL	quantize_pvt.h	25;"	d
InitGainAnalysis	gain_analysis.c	/^InitGainAnalysis(replaygain_t * rgData, long samplefreq)$/;"	f	signature:(replaygain_t * rgData, long samplefreq)
InitGainAnalysis	gain_analysis.h	/^    int     InitGainAnalysis(replaygain_t * rgData, long samplefreq);$/;"	p	signature:(replaygain_t * rgData, long samplefreq)
InitVbrTag	VbrTag.c	/^InitVbrTag(lame_global_flags * gfp)$/;"	f	signature:(lame_global_flags * gfp)
InitVbrTag	VbrTag.h	/^int     InitVbrTag(lame_global_flags * gfp);$/;"	p	signature:(lame_global_flags * gfp)
IsVbrTag	VbrTag.c	/^IsVbrTag(const unsigned char *buf)$/;"	f	file:	signature:(const unsigned char *buf)
JOINT_STEREO	lame.h	/^  JOINT_STEREO,$/;"	e	enum:MPEG_mode_e
L3psycho_anal_ns	psymodel.h	/^int     L3psycho_anal_ns(lame_internal_flags * gfc,$/;"	p	signature:(lame_internal_flags * gfc, const sample_t *const buffer[2], int gr, III_psy_ratio ratio[2][2], III_psy_ratio MS_ratio[2][2], FLOAT pe[2], FLOAT pe_MS[2], FLOAT ener[2], int blocktype_d[2])
L3psycho_anal_vbr	psymodel.c	/^L3psycho_anal_vbr(lame_internal_flags * gfc,$/;"	f	signature:(lame_internal_flags * gfc, const sample_t * const buffer[2], int gr_out, III_psy_ratio masking_ratio[2][2], III_psy_ratio masking_MS_ratio[2][2], FLOAT percep_entropy[2], FLOAT percep_MS_entropy[2], FLOAT energy[4], int blocktype_d[2])
L3psycho_anal_vbr	psymodel.h	/^int     L3psycho_anal_vbr(lame_internal_flags * gfc,$/;"	p	signature:(lame_internal_flags * gfc, const sample_t *const buffer[2], int gr, III_psy_ratio ratio[2][2], III_psy_ratio MS_ratio[2][2], FLOAT pe[2], FLOAT pe_MS[2], FLOAT ener[2], int blocktype_d[2])
LAMEHEADERSIZE	VbrTag.c	61;"	d	file:
LAME_ALPHA_VERSION	version.h	41;"	d
LAME_BADBITRATE	lame.h	/^    LAME_BADBITRATE       = -11,$/;"	e	enum:__anon21
LAME_BADBITRATE	lameerror.h	/^    LAME_BADBITRATE = -11,$/;"	e	enum:__anon28
LAME_BADSAMPFREQ	lame.h	/^    LAME_BADSAMPFREQ      = -12,$/;"	e	enum:__anon21
LAME_BADSAMPFREQ	lameerror.h	/^    LAME_BADSAMPFREQ = -12,$/;"	e	enum:__anon28
LAME_BETA_VERSION	version.h	42;"	d
LAME_BITSTREAM_H	bitstream.h	23;"	d
LAME_DEFAULT_QUALITY	lame.c	64;"	d	file:
LAME_ENCODER_H	encoder.h	24;"	d
LAME_FFT_H	fft.h	23;"	d
LAME_GENERICERROR	lame.h	/^    LAME_GENERICERROR     =  -1,$/;"	e	enum:__anon21
LAME_GENERICERROR	lameerror.h	/^    LAME_GENERICERROR = -1,$/;"	e	enum:__anon28
LAME_GLOBAL_FLAGS_H	lame_global_flags.h	2;"	d
LAME_GTKANAL_H	lame-analysis.h	23;"	d
LAME_ID	util.h	486;"	d
LAME_ID3_H	id3tag.h	3;"	d
LAME_INTERNALERROR	lame.h	/^    LAME_INTERNALERROR    = -13,$/;"	e	enum:__anon21
LAME_INTERNALERROR	lameerror.h	/^    LAME_INTERNALERROR = -13,$/;"	e	enum:__anon28
LAME_INTRIN_H	vector/lame_intrin.h	24;"	d
LAME_L3SIDE_H	l3side.h	23;"	d
LAME_LAME_H	lame.h	25;"	d
LAME_MACHINE_H	machine.h	23;"	d
LAME_MAJOR_VERSION	version.h	37;"	d
LAME_MAXALBUMART	lame.h	1296;"	d
LAME_MAXMP3BUFFER	lame.h	1301;"	d
LAME_MINOR_VERSION	version.h	38;"	d
LAME_NEWMDCT_H	newmdct.h	23;"	d
LAME_NOERROR	lame.h	/^    LAME_NOERROR          =   0,$/;"	e	enum:__anon21
LAME_NOERROR	lameerror.h	/^    LAME_NOERROR = 0,$/;"	e	enum:__anon28
LAME_NOMEM	lame.h	/^    LAME_NOMEM            = -10,$/;"	e	enum:__anon21
LAME_NOMEM	lameerror.h	/^    LAME_NOMEM = -10,$/;"	e	enum:__anon28
LAME_OKAY	lame.h	/^    LAME_OKAY             =   0,$/;"	e	enum:__anon21
LAME_OKAY	lameerror.h	/^    LAME_OKAY = 0,$/;"	e	enum:__anon28
LAME_PATCH_LEVEL_STRING	version.h	51;"	d
LAME_PATCH_LEVEL_STRING	version.h	54;"	d
LAME_PATCH_LEVEL_STRING	version.h	58;"	d
LAME_PATCH_LEVEL_STRING	version.h	60;"	d
LAME_PATCH_VERSION	version.h	40;"	d
LAME_PSYMODEL_H	psymodel.h	23;"	d
LAME_QUANTIZE_H	quantize.h	23;"	d
LAME_QUANTIZE_PVT_H	quantize_pvt.h	23;"	d
LAME_RELEASE_VERSION	version.h	43;"	d
LAME_RESERVOIR_H	reservoir.h	23;"	d
LAME_TABLES_H	tables.h	23;"	d
LAME_TYPE_VERSION	version.h	39;"	d
LAME_URL	version.h	34;"	d
LAME_UTIL_H	util.h	24;"	d
LAME_VBRQUANTIZE_H	vbrquantize.h	23;"	d
LAME_VERSION_H	version.h	23;"	d
LAME_VERSION_STRING	version.h	64;"	d
LAME_VRBTAG_H	VbrTag.h	23;"	d
LAMEmainbits	lame-analysis.h	/^    int     LAMEmainbits[2][2];$/;"	m	struct:plotting_data	access:public
LAMEqss	lame-analysis.h	/^    int     LAMEqss[2][2];$/;"	m	struct:plotting_data	access:public
LAMEsfb	lame-analysis.h	/^    double  LAMEsfb[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
LAMEsfb_s	lame-analysis.h	/^    double  LAMEsfb_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
LAMEsfbits	lame-analysis.h	/^    int     LAMEsfbits[2][2];$/;"	m	struct:plotting_data	access:public
LARGE_BITS	quantize_pvt.h	126;"	d
LERP	presets.c	140;"	d	file:
LN_TO_LOG10	psymodel.c	160;"	d	file:
LN_TO_LOG10	psymodel.c	162;"	d	file:
LOG10	util.h	70;"	d
LOG10	util.h	72;"	d
LOG2	util.h	64;"	d
LOG2	util.h	66;"	d
LOG2_SIZE	util.c	949;"	d	file:
LOG2_SIZE_L2	util.c	950;"	d	file:
LongHuffmancodebits	bitstream.c	/^LongHuffmancodebits(lame_internal_flags * gfc, gr_info const *gi)$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info const *gi)
MAGIC_FLOAT	takehiro.c	140;"	d	file:
MAGIC_FLOAT	vbrquantize.c	/^static DOUBLEX const MAGIC_FLOAT = MAGIC_FLOAT_def;$/;"	v	file:
MAGIC_FLOAT_def	vbrquantize.c	90;"	d	file:
MAGIC_INT	takehiro.c	141;"	d	file:
MAGIC_INT	vbrquantize.c	/^static int const MAGIC_INT = MAGIC_INT_def;$/;"	v	file:
MAGIC_INT_def	vbrquantize.c	91;"	d	file:
MAXFRAMESIZE	VbrTag.c	498;"	d	file:
MAXMPGLAG	lame-analysis.h	27;"	d
MAX_BITS_PER_CHANNEL	util.h	85;"	d
MAX_BITS_PER_GRANULE	util.h	86;"	d
MAX_HEADER_BUF	util.h	276;"	d
MAX_HEADER_LEN	util.h	277;"	d
MAX_INDICATOR	lame.h	/^  MAX_INDICATOR   \/* Don't use this! It's used for sanity checks. *\/$/;"	e	enum:MPEG_mode_e
MAX_LENGTH	bitstream.c	50;"	d	file:
MAX_ORDER	gain_analysis.h	/^    enum { MAX_ORDER = (BUTTER_ORDER > YULE_ORDER ? BUTTER_ORDER : YULE_ORDER)$/;"	e	enum:__anon39
MAX_SAMPLES_PER_WINDOW	gain_analysis.h	/^            , MAX_SAMPLES_PER_WINDOW = ((MAX_SAMP_FREQ * RMS_WINDOW_TIME_NUMERATOR) \/ RMS_WINDOW_TIME_DENOMINATOR + 1) \/* max. Samples per Time slice *\/$/;"	e	enum:__anon39
MAX_SAMP_FREQ	gain_analysis.h	55;"	d
MAX_U_32_NUM	util.h	49;"	d
MAX_U_32_NUM	util.h	51;"	d
MAX_dB	gain_analysis.h	59;"	d
MDB_DEFAULT	lame.h	/^    MDB_DEFAULT=0,$/;"	e	enum:buffer_constraint_e
MDB_MAXIMUM	lame.h	/^    MDB_MAXIMUM=2$/;"	e	enum:buffer_constraint_e
MDB_STRICT_ISO	lame.h	/^    MDB_STRICT_ISO=1,$/;"	e	enum:buffer_constraint_e
MDCTDELAY	encoder.h	82;"	d
MEDIUM	lame.h	/^    MEDIUM = 1006,$/;"	e	enum:preset_mode_e
MEDIUM_FAST	lame.h	/^    MEDIUM_FAST = 1007$/;"	e	enum:preset_mode_e
MFSIZE	util.h	297;"	d
MIMETYPE_GIF	id3tag.h	/^    MIMETYPE_GIF,$/;"	e	enum:__anon16
MIMETYPE_JPEG	id3tag.h	/^    MIMETYPE_JPEG,$/;"	e	enum:__anon16
MIMETYPE_NONE	id3tag.h	/^    MIMETYPE_NONE = 0,$/;"	e	enum:__anon16
MIMETYPE_PNG	id3tag.h	/^    MIMETYPE_PNG,$/;"	e	enum:__anon16
MLIMIT	psymodel.c	246;"	d	file:
MMX	lame.h	/^    MMX = 1,$/;"	e	enum:asm_optimizations_e
MMX	util.h	/^            unsigned int MMX:1; \/* Pentium MMX, Pentium II...IV, K6, K6-2,$/;"	m	struct:lame_internal_flags::__anon15	access:public
MONO	lame.h	/^  MONO,$/;"	e	enum:MPEG_mode_e
MPEGChannelMode	encoder.h	/^enum MPEGChannelMode$/;"	g
MPEG_1	tables.c	/^    MPEG_1 = 1,$/;"	e	enum:__anon22	file:
MPEG_2	tables.c	/^    MPEG_2 = 0,$/;"	e	enum:__anon22	file:
MPEG_25	tables.c	/^    MPEG_25 = 2$/;"	e	enum:__anon22	file:
MPEG_mode	lame.h	/^} MPEG_mode;$/;"	t	typeref:enum:MPEG_mode_e
MPEG_mode_e	lame.h	/^typedef enum MPEG_mode_e {$/;"	g
MPEG_t	tables.c	/^} MPEG_t;$/;"	t	typeref:enum:__anon22	file:
MPG_MD_LR_I	encoder.h	/^,   MPG_MD_LR_I  = 1$/;"	e	enum:MPEGChannelMode
MPG_MD_LR_LR	encoder.h	/^{   MPG_MD_LR_LR = 0$/;"	e	enum:MPEGChannelMode
MPG_MD_MS_I	encoder.h	/^,   MPG_MD_MS_I  = 3$/;"	e	enum:MPEGChannelMode
MPG_MD_MS_LR	encoder.h	/^,   MPG_MD_MS_LR = 2$/;"	e	enum:MPEGChannelMode
MSGF	util.h	612;"	d
Max	presets.c	45;"	d	file:
Max	util.c	329;"	d	file:
Max	util.h	92;"	d
Min	presets.c	44;"	d	file:
Min	util.c	326;"	d	file:
Min	util.h	91;"	d
Miquel	i386/nasm.h	/^;	1999\/12\/02 for BCC ( Thanks to Miquel )$/;"	v
MiscIDs	id3tag.c	/^typedef enum MiscIDs { ID_TXXX = FRAME_ID('T', 'X', 'X', 'X')$/;"	g	file:
MiscIDs	id3tag.c	/^} MiscIDs;$/;"	t	typeref:enum:MiscIDs	file:
NASM	i386/nasm.h	/^;	1999\/11\/07 pushf, popf ��NASM�ΥХ��б�$/;"	v
NDEBUG	machine.h	28;"	d
NEQ	machine.h	175;"	d
NL	newmdct.c	231;"	d	file:
NOOP	presets.c	139;"	d	file:
NORM_TYPE	encoder.h	118;"	d
NOT_SET	lame.h	/^  NOT_SET,$/;"	e	enum:MPEG_mode_e
NS	newmdct.c	230;"	d	file:
NSATHSCALE	quantize_pvt.c	41;"	d	file:
NSATTACKTHRE	psymodel.h	61;"	d
NSATTACKTHRE_S	psymodel.h	62;"	d
NSFIRLEN	psymodel.c	157;"	d	file:
NS_INTERP	psymodel.c	/^NS_INTERP(FLOAT x, FLOAT y, FLOAT r)$/;"	f	file:	signature:(FLOAT x, FLOAT y, FLOAT r)
NS_MSFIX	psymodel.h	60;"	d
NS_PREECHO_ATT0	psymodel.h	56;"	d
NS_PREECHO_ATT1	psymodel.h	57;"	d
NS_PREECHO_ATT2	psymodel.h	58;"	d
NUMBACK	lame-analysis.h	29;"	d
NUMPINFO	lame-analysis.h	30;"	d
NUMTOCENTRIES	VbrTag.h	48;"	d
NumericStringIDs	id3tag.c	/^typedef enum NumericStringIDs { ID_DATE = FRAME_ID('T', 'D', 'A', 'T') \/* "ddMM" *\/$/;"	g	file:
NumericStringIDs	id3tag.c	/^} NumericStringIDs;$/;"	t	typeref:enum:NumericStringIDs	file:
OUTSIZE_CLIPPED	mpglib_interface.c	245;"	d	file:
OUTSIZE_UNCLIPPED	mpglib_interface.c	349;"	d	file:
OldValue	util.h	/^        int     OldValue[2];$/;"	m	struct:__anon11	access:public
P	version.c	121;"	d	file:
PAD_ADJUST	lame.h	/^  PAD_ADJUST,$/;"	e	enum:Padding_type_e
PAD_ALL	lame.h	/^  PAD_ALL,$/;"	e	enum:Padding_type_e
PAD_MAX_INDICATOR	lame.h	/^  PAD_MAX_INDICATOR   \/* Don't use this! It's used for sanity checks. *\/$/;"	e	enum:Padding_type_e
PAD_NO	lame.h	/^  PAD_NO = 0,$/;"	e	enum:Padding_type_e
PAD_V2_FLAG	id3tag.h	11;"	d
PCMSampleType	lame.c	/^enum PCMSampleType $/;"	g	file:
PI	util.h	56;"	d
PI	util.h	58;"	d
PINK_REF	gain_analysis.h	47;"	d
POSTDELAY	encoder.h	72;"	d
POW20	machine.h	92;"	d
PRECALC_SIZE	quantize_pvt.h	30;"	d
PRECOMPUTE	util.c	35;"	d	file:
PSFB12	encoder.h	106;"	d
PSFB21	encoder.h	105;"	d
PSY_ALPHA_VERSION	version.h	47;"	d
PSY_BETA_VERSION	version.h	48;"	d
PSY_GPSYCHO	lame.h	/^    PSY_GPSYCHO = 1,$/;"	e	enum:Psy_model_e
PSY_MAJOR_VERSION	version.h	45;"	d
PSY_MINOR_VERSION	version.h	46;"	d
PSY_NSPSYTUNE	lame.h	/^    PSY_NSPSYTUNE = 2$/;"	e	enum:Psy_model_e
Padding_type	lame.h	/^} Padding_type;$/;"	t	typeref:enum:Padding_type_e
Padding_type_e	lame.h	/^typedef enum Padding_type_e {$/;"	g
PeakSample	util.h	/^        sample_t PeakSample;$/;"	m	struct:__anon13	access:public
PsyConst_CB2SB_t	util.h	/^    } PsyConst_CB2SB_t;$/;"	t	typeref:struct:__anon4
PsyConst_t	util.h	/^    } PsyConst_t;$/;"	t	typeref:struct:__anon5
PsyResult_t	util.h	/^    } PsyResult_t;$/;"	t	typeref:struct:__anon7
PsyStateVar_t	util.h	/^    } PsyStateVar_t;$/;"	t	typeref:struct:__anon6
Psy_model	lame.h	/^} Psy_model;$/;"	t	typeref:enum:Psy_model_e
Psy_model_e	lame.h	/^typedef enum Psy_model_e {$/;"	g
PutLameVBR	VbrTag.c	/^PutLameVBR(lame_global_flags const *gfp, size_t nMusicLength, uint8_t * pbtStreamBuffer, uint16_t crc)$/;"	f	file:	signature:(lame_global_flags const *gfp, size_t nMusicLength, uint8_t * pbtStreamBuffer, uint16_t crc)
PutVbrTag	VbrTag.c	/^PutVbrTag(lame_global_flags const *gfp, FILE * fpStream)$/;"	f	signature:(lame_global_flags const *gfp, FILE * fpStream)
PutVbrTag	VbrTag.h	/^int     PutVbrTag(lame_global_flags const *gfp, FILE * fid);$/;"	p	signature:(lame_global_flags const *gfp, FILE * fid)
QUANTFAC	takehiro.c	218;"	d	file:
QUANTFAC	vbrquantize.c	103;"	d	file:
Q_MAX	quantize_pvt.h	47;"	d
Q_MAX2	quantize_pvt.h	48;"	d
QntStateVar_t	util.h	/^    } QntStateVar_t;$/;"	t	typeref:struct:__anon11
R3MIX	lame.h	/^    R3MIX = 1000,$/;"	e	enum:preset_mode_e
R4	i386/nasm.h	/^%define R4(a,b,c,d) (a*64+b*16+c*4+d)$/;"	p	signature:(a,b,c,d)
READ_AHEAD	lame-analysis.h	26;"	d
RMS_PERCENTILE	gain_analysis.h	54;"	d
RMS_WINDOW_TIME_DENOMINATOR	gain_analysis.h	57;"	d
RMS_WINDOW_TIME_NUMERATOR	gain_analysis.h	56;"	d
ROUNDFAC	takehiro.c	219;"	d	file:
ROUNDFAC	vbrquantize.c	/^static DOUBLEX const ROUNDFAC = ROUNDFAC_def;$/;"	v	file:
ROUNDFAC_def	vbrquantize.c	104;"	d	file:
RadioGain	util.h	/^        int     RadioGain;$/;"	m	struct:__anon13	access:public
ResetSampleFrequency	gain_analysis.c	/^ResetSampleFrequency(replaygain_t * rgData, long samplefreq)$/;"	f	signature:(replaygain_t * rgData, long samplefreq)
ResetSampleFrequency	gain_analysis.c	/^static int ResetSampleFrequency(replaygain_t * rgData, long samplefreq);$/;"	p	file:	signature:(replaygain_t * rgData, long samplefreq)
ResvAdjust	reservoir.c	/^ResvAdjust(lame_internal_flags * gfc, gr_info const *gi)$/;"	f	signature:(lame_internal_flags * gfc, gr_info const *gi)
ResvAdjust	reservoir.h	/^void    ResvAdjust(lame_internal_flags * gfc, gr_info const *gi);$/;"	p	signature:(lame_internal_flags * gfc, gr_info const *gi)
ResvFrameBegin	reservoir.c	/^ResvFrameBegin(lame_internal_flags * gfc, int *mean_bits)$/;"	f	signature:(lame_internal_flags * gfc, int *mean_bits)
ResvFrameBegin	reservoir.h	/^int     ResvFrameBegin(lame_internal_flags * gfc, int *mean_bits);$/;"	p	signature:(lame_internal_flags * gfc, int *mean_bits)
ResvFrameEnd	reservoir.c	/^ResvFrameEnd(lame_internal_flags * gfc, int mean_bits)$/;"	f	signature:(lame_internal_flags * gfc, int mean_bits)
ResvFrameEnd	reservoir.h	/^void    ResvFrameEnd(lame_internal_flags * gfc, int mean_bits);$/;"	p	signature:(lame_internal_flags * gfc, int mean_bits)
ResvMax	util.h	/^        int     ResvMax;     \/* in bits *\/$/;"	m	struct:__anon8	access:public
ResvMaxBits	reservoir.c	/^ResvMaxBits(lame_internal_flags * gfc, int mean_bits, int *targ_bits, int *extra_bits, int cbr)$/;"	f	signature:(lame_internal_flags * gfc, int mean_bits, int *targ_bits, int *extra_bits, int cbr)
ResvMaxBits	reservoir.h	/^void    ResvMaxBits(lame_internal_flags * gfc, int mean_bits, int *targ_bits, int *max_bits,$/;"	p	signature:(lame_internal_flags * gfc, int mean_bits, int *targ_bits, int *max_bits, int cbr)
ResvSize	util.h	/^        int     ResvSize;    \/* in bits *\/$/;"	m	struct:__anon8	access:public
RpgResult_t	util.h	/^    } RpgResult_t;$/;"	t	typeref:struct:__anon13
RpgStateVar_t	util.h	/^    } RpgStateVar_t;$/;"	t	typeref:struct:__anon12
SBLIMIT	encoder.h	93;"	d
SBMAX_l	encoder.h	103;"	d
SBMAX_s	encoder.h	104;"	d
SBPSY_l	encoder.h	99;"	d
SBPSY_s	encoder.h	100;"	d
SET_OPTION	presets.c	34;"	d	file:
SET__OPTION	presets.c	39;"	d	file:
SFBMAX	l3side.h	26;"	d
SHIFT_IN_BITS_VALUE	VbrTag.c	254;"	d	file:
SHORT_TYPE	encoder.h	120;"	d
SPACE_V1_FLAG	id3tag.h	10;"	d
SQRT2	util.h	77;"	d
SQRT2	util.h	79;"	d
SSE	lame.h	/^    SSE = 3$/;"	e	enum:asm_optimizations_e
SSE	util.h	/^            unsigned int SSE:1; \/* Pentium III, Pentium 4    *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
SSE2	util.h	/^            unsigned int SSE2:1; \/* Pentium 4, K8             *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
STANDARD	lame.h	/^    STANDARD = 1001,$/;"	e	enum:preset_mode_e
STANDARD_FAST	lame.h	/^    STANDARD_FAST = 1004,$/;"	e	enum:preset_mode_e
START_TYPE	encoder.h	119;"	d
STATIC_ASSERT_EQUAL_DIMENSION	psymodel.c	271;"	d	file:
STEPS_per_dB	gain_analysis.h	58;"	d
STEREO	lame.h	/^  STEREO = 0,$/;"	e	enum:MPEG_mode_e
STOP_TYPE	encoder.h	121;"	d
STR	version.h	31;"	d
SessionConfig_t	util.h	/^    } SessionConfig_t;$/;"	t	typeref:struct:__anon14
ShortHuffmancodebits	bitstream.c	/^ShortHuffmancodebits(lame_internal_flags * gfc, gr_info const *gi)$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info const *gi)
SmpFrqIndex	util.c	/^SmpFrqIndex(int sample_freq, int *const version)$/;"	f	signature:(int sample_freq, int *const version)
SmpFrqIndex	util.h	/^    extern int SmpFrqIndex(int, int *const);$/;"	p	signature:(int, int *const)
TOC_FLAG	VbrTag.h	45;"	d
TRI_SIZE	fft.c	51;"	d	file:
TRI_SIZE	vector/xmm_quantize_sub.c	45;"	d	file:
TRUE	util.h	45;"	d
TotalFrameSize	util.h	/^        unsigned int TotalFrameSize;$/;"	m	struct:__anon2	access:public
UpdateMusicCRC	VbrTag.c	/^UpdateMusicCRC(uint16_t * crc, unsigned char const *buffer, int size)$/;"	f	signature:(uint16_t * crc, unsigned char const *buffer, int size)
UpdateMusicCRC	VbrTag.h	/^void    UpdateMusicCRC(uint16_t * crc, const unsigned char *buffer, int size);$/;"	p	signature:(uint16_t * crc, const unsigned char *buffer, int size)
UsualStringIDs	id3tag.c	/^typedef enum UsualStringIDs { ID_TITLE = FRAME_ID('T', 'I', 'T', '2')$/;"	g	file:
UsualStringIDs	id3tag.c	/^} UsualStringIDs;$/;"	t	typeref:enum:UsualStringIDs	file:
V0	lame.h	/^    V0 = 500,$/;"	e	enum:preset_mode_e
V1	lame.h	/^    V1 = 490,$/;"	e	enum:preset_mode_e
V1_ONLY_FLAG	id3tag.h	8;"	d
V2	lame.h	/^    V2 = 480,$/;"	e	enum:preset_mode_e
V2_ONLY_FLAG	id3tag.h	9;"	d
V3	lame.h	/^    V3 = 470,$/;"	e	enum:preset_mode_e
V4	lame.h	/^    V4 = 460,$/;"	e	enum:preset_mode_e
V5	lame.h	/^    V5 = 450,$/;"	e	enum:preset_mode_e
V6	lame.h	/^    V6 = 440,$/;"	e	enum:preset_mode_e
V7	lame.h	/^    V7 = 430,$/;"	e	enum:preset_mode_e
V8	lame.h	/^    V8 = 420,$/;"	e	enum:preset_mode_e
V9	lame.h	/^    V9 = 410, \/*Vx to match Lame and VBR_xx to match FhG*\/$/;"	e	enum:preset_mode_e
VBR	lame_global_flags.h	/^    vbr_mode VBR;$/;"	m	struct:lame_global_struct	access:public
VBRHEADERSIZE	VbrTag.c	59;"	d	file:
VBRTAGDATA	VbrTag.h	/^} VBRTAGDATA;$/;"	t	typeref:struct:__anon29
VBRTag0	VbrTag.c	/^static const char VBRTag0[] = { "Xing" };$/;"	v	file:
VBRTag1	VbrTag.c	/^static const char VBRTag1[] = { "Info" };$/;"	v	file:
VBR_10	lame.h	/^    VBR_10 = 410,$/;"	e	enum:preset_mode_e
VBR_100	lame.h	/^    VBR_100 = 500,$/;"	e	enum:preset_mode_e
VBR_20	lame.h	/^    VBR_20 = 420,$/;"	e	enum:preset_mode_e
VBR_30	lame.h	/^    VBR_30 = 430,$/;"	e	enum:preset_mode_e
VBR_40	lame.h	/^    VBR_40 = 440,$/;"	e	enum:preset_mode_e
VBR_50	lame.h	/^    VBR_50 = 450,$/;"	e	enum:preset_mode_e
VBR_60	lame.h	/^    VBR_60 = 460,$/;"	e	enum:preset_mode_e
VBR_70	lame.h	/^    VBR_70 = 470,$/;"	e	enum:preset_mode_e
VBR_80	lame.h	/^    VBR_80 = 480,$/;"	e	enum:preset_mode_e
VBR_90	lame.h	/^    VBR_90 = 490,$/;"	e	enum:preset_mode_e
VBR_SCALE_FLAG	VbrTag.h	46;"	d
VBR_encode_frame	vbrquantize.c	/^VBR_encode_frame(lame_internal_flags * gfc, const FLOAT xr34orig[2][2][576],$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT xr34orig[2][2][576], const FLOAT l3_xmin[2][2][SFBMAX], const int max_bits[2][2])
VBR_encode_frame	vbrquantize.h	/^int     VBR_encode_frame(lame_internal_flags * gfc, const FLOAT xr34orig[2][2][576],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT xr34orig[2][2][576], const FLOAT l3_xmin[2][2][SFBMAX], const int maxbits[2][2])
VBR_encode_granule	quantize.c	/^VBR_encode_granule(lame_internal_flags * gfc, gr_info * const cod_info, const FLOAT * const l3_xmin, \/* allowed distortion of the scalefactor *\/$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info * const cod_info, const FLOAT * const l3_xmin, FLOAT xrpow[576], const int ch, int min_bits, int max_bits)
VBR_hard_min	lame_global_flags.h	/^    int     VBR_hard_min;    \/* strictly enforce VBR_min_bitrate$/;"	m	struct:lame_global_struct	access:public
VBR_max_bitrate_kbps	lame_global_flags.h	/^    int     VBR_max_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
VBR_mean_bitrate_kbps	lame_global_flags.h	/^    int     VBR_mean_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
VBR_min_bitrate_kbps	lame_global_flags.h	/^    int     VBR_min_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
VBR_new_iteration_loop	quantize.c	/^VBR_new_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ener_ratio[2], const III_psy_ratio ratio[2][2])
VBR_new_iteration_loop	quantize.h	/^void    VBR_new_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ratio[2], const III_psy_ratio ratio[2][2])
VBR_new_prepare	quantize.c	/^VBR_new_prepare(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const III_psy_ratio ratio[2][2], FLOAT l3_xmin[2][2][SFBMAX], int frameBits[16], int max_bits[2][2], int* max_resv)
VBR_old_iteration_loop	quantize.c	/^VBR_old_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ener_ratio[2], const III_psy_ratio ratio[2][2])
VBR_old_iteration_loop	quantize.h	/^void    VBR_old_iteration_loop(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], const FLOAT ms_ratio[2], const III_psy_ratio ratio[2][2])
VBR_old_prepare	quantize.c	/^VBR_old_prepare(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], FLOAT const ms_ener_ratio[2], const III_psy_ratio ratio[2][2], FLOAT l3_xmin[2][2][SFBMAX], int frameBits[16], int min_bits[2][2], int max_bits[2][2], int bands[2][2])
VBR_q	lame_global_flags.h	/^    int     VBR_q;           \/* Range [0,...,9] *\/$/;"	m	struct:lame_global_struct	access:public
VBR_q_frac	lame_global_flags.h	/^    float   VBR_q_frac;      \/* Range [0,...,1[ *\/$/;"	m	struct:lame_global_struct	access:public
VBR_seek_info_t	util.h	/^    } VBR_seek_info_t;$/;"	t	typeref:struct:__anon2
VBR_seek_table	util.h	/^        VBR_seek_info_t VBR_seek_table; \/* used for Xing VBR header *\/$/;"	m	struct:lame_internal_flags	access:public
VOLATILE	vbrquantize.c	69;"	d	file:
VOLATILE	vbrquantize.c	71;"	d	file:
VOLATILE	vbrquantize.c	74;"	d	file:
VO_SCALE	psymodel.h	52;"	d
WIN32_LEAN_AND_MEAN	machine.h	129;"	d
XING_BITRATE1	VbrTag.c	64;"	d	file:
XING_BITRATE2	VbrTag.c	65;"	d	file:
XING_BITRATE25	VbrTag.c	66;"	d	file:
XRPOW_FTOI	takehiro.c	217;"	d	file:
XRPOW_FTOI	vbrquantize.c	105;"	d	file:
Xing_seek_table	VbrTag.c	/^Xing_seek_table(VBR_seek_info_t const* v, unsigned char *t)$/;"	f	file:	signature:(VBR_seek_info_t const* v, unsigned char *t)
YULE_FILTER	gain_analysis.h	52;"	d
YULE_ORDER	gain_analysis.h	50;"	d
__OUTPUT_FORMAT__	i386/nasm.h	/^%ifidn __OUTPUT_FORMAT__,elf$/;"	v
__SET_GET_H__	set_get.h	22;"	d
__STR	version.h	30;"	d
__anon10::bitrate_blocktype_hist	util.h	/^        int     bitrate_blocktype_hist[16][4 + 1 + 1]; \/*norm\/start\/short\/stop\/mixed(short)\/sum *\/$/;"	m	struct:__anon10	access:public
__anon10::bitrate_channelmode_hist	util.h	/^        int     bitrate_channelmode_hist[16][4 + 1];$/;"	m	struct:__anon10	access:public
__anon10::bitrate_index	util.h	/^        int     bitrate_index;$/;"	m	struct:__anon10	access:public
__anon10::encoder_delay	util.h	/^        int     encoder_delay;$/;"	m	struct:__anon10	access:public
__anon10::encoder_padding	util.h	/^        int     encoder_padding; \/* number of samples of padding appended to input *\/$/;"	m	struct:__anon10	access:public
__anon10::frame_number	util.h	/^        int     frame_number; \/* number of frames encoded             *\/$/;"	m	struct:__anon10	access:public
__anon10::mode_ext	util.h	/^        int     mode_ext;$/;"	m	struct:__anon10	access:public
__anon10::padding	util.h	/^        int     padding;     \/* padding for the current frame? *\/$/;"	m	struct:__anon10	access:public
__anon11::CurrentStep	util.h	/^        int     CurrentStep[2];$/;"	m	struct:__anon11	access:public
__anon11::OldValue	util.h	/^        int     OldValue[2];$/;"	m	struct:__anon11	access:public
__anon11::bv_scf	util.h	/^        char    bv_scf[576];$/;"	m	struct:__anon11	access:public
__anon11::longfact	util.h	/^        FLOAT   longfact[SBMAX_l];$/;"	m	struct:__anon11	access:public
__anon11::mask_adjust	util.h	/^        FLOAT   mask_adjust; \/* the dbQ stuff *\/$/;"	m	struct:__anon11	access:public
__anon11::mask_adjust_short	util.h	/^        FLOAT   mask_adjust_short; \/* the dbQ stuff *\/$/;"	m	struct:__anon11	access:public
__anon11::masking_lower	util.h	/^        FLOAT   masking_lower;$/;"	m	struct:__anon11	access:public
__anon11::pseudohalf	util.h	/^        int     pseudohalf[SFBMAX];$/;"	m	struct:__anon11	access:public
__anon11::sfb21_extra	util.h	/^        int     sfb21_extra; \/* will be set in lame_init_params *\/$/;"	m	struct:__anon11	access:public
__anon11::shortfact	util.h	/^        FLOAT   shortfact[SBMAX_s];$/;"	m	struct:__anon11	access:public
__anon11::substep_shaping	util.h	/^        int     substep_shaping; \/* 0 = no substep$/;"	m	struct:__anon11	access:public
__anon12::rgdata	util.h	/^        replaygain_t *rgdata;$/;"	m	struct:__anon12	access:public
__anon13::PeakSample	util.h	/^        sample_t PeakSample;$/;"	m	struct:__anon13	access:public
__anon13::RadioGain	util.h	/^        int     RadioGain;$/;"	m	struct:__anon13	access:public
__anon13::noclipGainChange	util.h	/^        int     noclipGainChange; \/* gain change required for preventing clipping *\/$/;"	m	struct:__anon13	access:public
__anon13::noclipScale	util.h	/^        FLOAT   noclipScale; \/* user-specified scale factor required for preventing clipping *\/$/;"	m	struct:__anon13	access:public
__anon14::ATH_offset_db	util.h	/^        float   ATH_offset_db;\/* add to ATH this many db            *\/$/;"	m	struct:__anon14	access:public
__anon14::ATH_offset_factor	util.h	/^        float   ATH_offset_factor;\/* change ATH by this factor, derived from ATH_offset_db *\/$/;"	m	struct:__anon14	access:public
__anon14::ATHcurve	util.h	/^        float   ATHcurve;    \/* change ATH formula 4 shape           *\/$/;"	m	struct:__anon14	access:public
__anon14::ATHfixpoint	util.h	/^        float   ATHfixpoint;$/;"	m	struct:__anon14	access:public
__anon14::ATHonly	util.h	/^        int     ATHonly;     \/* only use ATH                         *\/$/;"	m	struct:__anon14	access:public
__anon14::ATHshort	util.h	/^        int     ATHshort;    \/* only use ATH for short blocks        *\/$/;"	m	struct:__anon14	access:public
__anon14::ATHtype	util.h	/^        int     ATHtype;$/;"	m	struct:__anon14	access:public
__anon14::adjust_alto_db	util.h	/^        float   adjust_alto_db;$/;"	m	struct:__anon14	access:public
__anon14::adjust_bass_db	util.h	/^        float   adjust_bass_db;$/;"	m	struct:__anon14	access:public
__anon14::adjust_sfb21_db	util.h	/^        float   adjust_sfb21_db;$/;"	m	struct:__anon14	access:public
__anon14::adjust_treble_db	util.h	/^        float   adjust_treble_db;$/;"	m	struct:__anon14	access:public
__anon14::analysis	util.h	/^        int     analysis;$/;"	m	struct:__anon14	access:public
__anon14::avg_bitrate	util.h	/^        int     avg_bitrate;$/;"	m	struct:__anon14	access:public
__anon14::buffer_constraint	util.h	/^        int     buffer_constraint;  \/* enforce ISO spec as much as possible   *\/$/;"	m	struct:__anon14	access:public
__anon14::channels_in	util.h	/^        int     channels_in; \/* number of channels in the input data stream (PCM or decoded PCM) *\/$/;"	m	struct:__anon14	access:public
__anon14::channels_out	util.h	/^        int     channels_out; \/* number of channels in the output data stream (not used for decoding) *\/$/;"	m	struct:__anon14	access:public
__anon14::compression_ratio	util.h	/^        float   compression_ratio; \/* sizeof(wav file)\/sizeof(mp3 file)          *\/$/;"	m	struct:__anon14	access:public
__anon14::copyright	util.h	/^        int     copyright;   \/* mark as copyright. default=0           *\/$/;"	m	struct:__anon14	access:public
__anon14::decode_on_the_fly	util.h	/^        int     decode_on_the_fly; \/* decode on the fly? default=0                *\/$/;"	m	struct:__anon14	access:public
__anon14::disable_reservoir	util.h	/^        int     disable_reservoir;$/;"	m	struct:__anon14	access:public
__anon14::emphasis	util.h	/^        int     emphasis;    \/* Input PCM is emphased PCM (for$/;"	m	struct:__anon14	access:public
__anon14::enforce_min_bitrate	util.h	/^        int     enforce_min_bitrate; \/* strictly enforce VBR_min_bitrate normaly, it will be violated for analog silence *\/$/;"	m	struct:__anon14	access:public
__anon14::error_protection	util.h	/^        int     error_protection; \/* use 2 bytes per frame for a CRC checksum. default=0 *\/$/;"	m	struct:__anon14	access:public
__anon14::extension	util.h	/^        int     extension;   \/* the MP3 'private extension' bit. Meaningless *\/$/;"	m	struct:__anon14	access:public
__anon14::findPeakSample	util.h	/^        int     findPeakSample;$/;"	m	struct:__anon14	access:public
__anon14::findReplayGain	util.h	/^        int     findReplayGain; \/* find the RG value? default=0       *\/$/;"	m	struct:__anon14	access:public
__anon14::force_ms	util.h	/^        int     force_ms;    \/* force M\/S mode.  requires mode=1            *\/$/;"	m	struct:__anon14	access:public
__anon14::free_format	util.h	/^        int     free_format;$/;"	m	struct:__anon14	access:public
__anon14::full_outer_loop	util.h	/^        int     full_outer_loop; \/* 0 = stop early after 0 distortion found. 1 = full search *\/$/;"	m	struct:__anon14	access:public
__anon14::highpass1	util.h	/^        FLOAT   highpass1, highpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
__anon14::highpass2	util.h	/^        FLOAT   highpass1, highpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
__anon14::highpassfreq	util.h	/^        int     highpassfreq;$/;"	m	struct:__anon14	access:public
__anon14::interChRatio	util.h	/^        float   interChRatio;$/;"	m	struct:__anon14	access:public
__anon14::lowpass1	util.h	/^        FLOAT   lowpass1, lowpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
__anon14::lowpass2	util.h	/^        FLOAT   lowpass1, lowpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
__anon14::lowpassfreq	util.h	/^        int     lowpassfreq;$/;"	m	struct:__anon14	access:public
__anon14::minval	util.h	/^        FLOAT   minval;$/;"	m	struct:__anon14	access:public
__anon14::mode	util.h	/^        MPEG_mode mode;$/;"	m	struct:__anon14	access:public
__anon14::mode_gr	util.h	/^        int     mode_gr;     \/* granules per frame *\/$/;"	m	struct:__anon14	access:public
__anon14::msfix	util.h	/^        float   msfix;       \/* Naoki's adjustment of Mid\/Side maskings *\/$/;"	m	struct:__anon14	access:public
__anon14::noATH	util.h	/^        int     noATH;       \/* disable ATH                          *\/$/;"	m	struct:__anon14	access:public
__anon14::noise_shaping	util.h	/^        int     noise_shaping; \/* 0 = none$/;"	m	struct:__anon14	access:public
__anon14::noise_shaping_amp	util.h	/^        int     noise_shaping_amp; \/*  0 = ISO model: amplify all distorted bands$/;"	m	struct:__anon14	access:public
__anon14::noise_shaping_stop	util.h	/^        int     noise_shaping_stop; \/* 0 = stop at over=0, all scalefacs amplified or$/;"	m	struct:__anon14	access:public
__anon14::original	util.h	/^        int     original;    \/* mark as original. default=1            *\/$/;"	m	struct:__anon14	access:public
__anon14::pcm_transform	util.h	/^        FLOAT   pcm_transform[2][2];$/;"	m	struct:__anon14	access:public
__anon14::preset	util.h	/^        int     preset;$/;"	m	struct:__anon14	access:public
__anon14::quant_comp	util.h	/^        int     quant_comp;$/;"	m	struct:__anon14	access:public
__anon14::quant_comp_short	util.h	/^        int     quant_comp_short;$/;"	m	struct:__anon14	access:public
__anon14::samplerate_in	util.h	/^        int     samplerate_in; \/* input_samp_rate in Hz. default=44.1 kHz     *\/$/;"	m	struct:__anon14	access:public
__anon14::samplerate_index	util.h	/^        int     samplerate_index;$/;"	m	struct:__anon14	access:public
__anon14::samplerate_out	util.h	/^        int     samplerate_out; \/* output_samp_rate. *\/$/;"	m	struct:__anon14	access:public
__anon14::short_blocks	util.h	/^        short_block_t short_blocks;$/;"	m	struct:__anon14	access:public
__anon14::sideinfo_len	util.h	/^        int     sideinfo_len;$/;"	m	struct:__anon14	access:public
__anon14::subblock_gain	util.h	/^        int     subblock_gain; \/*  0 = no, 1 = yes *\/$/;"	m	struct:__anon14	access:public
__anon14::use_best_huffman	util.h	/^        int     use_best_huffman; \/* 0 = no.  1=outside loop  2=inside loop(slow) *\/$/;"	m	struct:__anon14	access:public
__anon14::use_safe_joint_stereo	util.h	/^        int     use_safe_joint_stereo;$/;"	m	struct:__anon14	access:public
__anon14::use_temporal_masking_effect	util.h	/^        int     use_temporal_masking_effect;$/;"	m	struct:__anon14	access:public
__anon14::vbr	util.h	/^        vbr_mode vbr;$/;"	m	struct:__anon14	access:public
__anon14::vbr_avg_bitrate_kbps	util.h	/^        int     vbr_avg_bitrate_kbps;$/;"	m	struct:__anon14	access:public
__anon14::vbr_max_bitrate_index	util.h	/^        int     vbr_max_bitrate_index; \/* max bitrate index *\/$/;"	m	struct:__anon14	access:public
__anon14::vbr_min_bitrate_index	util.h	/^        int     vbr_min_bitrate_index; \/* min bitrate index *\/$/;"	m	struct:__anon14	access:public
__anon14::version	util.h	/^        int     version;     \/* 0=MPEG-2\/2.5  1=MPEG-1               *\/$/;"	m	struct:__anon14	access:public
__anon14::write_lame_tag	util.h	/^        int     write_lame_tag; \/* add Xing VBR tag?                           *\/$/;"	m	struct:__anon14	access:public
__anon19::alpha	lame.h	/^    int alpha;               \/* 0 if not an alpha version                  *\/$/;"	m	struct:__anon19	access:public
__anon19::beta	lame.h	/^    int beta;                \/* 0 if not a beta version                    *\/$/;"	m	struct:__anon19	access:public
__anon19::features	lame.h	/^    const char *features;    \/* Don't make assumptions about the contents! *\/$/;"	m	struct:__anon19	access:public
__anon19::major	lame.h	/^    int major;$/;"	m	struct:__anon19	access:public
__anon19::minor	lame.h	/^    int minor;$/;"	m	struct:__anon19	access:public
__anon19::psy_alpha	lame.h	/^    int psy_alpha;           \/* 0 if not an alpha version                  *\/$/;"	m	struct:__anon19	access:public
__anon19::psy_beta	lame.h	/^    int psy_beta;            \/* 0 if not a beta version                    *\/$/;"	m	struct:__anon19	access:public
__anon19::psy_major	lame.h	/^    int psy_major;$/;"	m	struct:__anon19	access:public
__anon19::psy_minor	lame.h	/^    int psy_minor;$/;"	m	struct:__anon19	access:public
__anon1::aligned	util.h	/^        void   *aligned;     \/* pointer to ie. 128 bit aligned memory *\/$/;"	m	struct:__anon1	access:public
__anon1::pointer	util.h	/^        void   *pointer;     \/* to use with malloc\/free *\/$/;"	m	struct:__anon1	access:public
__anon20::bitrate	lame.h	/^  int bitrate;         \/* bitrate                                        *\/$/;"	m	struct:__anon20	access:public
__anon20::framenum	lame.h	/^  int framenum;        \/* frames decoded counter                         *\/$/;"	m	struct:__anon20	access:public
__anon20::framesize	lame.h	/^  int framesize;       \/* number of samples per mp3 frame                *\/$/;"	m	struct:__anon20	access:public
__anon20::header_parsed	lame.h	/^  int header_parsed;   \/* 1 if header was parsed and following data was$/;"	m	struct:__anon20	access:public
__anon20::mode	lame.h	/^  int mode;            \/* mp3 frame type                                 *\/$/;"	m	struct:__anon20	access:public
__anon20::mode_ext	lame.h	/^  int mode_ext;        \/* mp3 frame type                                 *\/$/;"	m	struct:__anon20	access:public
__anon20::nsamp	lame.h	/^  unsigned long nsamp; \/* number of samples in mp3 file.                 *\/$/;"	m	struct:__anon20	access:public
__anon20::samplerate	lame.h	/^  int samplerate;      \/* sample rate                                    *\/$/;"	m	struct:__anon20	access:public
__anon20::stereo	lame.h	/^  int stereo;          \/* number of channels                             *\/$/;"	m	struct:__anon20	access:public
__anon20::totalframes	lame.h	/^  int totalframes;     \/* total number of frames in mp3 file             *\/$/;"	m	struct:__anon20	access:public
__anon23::_float	vector/xmm_quantize_sub.c	/^    float   _float[4];$/;"	m	union:__anon23	file:	access:public
__anon23::_i_32	vector/xmm_quantize_sub.c	/^    int32_t _i_32[4]; \/* unions are initialized by its first member *\/$/;"	m	union:__anon23	file:	access:public
__anon23::_m128	vector/xmm_quantize_sub.c	/^    __m128  _m128;$/;"	m	union:__anon23	file:	access:public
__anon24::ath_curve	presets.c	/^    FLOAT   ath_curve;$/;"	m	struct:__anon24	file:	access:public
__anon24::ath_fixpoint	presets.c	/^    FLOAT   ath_fixpoint;$/;"	m	struct:__anon24	file:	access:public
__anon24::ath_lower	presets.c	/^    FLOAT   ath_lower;$/;"	m	struct:__anon24	file:	access:public
__anon24::ath_sensitivity	presets.c	/^    FLOAT   ath_sensitivity;$/;"	m	struct:__anon24	file:	access:public
__anon24::expY	presets.c	/^    int     expY;$/;"	m	struct:__anon24	file:	access:public
__anon24::interch	presets.c	/^    FLOAT   interch;$/;"	m	struct:__anon24	file:	access:public
__anon24::masking_adj	presets.c	/^    FLOAT   masking_adj;$/;"	m	struct:__anon24	file:	access:public
__anon24::masking_adj_short	presets.c	/^    FLOAT   masking_adj_short;$/;"	m	struct:__anon24	file:	access:public
__anon24::minval	presets.c	/^    FLOAT   minval;$/;"	m	struct:__anon24	file:	access:public
__anon24::msfix	presets.c	/^    FLOAT   msfix;$/;"	m	struct:__anon24	file:	access:public
__anon24::quant_comp	presets.c	/^    int     quant_comp;$/;"	m	struct:__anon24	file:	access:public
__anon24::quant_comp_s	presets.c	/^    int     quant_comp_s;$/;"	m	struct:__anon24	file:	access:public
__anon24::safejoint	presets.c	/^    int     safejoint;$/;"	m	struct:__anon24	file:	access:public
__anon24::sfb21mod	presets.c	/^    int     sfb21mod;$/;"	m	struct:__anon24	file:	access:public
__anon24::st_lrm	presets.c	/^    FLOAT   st_lrm;          \/*short threshold *\/$/;"	m	struct:__anon24	file:	access:public
__anon24::st_s	presets.c	/^    FLOAT   st_s;$/;"	m	struct:__anon24	file:	access:public
__anon24::vbr_q	presets.c	/^    int     vbr_q;$/;"	m	struct:__anon24	file:	access:public
__anon29::bytes	VbrTag.h	/^    int     bytes;           \/* total bit stream bytes from Vbr header data *\/$/;"	m	struct:__anon29	access:public
__anon29::enc_delay	VbrTag.h	/^    int     enc_delay;       \/* encoder delay *\/$/;"	m	struct:__anon29	access:public
__anon29::enc_padding	VbrTag.h	/^    int     enc_padding;     \/* encoder paddign added at end of stream *\/$/;"	m	struct:__anon29	access:public
__anon29::flags	VbrTag.h	/^    int     flags;           \/* from Vbr header data *\/$/;"	m	struct:__anon29	access:public
__anon29::frames	VbrTag.h	/^    int     frames;          \/* total bit stream frames from Vbr header data *\/$/;"	m	struct:__anon29	access:public
__anon29::h_id	VbrTag.h	/^    int     h_id;            \/* from MPEG header, 0=MPEG2, 1=MPEG1 *\/$/;"	m	struct:__anon29	access:public
__anon29::headersize	VbrTag.h	/^    int     headersize;      \/* size of VBR header, in bytes *\/$/;"	m	struct:__anon29	access:public
__anon29::samprate	VbrTag.h	/^    int     samprate;        \/* determined from MPEG header *\/$/;"	m	struct:__anon29	access:public
__anon29::toc	VbrTag.h	/^    unsigned char toc[NUMTOCENTRIES]; \/* may be NULL if toc not desired *\/$/;"	m	struct:__anon29	access:public
__anon29::vbr_scale	VbrTag.h	/^    int     vbr_scale;       \/* encoded vbr scale from Vbr header data *\/$/;"	m	struct:__anon29	access:public
__anon2::TotalFrameSize	util.h	/^        unsigned int TotalFrameSize;$/;"	m	struct:__anon2	access:public
__anon2::bag	util.h	/^        int    *bag;         \/* pointer to our bag *\/$/;"	m	struct:__anon2	access:public
__anon2::nBytesWritten	util.h	/^        unsigned long nBytesWritten;$/;"	m	struct:__anon2	access:public
__anon2::nVbrNumFrames	util.h	/^        unsigned int nVbrNumFrames;$/;"	m	struct:__anon2	access:public
__anon2::pos	util.h	/^        int     pos;         \/* actual position in our bag *\/$/;"	m	struct:__anon2	access:public
__anon2::seen	util.h	/^        int     seen;        \/* how many frames we have seen in this chunk *\/$/;"	m	struct:__anon2	access:public
__anon2::size	util.h	/^        int     size;        \/* size of our bag *\/$/;"	m	struct:__anon2	access:public
__anon2::sum	util.h	/^        int     sum;         \/* what we have seen so far *\/$/;"	m	struct:__anon2	access:public
__anon2::want	util.h	/^        int     want;        \/* how many frames we want to collect into one chunk *\/$/;"	m	struct:__anon2	access:public
__anon30::l	l3side.h	/^    int     l[1 + SBMAX_l];$/;"	m	struct:__anon30	access:public
__anon30::psfb12	l3side.h	/^    int     psfb12[1 + PSFB12];$/;"	m	struct:__anon30	access:public
__anon30::psfb21	l3side.h	/^    int     psfb21[1 + PSFB21];$/;"	m	struct:__anon30	access:public
__anon30::s	l3side.h	/^    int     s[1 + SBMAX_s];$/;"	m	struct:__anon30	access:public
__anon31::l	l3side.h	/^    FLOAT   l[SBMAX_l];$/;"	m	struct:__anon31	access:public
__anon31::s	l3side.h	/^    FLOAT   s[SBMAX_s][3];$/;"	m	struct:__anon31	access:public
__anon32::en	l3side.h	/^    III_psy_xmin en;$/;"	m	struct:__anon32	access:public
__anon32::thm	l3side.h	/^    III_psy_xmin thm;$/;"	m	struct:__anon32	access:public
__anon33::big_values	l3side.h	/^    int     big_values;$/;"	m	struct:__anon33	access:public
__anon33::block_type	l3side.h	/^    int     block_type;$/;"	m	struct:__anon33	access:public
__anon33::count1	l3side.h	/^    int     count1;$/;"	m	struct:__anon33	access:public
__anon33::count1bits	l3side.h	/^    int     count1bits;$/;"	m	struct:__anon33	access:public
__anon33::count1table_select	l3side.h	/^    int     count1table_select;$/;"	m	struct:__anon33	access:public
__anon33::energy_above_cutoff	l3side.h	/^    char    energy_above_cutoff[SFBMAX];$/;"	m	struct:__anon33	access:public
__anon33::global_gain	l3side.h	/^    int     global_gain;$/;"	m	struct:__anon33	access:public
__anon33::l3_enc	l3side.h	/^    int     l3_enc[576];$/;"	m	struct:__anon33	access:public
__anon33::max_nonzero_coeff	l3side.h	/^    int     max_nonzero_coeff;$/;"	m	struct:__anon33	access:public
__anon33::mixed_block_flag	l3side.h	/^    int     mixed_block_flag;$/;"	m	struct:__anon33	access:public
__anon33::part2_3_length	l3side.h	/^    int     part2_3_length;$/;"	m	struct:__anon33	access:public
__anon33::part2_length	l3side.h	/^    int     part2_length;$/;"	m	struct:__anon33	access:public
__anon33::preflag	l3side.h	/^    int     preflag;$/;"	m	struct:__anon33	access:public
__anon33::psy_lmax	l3side.h	/^    int     psy_lmax;$/;"	m	struct:__anon33	access:public
__anon33::psymax	l3side.h	/^    int     psymax;$/;"	m	struct:__anon33	access:public
__anon33::region0_count	l3side.h	/^    int     region0_count;$/;"	m	struct:__anon33	access:public
__anon33::region1_count	l3side.h	/^    int     region1_count;$/;"	m	struct:__anon33	access:public
__anon33::scalefac	l3side.h	/^    int     scalefac[SFBMAX];$/;"	m	struct:__anon33	access:public
__anon33::scalefac_compress	l3side.h	/^    int     scalefac_compress;$/;"	m	struct:__anon33	access:public
__anon33::scalefac_scale	l3side.h	/^    int     scalefac_scale;$/;"	m	struct:__anon33	access:public
__anon33::sfb_lmax	l3side.h	/^    int     sfb_lmax;$/;"	m	struct:__anon33	access:public
__anon33::sfb_partition_table	l3side.h	/^    const int *sfb_partition_table;$/;"	m	struct:__anon33	access:public
__anon33::sfb_smin	l3side.h	/^    int     sfb_smin;$/;"	m	struct:__anon33	access:public
__anon33::sfbdivide	l3side.h	/^    int     sfbdivide;$/;"	m	struct:__anon33	access:public
__anon33::sfbmax	l3side.h	/^    int     sfbmax;$/;"	m	struct:__anon33	access:public
__anon33::slen	l3side.h	/^    int     slen[4];$/;"	m	struct:__anon33	access:public
__anon33::subblock_gain	l3side.h	/^    int     subblock_gain[3 + 1];$/;"	m	struct:__anon33	access:public
__anon33::table_select	l3side.h	/^    int     table_select[3];$/;"	m	struct:__anon33	access:public
__anon33::width	l3side.h	/^    int     width[SFBMAX];$/;"	m	struct:__anon33	access:public
__anon33::window	l3side.h	/^    int     window[SFBMAX];$/;"	m	struct:__anon33	access:public
__anon33::xr	l3side.h	/^    FLOAT   xr[576];$/;"	m	struct:__anon33	access:public
__anon33::xrpow_max	l3side.h	/^    FLOAT   xrpow_max;$/;"	m	struct:__anon33	access:public
__anon34::main_data_begin	l3side.h	/^    int     main_data_begin;$/;"	m	struct:__anon34	access:public
__anon34::private_bits	l3side.h	/^    int     private_bits;$/;"	m	struct:__anon34	access:public
__anon34::resvDrain_post	l3side.h	/^    int     resvDrain_post;$/;"	m	struct:__anon34	access:public
__anon34::resvDrain_pre	l3side.h	/^    int     resvDrain_pre;$/;"	m	struct:__anon34	access:public
__anon34::scfsi	l3side.h	/^    int     scfsi[2][4];$/;"	m	struct:__anon34	access:public
__anon34::tt	l3side.h	/^    gr_info tt[2][2];$/;"	m	struct:__anon34	access:public
__anon35::region0_count	takehiro.c	/^    const int region0_count;$/;"	m	struct:__anon35	file:	access:public
__anon35::region1_count	takehiro.c	/^    const int region1_count;$/;"	m	struct:__anon35	file:	access:public
__anon36::f	takehiro.c	/^    float   f;$/;"	m	union:__anon36	file:	access:public
__anon36::i	takehiro.c	/^    int     i;$/;"	m	union:__anon36	file:	access:public
__anon37::f	vbrquantize.c	/^    float   f;$/;"	m	union:__anon37	file:	access:public
__anon37::i	vbrquantize.c	/^    int     i;$/;"	m	union:__anon37	file:	access:public
__anon3::aa_sensitivity_p	util.h	/^        FLOAT   aa_sensitivity_p; \/* factor for tuning the (sample power)$/;"	m	struct:__anon3	access:public
__anon3::adjust_factor	util.h	/^        FLOAT   adjust_factor; \/* lowering based on peak volume, 1 = no lowering *\/$/;"	m	struct:__anon3	access:public
__anon3::adjust_limit	util.h	/^        FLOAT   adjust_limit; \/* limit for dynamic ATH adjust *\/$/;"	m	struct:__anon3	access:public
__anon3::cb_l	util.h	/^        FLOAT   cb_l[CBANDS]; \/* ATH for long block convolution bands *\/$/;"	m	struct:__anon3	access:public
__anon3::cb_s	util.h	/^        FLOAT   cb_s[CBANDS]; \/* ATH for short block convolution bands *\/$/;"	m	struct:__anon3	access:public
__anon3::decay	util.h	/^        FLOAT   decay;       \/* determined to lower x dB each second *\/$/;"	m	struct:__anon3	access:public
__anon3::eql_w	util.h	/^        FLOAT   eql_w[BLKSIZE \/ 2]; \/* equal loudness weights (based on ATH) *\/$/;"	m	struct:__anon3	access:public
__anon3::floor	util.h	/^        FLOAT   floor;       \/* lowest ATH value *\/$/;"	m	struct:__anon3	access:public
__anon3::l	util.h	/^        FLOAT   l[SBMAX_l];  \/* ATH for sfbs in long blocks *\/$/;"	m	struct:__anon3	access:public
__anon3::psfb12	util.h	/^        FLOAT   psfb12[PSFB12]; \/* ATH for partitionned sfb12 in short blocks *\/$/;"	m	struct:__anon3	access:public
__anon3::psfb21	util.h	/^        FLOAT   psfb21[PSFB21]; \/* ATH for partitionned sfb21 in long blocks *\/$/;"	m	struct:__anon3	access:public
__anon3::s	util.h	/^        FLOAT   s[SBMAX_s];  \/* ATH for sfbs in short blocks *\/$/;"	m	struct:__anon3	access:public
__anon3::use_adjust	util.h	/^        int     use_adjust;  \/* method for the auto adjustment  *\/$/;"	m	struct:__anon3	access:public
__anon4::attack_threshold	util.h	/^        FLOAT   attack_threshold; \/* short block tuning *\/$/;"	m	struct:__anon4	access:public
__anon4::bm	util.h	/^        int     bm[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
__anon4::bo	util.h	/^        int     bo[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
__anon4::bo_weight	util.h	/^        FLOAT   bo_weight[Max(SBMAX_l,SBMAX_s)]; \/* band weight long scalefactor bands, at transition *\/$/;"	m	struct:__anon4	access:public
__anon4::masking_lower	util.h	/^        FLOAT   masking_lower[CBANDS];$/;"	m	struct:__anon4	access:public
__anon4::minval	util.h	/^        FLOAT   minval[CBANDS];$/;"	m	struct:__anon4	access:public
__anon4::mld	util.h	/^        FLOAT   mld[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
__anon4::mld_cb	util.h	/^        FLOAT   mld_cb[CBANDS];$/;"	m	struct:__anon4	access:public
__anon4::n_sb	util.h	/^        int     n_sb; \/* SBMAX_l or SBMAX_s *\/$/;"	m	struct:__anon4	access:public
__anon4::npart	util.h	/^        int     npart;$/;"	m	struct:__anon4	access:public
__anon4::numlines	util.h	/^        int     numlines[CBANDS];$/;"	m	struct:__anon4	access:public
__anon4::rnumlines	util.h	/^        FLOAT   rnumlines[CBANDS];$/;"	m	struct:__anon4	access:public
__anon4::s3	util.h	/^        FLOAT  *s3;$/;"	m	struct:__anon4	access:public
__anon4::s3ind	util.h	/^        int     s3ind[CBANDS][2];$/;"	m	struct:__anon4	access:public
__anon5::attack_threshold	util.h	/^        FLOAT   attack_threshold[4];$/;"	m	struct:__anon5	access:public
__anon5::decay	util.h	/^        FLOAT   decay;$/;"	m	struct:__anon5	access:public
__anon5::force_short_block_calc	util.h	/^        int     force_short_block_calc;$/;"	m	struct:__anon5	access:public
__anon5::l	util.h	/^        PsyConst_CB2SB_t l;$/;"	m	struct:__anon5	access:public
__anon5::l_to_s	util.h	/^        PsyConst_CB2SB_t l_to_s;$/;"	m	struct:__anon5	access:public
__anon5::s	util.h	/^        PsyConst_CB2SB_t s;$/;"	m	struct:__anon5	access:public
__anon6::blocktype_old	util.h	/^        int     blocktype_old[2];$/;"	m	struct:__anon6	access:public
__anon6::en	util.h	/^        III_psy_xmin en[4];$/;"	m	struct:__anon6	access:public
__anon6::last_attacks	util.h	/^        int     last_attacks[4];$/;"	m	struct:__anon6	access:public
__anon6::last_en_subshort	util.h	/^        FLOAT   last_en_subshort[4][9];$/;"	m	struct:__anon6	access:public
__anon6::loudness_sq_save	util.h	/^        FLOAT   loudness_sq_save[2]; \/* account for granule delay of L3psycho_anal *\/$/;"	m	struct:__anon6	access:public
__anon6::nb_l1	util.h	/^        FLOAT   nb_l1[4][CBANDS], nb_l2[4][CBANDS];$/;"	m	struct:__anon6	access:public
__anon6::nb_l2	util.h	/^        FLOAT   nb_l1[4][CBANDS], nb_l2[4][CBANDS];$/;"	m	struct:__anon6	access:public
__anon6::nb_s1	util.h	/^        FLOAT   nb_s1[4][CBANDS], nb_s2[4][CBANDS];$/;"	m	struct:__anon6	access:public
__anon6::nb_s2	util.h	/^        FLOAT   nb_s1[4][CBANDS], nb_s2[4][CBANDS];$/;"	m	struct:__anon6	access:public
__anon6::thm	util.h	/^        III_psy_xmin thm[4];$/;"	m	struct:__anon6	access:public
__anon6::tot_ener	util.h	/^        FLOAT   tot_ener[4];$/;"	m	struct:__anon6	access:public
__anon7::loudness_sq	util.h	/^        FLOAT   loudness_sq[2][2]; \/* loudness^2 approx. per granule and channel *\/$/;"	m	struct:__anon7	access:public
__anon8::ResvMax	util.h	/^        int     ResvMax;     \/* in bits *\/$/;"	m	struct:__anon8	access:public
__anon8::ResvSize	util.h	/^        int     ResvSize;    \/* in bits *\/$/;"	m	struct:__anon8	access:public
__anon8::__anon9::buf	util.h	/^            char    buf[MAX_HEADER_LEN];$/;"	m	struct:__anon8::__anon9	access:public
__anon8::__anon9::ptr	util.h	/^            int     ptr;$/;"	m	struct:__anon8::__anon9	access:public
__anon8::__anon9::write_timing	util.h	/^            int     write_timing;$/;"	m	struct:__anon8::__anon9	access:public
__anon8::amp_filter	util.h	/^        FLOAT   amp_filter[32];$/;"	m	struct:__anon8	access:public
__anon8::ancillary_flag	util.h	/^        int     ancillary_flag;$/;"	m	struct:__anon8	access:public
__anon8::blackfilt	util.h	/^        sample_t *blackfilt[2 * BPC + 1];$/;"	m	struct:__anon8	access:public
__anon8::frac_SpF	util.h	/^        int     frac_SpF;$/;"	m	struct:__anon8	access:public
__anon8::h_ptr	util.h	/^        int     h_ptr;$/;"	m	struct:__anon8	access:public
__anon8::header	util.h	/^        } header[MAX_HEADER_BUF];$/;"	m	struct:__anon8	typeref:struct:__anon8::__anon9	access:public
__anon8::in_buffer_0	util.h	/^        sample_t *in_buffer_0;$/;"	m	struct:__anon8	access:public
__anon8::in_buffer_1	util.h	/^        sample_t *in_buffer_1;$/;"	m	struct:__anon8	access:public
__anon8::in_buffer_nsamples	util.h	/^        int     in_buffer_nsamples;$/;"	m	struct:__anon8	access:public
__anon8::inbuf_old	util.h	/^        sample_t *inbuf_old[2];$/;"	m	struct:__anon8	access:public
__anon8::itime	util.h	/^        double  itime[2]; \/* float precision seems to be not enough *\/$/;"	m	struct:__anon8	access:public
__anon8::mf_samples_to_encode	util.h	/^        int     mf_samples_to_encode;$/;"	m	struct:__anon8	access:public
__anon8::mf_size	util.h	/^        int     mf_size;$/;"	m	struct:__anon8	access:public
__anon8::mfbuf	util.h	/^        sample_t mfbuf[2][MFSIZE];$/;"	m	struct:__anon8	access:public
__anon8::pefirbuf	util.h	/^        FLOAT   pefirbuf[19];$/;"	m	struct:__anon8	access:public
__anon8::sb_sample	util.h	/^        FLOAT   sb_sample[2][2][18][SBLIMIT];$/;"	m	struct:__anon8	access:public
__anon8::slot_lag	util.h	/^        int     slot_lag;$/;"	m	struct:__anon8	access:public
__anon8::w_ptr	util.h	/^        int     w_ptr;$/;"	m	struct:__anon8	access:public
_float	vector/xmm_quantize_sub.c	/^    float   _float[4];$/;"	m	union:__anon23	file:	access:public
_i_32	vector/xmm_quantize_sub.c	/^    int32_t _i_32[4]; \/* unions are initialized by its first member *\/$/;"	m	union:__anon23	file:	access:public
_m128	vector/xmm_quantize_sub.c	/^    __m128  _m128;$/;"	m	union:__anon23	file:	access:public
_unused	util.h	/^            unsigned int _unused:28;$/;"	m	struct:lame_internal_flags::__anon15	access:public
_unused	util.h	/^        uint16_t _unused;$/;"	m	struct:lame_internal_flags	access:public
a	i386/nasm.h	/^%idefine dwsizen(a) (dwsize*(a))$/;"	p	signature:(dwsize*(a))
a	i386/nasm.h	/^%idefine fsizen(a) (fsize*(a))$/;"	p	signature:(fsize*(a))
aa_sensitivity_p	util.h	/^        FLOAT   aa_sensitivity_p; \/* factor for tuning the (sample power)$/;"	m	struct:__anon3	access:public
addVbr	VbrTag.c	/^addVbr(VBR_seek_info_t * v, int bitrate)$/;"	f	file:	signature:(VBR_seek_info_t * v, int bitrate)
add_dummy_byte	bitstream.c	/^add_dummy_byte(lame_internal_flags * gfc, unsigned char val, unsigned int n)$/;"	f	signature:(lame_internal_flags * gfc, unsigned char val, unsigned int n)
add_dummy_byte	bitstream.h	/^void    add_dummy_byte(lame_internal_flags * gfc, unsigned char val, unsigned int n);$/;"	p	signature:(lame_internal_flags * gfc, unsigned char val, unsigned int n)
adj43	quantize_pvt.c	/^FLOAT   adj43[PRECALC_SIZE];$/;"	v
adj43asm	quantize_pvt.c	/^FLOAT   adj43asm[PRECALC_SIZE];$/;"	v
adjust_ATH	encoder.c	/^adjust_ATH(lame_internal_flags const *const gfc)$/;"	f	file:	signature:(lame_internal_flags const *const gfc)
adjust_alto_db	util.h	/^        float   adjust_alto_db;$/;"	m	struct:__anon14	access:public
adjust_bass_db	util.h	/^        float   adjust_bass_db;$/;"	m	struct:__anon14	access:public
adjust_factor	util.h	/^        FLOAT   adjust_factor; \/* lowering based on peak volume, 1 = no lowering *\/$/;"	m	struct:__anon3	access:public
adjust_limit	util.h	/^        FLOAT   adjust_limit; \/* limit for dynamic ATH adjust *\/$/;"	m	struct:__anon3	access:public
adjust_sfb21_db	util.h	/^        float   adjust_sfb21_db;$/;"	m	struct:__anon14	access:public
adjust_treble_db	util.h	/^        float   adjust_treble_db;$/;"	m	struct:__anon14	access:public
album	id3tag.h	/^    char   *album;$/;"	m	struct:id3tag_spec	access:public
albumart	id3tag.h	/^    unsigned char *albumart;$/;"	m	struct:id3tag_spec	access:public
albumart_mimetype	id3tag.h	/^    int     albumart_mimetype;$/;"	m	struct:id3tag_spec	access:public
albumart_size	id3tag.h	/^    unsigned int albumart_size;$/;"	m	struct:id3tag_spec	access:public
algo_s	vbrquantize.c	/^struct algo_s {$/;"	s	file:
algo_s::alloc	vbrquantize.c	/^    alloc_sf_f alloc;$/;"	m	struct:algo_s	file:	access:public
algo_s::cod_info	vbrquantize.c	/^    gr_info *cod_info;$/;"	m	struct:algo_s	file:	access:public
algo_s::find	vbrquantize.c	/^    find_sf_f  find;$/;"	m	struct:algo_s	file:	access:public
algo_s::gfc	vbrquantize.c	/^    lame_internal_flags *gfc;$/;"	m	struct:algo_s	file:	access:public
algo_s::mingain_l	vbrquantize.c	/^    int     mingain_l;$/;"	m	struct:algo_s	file:	access:public
algo_s::mingain_s	vbrquantize.c	/^    int     mingain_s[3];$/;"	m	struct:algo_s	file:	access:public
algo_s::xr34orig	vbrquantize.c	/^    const FLOAT *xr34orig;$/;"	m	struct:algo_s	file:	access:public
algo_t	vbrquantize.c	/^typedef struct algo_s algo_t;$/;"	t	typeref:struct:algo_s	file:
aligned	util.h	/^        void   *aligned;     \/* pointer to ie. 128 bit aligned memory *\/$/;"	m	struct:__anon1	access:public
aligned_pointer_t	util.h	/^    } aligned_pointer_t;$/;"	t	typeref:struct:__anon1
alignment	i386/nasm.h	/^; %1   does not align if it LE bytes to next alignment $/;"	v
all_scalefactors_not_negative	takehiro.c	/^all_scalefactors_not_negative(int const *scalefac, int n)$/;"	f	file:	signature:(int const *scalefac, int n)
alloc	vbrquantize.c	/^    alloc_sf_f alloc;$/;"	m	struct:algo_s	file:	access:public
alloc_sf_f	vbrquantize.c	/^typedef void (*alloc_sf_f) (const algo_t *, const int *, const int *, int);$/;"	t	file:
alpha	lame.h	/^    int alpha;               \/* 0 if not an alpha version                  *\/$/;"	m	struct:__anon19	access:public
amd3dnow	lame_global_flags.h	/^        int     amd3dnow;$/;"	m	struct:lame_global_struct::__anon26	access:public
amp_filter	util.h	/^        FLOAT   amp_filter[32];$/;"	m	struct:__anon8	access:public
amp_scalefac_bands	quantize.c	/^amp_scalefac_bands(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info * const cod_info, FLOAT const *distort, FLOAT xrpow[576], int bRefine)
analysis	lame_global_flags.h	/^    int     analysis;        \/* collect data for a MP3 frame analyzer?      *\/$/;"	m	struct:lame_global_struct	access:public
analysis	util.h	/^        int     analysis;$/;"	m	struct:__anon14	access:public
analyzeResult	gain_analysis.c	/^analyzeResult(uint32_t const *Array, size_t len)$/;"	f	file:	signature:(uint32_t const *Array, size_t len)
ancillary_flag	util.h	/^        int     ancillary_flag;$/;"	m	struct:__anon8	access:public
appendNode	id3tag.c	/^appendNode(id3tag_spec * tag, FrameDataNode * node)$/;"	f	file:	signature:(id3tag_spec * tag, FrameDataNode * node)
apply_abr_preset	presets.c	/^apply_abr_preset(lame_global_flags * gfp, int preset, int enforce)$/;"	f	file:	signature:(lame_global_flags * gfp, int preset, int enforce)
apply_preset	presets.c	/^apply_preset(lame_global_flags * gfp, int preset, int enforce)$/;"	f	signature:(lame_global_flags * gfp, int preset, int enforce)
apply_preset	set_get.h	/^    int     apply_preset(lame_global_flags *, int preset, int enforce);$/;"	p	signature:(lame_global_flags *, int preset, int enforce)
apply_vbr_preset	presets.c	/^apply_vbr_preset(lame_global_flags * gfp, int a, int enforce)$/;"	f	file:	signature:(lame_global_flags * gfp, int a, int enforce)
artist	id3tag.h	/^    char   *artist;$/;"	m	struct:id3tag_spec	access:public
asm_optimizations	lame.h	/^} asm_optimizations;$/;"	t	typeref:enum:asm_optimizations_e
asm_optimizations	lame_global_flags.h	/^    } asm_optimizations;$/;"	m	struct:lame_global_struct	typeref:struct:lame_global_struct::__anon26	access:public
asm_optimizations_e	lame.h	/^typedef enum asm_optimizations_e {$/;"	g
athAdjust	quantize_pvt.c	/^athAdjust(FLOAT a, FLOAT x, FLOAT athFloor, float ATHfixpoint)$/;"	f	signature:(FLOAT a, FLOAT x, FLOAT athFloor, float ATHfixpoint)
athAdjust	quantize_pvt.h	/^FLOAT   athAdjust(FLOAT a, FLOAT x, FLOAT athFloor, float ATHfixpoint);$/;"	p	signature:(FLOAT a, FLOAT x, FLOAT athFloor, float ATHfixpoint)
ath_curve	presets.c	/^    FLOAT   ath_curve;$/;"	m	struct:__anon24	file:	access:public
ath_fixpoint	presets.c	/^    FLOAT   ath_fixpoint;$/;"	m	struct:__anon24	file:	access:public
ath_lower	presets.c	/^    FLOAT   ath_lower;$/;"	m	struct:__anon24	file:	access:public
ath_sensitivity	presets.c	/^    FLOAT   ath_sensitivity;$/;"	m	struct:__anon24	file:	access:public
athaa_sensitivity	lame_global_flags.h	/^    float   athaa_sensitivity; \/* dB, tune active region of auto-level *\/$/;"	m	struct:lame_global_struct	access:public
athaa_type	lame_global_flags.h	/^    int     athaa_type;      \/* select ATH auto-adjust scheme        *\/$/;"	m	struct:lame_global_struct	access:public
attack_threshold	util.h	/^        FLOAT   attack_threshold; \/* short block tuning *\/$/;"	m	struct:__anon4	access:public
attack_threshold	util.h	/^        FLOAT   attack_threshold[4];$/;"	m	struct:__anon5	access:public
attackthre	lame_global_flags.h	/^    float   attackthre;      \/* attack threshold for L\/R\/M channel *\/$/;"	m	struct:lame_global_struct	access:public
attackthre_s	lame_global_flags.h	/^    float   attackthre_s;    \/* attack threshold for S channel *\/$/;"	m	struct:lame_global_struct	access:public
avg_bitrate	util.h	/^        int     avg_bitrate;$/;"	m	struct:__anon14	access:public
b	id3tag.h	/^            unsigned char *b; \/* ptr to raw bytes                 *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
bag	util.h	/^        int    *bag;         \/* pointer to our bag *\/$/;"	m	struct:__anon2	access:public
balance_noise	quantize.c	/^balance_noise(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info * const cod_info, FLOAT const *distort, FLOAT xrpow[576], int bRefine)
best_huffman_divide	quantize_pvt.h	/^void    best_huffman_divide(const lame_internal_flags * const gfc, gr_info * const cod_info);$/;"	p	signature:(const lame_internal_flags * const gfc, gr_info * const cod_info)
best_huffman_divide	takehiro.c	/^best_huffman_divide(const lame_internal_flags * const gfc, gr_info * const gi)$/;"	f	signature:(const lame_internal_flags * const gfc, gr_info * const gi)
best_scalefac_store	quantize_pvt.h	/^void    best_scalefac_store(const lame_internal_flags * gfc, const int gr, const int ch,$/;"	p	signature:(const lame_internal_flags * gfc, const int gr, const int ch, III_side_info_t * const l3_side)
best_scalefac_store	takehiro.c	/^best_scalefac_store(const lame_internal_flags * gfc,$/;"	f	signature:(const lame_internal_flags * gfc, const int gr, const int ch, III_side_info_t * const l3_side)
beta	lame.h	/^    int beta;                \/* 0 if not a beta version                    *\/$/;"	m	struct:__anon19	access:public
beyond	machine.h	163;"	d
big_values	l3side.h	/^    int     big_values;$/;"	m	struct:__anon33	access:public
big_values	lame-analysis.h	/^    int     big_values[2][2];$/;"	m	struct:plotting_data	access:public
bin_search_StepSize	quantize.c	/^bin_search_StepSize(lame_internal_flags * const gfc, gr_info * const cod_info,$/;"	f	file:	signature:(lame_internal_flags * const gfc, gr_info * const cod_info, int desired_rate, const int ch, const FLOAT xrpow[576])
binsearchDirection_t	quantize.c	/^} binsearchDirection_t;$/;"	t	typeref:enum:__anon27	file:
bit_stream_struc	util.h	/^    typedef struct bit_stream_struc {$/;"	s
bit_stream_struc::buf	util.h	/^        unsigned char *buf;  \/* bit stream buffer *\/$/;"	m	struct:bit_stream_struc	access:public
bit_stream_struc::buf_bit_idx	util.h	/^        int     buf_bit_idx; \/* pointer to top bit of top byte in buffer *\/$/;"	m	struct:bit_stream_struc	access:public
bit_stream_struc::buf_byte_idx	util.h	/^        int     buf_byte_idx; \/* pointer to top byte in buffer *\/$/;"	m	struct:bit_stream_struc	access:public
bit_stream_struc::buf_size	util.h	/^        int     buf_size;    \/* size of buffer (in number of bytes) *\/$/;"	m	struct:bit_stream_struc	access:public
bit_stream_struc::totbit	util.h	/^        int     totbit;      \/* bit counter of bit stream *\/$/;"	m	struct:bit_stream_struc	access:public
bitcount	vbrquantize.c	/^bitcount(const algo_t * that)$/;"	f	file:	signature:(const algo_t * that)
bitpressure_strategy	quantize.c	/^bitpressure_strategy(lame_internal_flags const *gfc,$/;"	f	file:	signature:(lame_internal_flags const *gfc, FLOAT l3_xmin[2][2][SFBMAX], const int min_bits[2][2], int max_bits[2][2])
bitrate	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
bitrate	lame.h	/^  int bitrate;         \/* bitrate                                        *\/$/;"	m	struct:__anon20	access:public
bitrate_blocktype_hist	util.h	/^        int     bitrate_blocktype_hist[16][4 + 1 + 1]; \/*norm\/start\/short\/stop\/mixed(short)\/sum *\/$/;"	m	struct:__anon10	access:public
bitrate_channelmode_hist	util.h	/^        int     bitrate_channelmode_hist[16][4 + 1];$/;"	m	struct:__anon10	access:public
bitrate_index	util.h	/^        int     bitrate_index;$/;"	m	struct:__anon10	access:public
bitrate_table	tables.c	/^const int bitrate_table[3][16] = {$/;"	v
bits	quantize_pvt.h	/^    int     bits;$/;"	m	struct:calc_noise_result_t	access:public
blackfilt	util.h	/^        sample_t *blackfilt[2 * BPC + 1];$/;"	m	struct:__anon8	access:public
blackman	util.c	/^blackman(FLOAT x, FLOAT fcn, int l)$/;"	f	file:	signature:(FLOAT x, FLOAT fcn, int l)
block_sf	vbrquantize.c	/^block_sf(algo_t * that, const FLOAT l3_xmin[SFBMAX], int vbrsf[SFBMAX], int vbrsfmin[SFBMAX])$/;"	f	file:	signature:(algo_t * that, const FLOAT l3_xmin[SFBMAX], int vbrsf[SFBMAX], int vbrsfmin[SFBMAX])
block_type	l3side.h	/^    int     block_type;$/;"	m	struct:__anon33	access:public
blocktype	lame-analysis.h	/^    int     blocktype[2][2];$/;"	m	struct:plotting_data	access:public
blocktype_old	util.h	/^        int     blocktype_old[2];$/;"	m	struct:__anon6	access:public
bm	util.h	/^        int     bm[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
bo	util.h	/^        int     bo[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
bo_weight	util.h	/^        FLOAT   bo_weight[Max(SBMAX_l,SBMAX_s)]; \/* band weight long scalefactor bands, at transition *\/$/;"	m	struct:__anon4	access:public
brate	lame_global_flags.h	/^    int     brate;           \/* bitrate                                    *\/$/;"	m	struct:lame_global_struct	access:public
bs	util.h	/^        Bit_stream_struc bs;$/;"	m	struct:lame_internal_flags	access:public
buf	util.h	/^            char    buf[MAX_HEADER_LEN];$/;"	m	struct:__anon8::__anon9	access:public
buf	util.h	/^        unsigned char *buf;  \/* bit stream buffer *\/$/;"	m	struct:bit_stream_struc	access:public
buf_bit_idx	util.h	/^        int     buf_bit_idx; \/* pointer to top bit of top byte in buffer *\/$/;"	m	struct:bit_stream_struc	access:public
buf_byte_idx	util.h	/^        int     buf_byte_idx; \/* pointer to top byte in buffer *\/$/;"	m	struct:bit_stream_struc	access:public
buf_size	util.h	/^        int     buf_size;    \/* size of buffer (in number of bytes) *\/$/;"	m	struct:bit_stream_struc	access:public
buffer_constraint	lame.h	/^} buffer_constraint;$/;"	t	typeref:enum:buffer_constraint_e
buffer_constraint	util.h	/^        int     buffer_constraint;  \/* enforce ISO spec as much as possible   *\/$/;"	m	struct:__anon14	access:public
buffer_constraint_e	lame.h	/^typedef enum buffer_constraint_e {$/;"	g
bv_scf	util.h	/^        char    bv_scf[576];$/;"	m	struct:__anon11	access:public
bytes	VbrTag.h	/^    int     bytes;           \/* total bit stream bytes from Vbr header data *\/$/;"	m	struct:__anon29	access:public
ca	newmdct.c	403;"	d	file:
calcFrameLength	bitstream.c	/^calcFrameLength(SessionConfig_t const *const cfg, int kbps, int pad)$/;"	f	file:	signature:(SessionConfig_t const *const cfg, int kbps, int pad)
calcNeeded	lame.c	/^calcNeeded(SessionConfig_t const * cfg)$/;"	f	file:	signature:(SessionConfig_t const * cfg)
calc_energy	psymodel.c	/^calc_energy(PsyConst_CB2SB_t const *l, FLOAT const *fftenergy, FLOAT * eb, FLOAT * max, FLOAT * avg)$/;"	f	file:	signature:(PsyConst_CB2SB_t const *l, FLOAT const *fftenergy, FLOAT * eb, FLOAT * max, FLOAT * avg)
calc_mask_index_l	psymodel.c	/^calc_mask_index_l(lame_internal_flags const *gfc, FLOAT const *max,$/;"	f	file:	signature:(lame_internal_flags const *gfc, FLOAT const *max, FLOAT const *avg, unsigned char *mask_idx)
calc_noise	quantize_pvt.c	/^calc_noise(gr_info const *const cod_info,$/;"	f	signature:(gr_info const *const cod_info, FLOAT const *l3_xmin, FLOAT * distort, calc_noise_result * const res, calc_noise_data * prev_noise)
calc_noise	quantize_pvt.h	/^int     calc_noise(const gr_info * const cod_info,$/;"	p	signature:(const gr_info * const cod_info, const FLOAT * l3_xmin, FLOAT * distort, calc_noise_result * const res, calc_noise_data * prev_noise)
calc_noise_cache	vbrquantize.c	/^struct calc_noise_cache {$/;"	s	file:
calc_noise_cache::valid	vbrquantize.c	/^    int     valid;$/;"	m	struct:calc_noise_cache	file:	access:public
calc_noise_cache::value	vbrquantize.c	/^    FLOAT   value;$/;"	m	struct:calc_noise_cache	file:	access:public
calc_noise_cache_t	vbrquantize.c	/^typedef struct calc_noise_cache calc_noise_cache_t;$/;"	t	typeref:struct:calc_noise_cache	file:
calc_noise_core_c	quantize_pvt.c	/^calc_noise_core_c(const gr_info * const cod_info, int *startline, int l, FLOAT step)$/;"	f	file:	signature:(const gr_info * const cod_info, int *startline, int l, FLOAT step)
calc_noise_data	quantize_pvt.h	/^} calc_noise_data;$/;"	t	typeref:struct:calc_noise_data_t
calc_noise_data_t	quantize_pvt.h	/^typedef struct calc_noise_data_t {$/;"	s
calc_noise_data_t::global_gain	quantize_pvt.h	/^    int     global_gain;$/;"	m	struct:calc_noise_data_t	access:public
calc_noise_data_t::noise	quantize_pvt.h	/^    FLOAT   noise[39];$/;"	m	struct:calc_noise_data_t	access:public
calc_noise_data_t::noise_log	quantize_pvt.h	/^    FLOAT   noise_log[39];$/;"	m	struct:calc_noise_data_t	access:public
calc_noise_data_t::sfb_count1	quantize_pvt.h	/^    int     sfb_count1;$/;"	m	struct:calc_noise_data_t	access:public
calc_noise_data_t::step	quantize_pvt.h	/^    int     step[39];$/;"	m	struct:calc_noise_data_t	access:public
calc_noise_result	quantize_pvt.h	/^} calc_noise_result;$/;"	t	typeref:struct:calc_noise_result_t
calc_noise_result_t	quantize_pvt.h	/^typedef struct calc_noise_result_t {$/;"	s
calc_noise_result_t::bits	quantize_pvt.h	/^    int     bits;$/;"	m	struct:calc_noise_result_t	access:public
calc_noise_result_t::max_noise	quantize_pvt.h	/^    FLOAT   max_noise;       \/* max quantization noise *\/$/;"	m	struct:calc_noise_result_t	access:public
calc_noise_result_t::over_SSD	quantize_pvt.h	/^    int     over_SSD;        \/* SSD-like cost of distorted bands *\/$/;"	m	struct:calc_noise_result_t	access:public
calc_noise_result_t::over_count	quantize_pvt.h	/^    int     over_count;      \/* number of quantization noise > masking *\/$/;"	m	struct:calc_noise_result_t	access:public
calc_noise_result_t::over_noise	quantize_pvt.h	/^    FLOAT   over_noise;      \/* sum of quantization noise > masking *\/$/;"	m	struct:calc_noise_result_t	access:public
calc_noise_result_t::tot_noise	quantize_pvt.h	/^    FLOAT   tot_noise;       \/* sum of all quantization noise *\/$/;"	m	struct:calc_noise_result_t	access:public
calc_scalefac	vbrquantize.c	/^calc_scalefac(FLOAT l3_xmin, int bw)$/;"	f	file:	signature:(FLOAT l3_xmin, int bw)
calc_sfb_noise_x34	vbrquantize.c	/^calc_sfb_noise_x34(const FLOAT * xr, const FLOAT * xr34, unsigned int bw, uint8_t sf)$/;"	f	file:	signature:(const FLOAT * xr, const FLOAT * xr34, unsigned int bw, uint8_t sf)
calc_target_bits	quantize.c	/^calc_target_bits(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], FLOAT const ms_ener_ratio[2], int targ_bits[2][2], int *analog_silence_bits, int *max_frame_bits)
calc_xmin	quantize_pvt.c	/^calc_xmin(lame_internal_flags const *gfc,$/;"	f	signature:(lame_internal_flags const *gfc, III_psy_ratio const *const ratio, gr_info * const cod_info, FLOAT * pxmin)
calc_xmin	quantize_pvt.h	/^int     calc_xmin(lame_internal_flags const *gfc,$/;"	p	signature:(lame_internal_flags const *gfc, III_psy_ratio const *const ratio, gr_info * const cod_info, FLOAT * l3_xmin)
cb_l	util.h	/^        FLOAT   cb_l[CBANDS]; \/* ATH for long block convolution bands *\/$/;"	m	struct:__anon3	access:public
cb_s	util.h	/^        FLOAT   cb_s[CBANDS]; \/* ATH for short block convolution bands *\/$/;"	m	struct:__anon3	access:public
cd_psy	util.h	/^        PsyConst_t *cd_psy;$/;"	m	struct:lame_internal_flags	access:public
cfg	util.h	/^        SessionConfig_t cfg;$/;"	m	struct:lame_internal_flags	access:public
ch01	fft.c	170;"	d	file:
channels_in	util.h	/^        int     channels_in; \/* number of channels in the input data stream (PCM or decoded PCM) *\/$/;"	m	struct:__anon14	access:public
channels_out	util.h	/^        int     channels_out; \/* number of channels in the output data stream (not used for decoding) *\/$/;"	m	struct:__anon14	access:public
check	i386/nasm.h	/^			%error STACKLEVEL mismatch check 'local', 'alloc', 'pushd', 'popd'$/;"	v
checkScalefactor	vbrquantize.c	/^checkScalefactor(const gr_info * cod_info, const int vbrsfmin[SFBMAX])$/;"	f	file:	signature:(const gr_info * cod_info, const int vbrsfmin[SFBMAX])
chgrdata	encoder.c	/^typedef FLOAT chgrdata[2][2];$/;"	t	file:
choose_table	util.h	/^        int     (*choose_table) (const int *ix, const int *const end, int *const s);$/;"	m	struct:lame_internal_flags	access:public
choose_table_MMX	takehiro.c	/^extern int choose_table_MMX(const int *ix, const int *const end, int *const s);$/;"	p	file:	signature:(const int *ix, const int *const end, int *const s)
choose_table_nonMMX	takehiro.c	/^choose_table_nonMMX(const int *ix, const int *const end, int *const _s)$/;"	f	file:	signature:(const int *ix, const int *const end, int *const _s)
class_id	lame_global_flags.h	/^    unsigned int class_id;$/;"	m	struct:lame_global_struct	access:public
class_id	util.h	/^        unsigned long class_id;$/;"	m	struct:lame_internal_flags	access:public
cod_info	vbrquantize.c	/^    gr_info *cod_info;$/;"	m	struct:algo_s	file:	access:public
comment	id3tag.h	/^    char   *comment;$/;"	m	struct:id3tag_spec	access:public
compiletime_assert	machine.h	164;"	d
compression_ratio	lame_global_flags.h	/^    float   compression_ratio; \/* sizeof(wav file)\/sizeof(mp3 file)          *\/$/;"	m	struct:lame_global_struct	access:public
compression_ratio	util.h	/^        float   compression_ratio; \/* sizeof(wav file)\/sizeof(mp3 file)          *\/$/;"	m	struct:__anon14	access:public
compute_ath	quantize_pvt.c	/^compute_ath(lame_internal_flags const* gfc)$/;"	f	file:	signature:(lame_internal_flags const* gfc)
compute_bark_values	psymodel.c	/^compute_bark_values(PsyConst_CB2SB_t const *gd, FLOAT sfreq, int fft_size,$/;"	f	file:	signature:(PsyConst_CB2SB_t const *gd, FLOAT sfreq, int fft_size, FLOAT * bval, FLOAT * bval_width)
compute_flushbits	bitstream.c	/^compute_flushbits(const lame_internal_flags * gfc, int *total_bytes_output)$/;"	f	signature:(const lame_internal_flags * gfc, int *total_bytes_output)
compute_flushbits	bitstream.h	/^int     compute_flushbits(const lame_internal_flags * gfp, int *nbytes);$/;"	p	signature:(const lame_internal_flags * gfp, int *nbytes)
concatSep	lame.c	/^concatSep(char* dest, char const* sep, char const* str)$/;"	f	file:	signature:(char* dest, char const* sep, char const* str)
convert_partition2scalefac	psymodel.c	/^convert_partition2scalefac(PsyConst_CB2SB_t const *const gd, FLOAT const *eb, FLOAT const *thr,$/;"	f	file:	signature:(PsyConst_CB2SB_t const *const gd, FLOAT const *eb, FLOAT const *thr, FLOAT enn_out[], FLOAT thm_out[])
convert_partition2scalefac_l	psymodel.c	/^convert_partition2scalefac_l(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr, int chn)$/;"	f	file:	signature:(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr, int chn)
convert_partition2scalefac_l_to_s	psymodel.c	/^convert_partition2scalefac_l_to_s(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr,$/;"	f	file:	signature:(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr, int chn)
convert_partition2scalefac_s	psymodel.c	/^convert_partition2scalefac_s(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr, int chn,$/;"	f	file:	signature:(lame_internal_flags * gfc, FLOAT const *eb, FLOAT const *thr, int chn, int sblock)
copyV1ToV2	id3tag.c	/^copyV1ToV2(lame_t gfp, int frame_id, char const *s)$/;"	f	file:	signature:(lame_t gfp, int frame_id, char const *s)
copy_buffer	bitstream.c	/^copy_buffer(lame_internal_flags * gfc, unsigned char *buffer, int size, int mp3data)$/;"	f	signature:(lame_internal_flags * gfc, unsigned char *buffer, int size, int mp3data)
copy_buffer	bitstream.h	/^int     copy_buffer(lame_internal_flags * gfc, unsigned char *buffer, int buffer_size,$/;"	p	signature:(lame_internal_flags * gfc, unsigned char *buffer, int buffer_size, int update_crc)
copyright	lame_global_flags.h	/^    int     copyright;       \/* mark as copyright. default=0           *\/$/;"	m	struct:lame_global_struct	access:public
copyright	util.h	/^        int     copyright;   \/* mark as copyright. default=0           *\/$/;"	m	struct:__anon14	access:public
costab	fft.c	/^static const FLOAT costab[TRI_SIZE * 2] = {$/;"	v	file:
costab	vector/xmm_quantize_sub.c	/^static const FLOAT costab[TRI_SIZE * 2] = {$/;"	v	file:
count1	l3side.h	/^    int     count1;$/;"	m	struct:__anon33	access:public
count1bits	l3side.h	/^    int     count1bits;$/;"	m	struct:__anon33	access:public
count1table_select	l3side.h	/^    int     count1table_select;$/;"	m	struct:__anon33	access:public
count_bit_ESC	takehiro.c	/^count_bit_ESC(const int *ix, const int *const end, int t1, const int t2, unsigned int *const s)$/;"	f	file:	signature:(const int *ix, const int *const end, int t1, const int t2, unsigned int *const s)
count_bit_noESC	takehiro.c	/^count_bit_noESC(const int *ix, const int *end, int mx, unsigned int *s)$/;"	f	file:	signature:(const int *ix, const int *end, int mx, unsigned int *s)
count_bit_noESC_from2	takehiro.c	/^count_bit_noESC_from2(const int *ix, const int *end, int max, unsigned int *s)$/;"	f	file:	signature:(const int *ix, const int *end, int max, unsigned int *s)
count_bit_noESC_from3	takehiro.c	/^count_bit_noESC_from3(const int *ix, const int *end, int max, unsigned int * s)$/;"	f	file:	signature:(const int *ix, const int *end, int max, unsigned int * s)
count_bit_null	takehiro.c	/^static int count_bit_null(const int* ix, const int* end, int max, unsigned int* s)$/;"	f	file:	signature:(const int* ix, const int* end, int max, unsigned int* s)
count_bits	quantize_pvt.h	/^int     count_bits(lame_internal_flags const *const gfc, const FLOAT * const xr,$/;"	p	signature:(lame_internal_flags const *const gfc, const FLOAT * const xr, gr_info * const cod_info, calc_noise_data * prev_noise)
count_bits	takehiro.c	/^count_bits(lame_internal_flags const *const gfc,$/;"	f	signature:(lame_internal_flags const *const gfc, const FLOAT * const xr, gr_info * const gi, calc_noise_data * prev_noise)
count_fnc	takehiro.c	/^typedef int (*count_fnc)(const int* ix, const int* end, int max, unsigned int* s);$/;"	t	file:
count_fncs	takehiro.c	/^static count_fnc count_fncs[] = $/;"	v	file:
crc	lame-analysis.h	/^    int     crc, padding;$/;"	m	struct:plotting_data	access:public
crc16_lookup	VbrTag.c	/^static const unsigned int crc16_lookup[256] = {$/;"	v	file:
cs	newmdct.c	404;"	d	file:
cutDistribution	vbrquantize.c	/^cutDistribution(const int sfwork[SFBMAX], int sf_out[SFBMAX], int cut)$/;"	f	file:	signature:(const int sfwork[SFBMAX], int sf_out[SFBMAX], int cut)
cx	newmdct.c	402;"	d	file:
debugf	lame_global_flags.h	/^        void    (*debugf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
decay	util.h	/^        FLOAT   decay;       \/* determined to lower x dB each second *\/$/;"	m	struct:__anon3	access:public
decay	util.h	/^        FLOAT   decay;$/;"	m	struct:__anon5	access:public
decode1_headersB_clipchoice	mpglib_interface.c	/^decode1_headersB_clipchoice(PMPSTR pmp, unsigned char *buffer, int len,$/;"	f	file:	signature:(PMPSTR pmp, unsigned char *buffer, int len, char pcm_l_raw[], char pcm_r_raw[], mp3data_struct * mp3data, int *enc_delay, int *enc_padding, char *p, size_t psize, int decoded_sample_size, int (*decodeMP3_ptr) (PMPSTR, unsigned char *, int, char *, int, int *))
decode_on_the_fly	lame_global_flags.h	/^    int     decode_on_the_fly; \/* decode on the fly? default=0                *\/$/;"	m	struct:lame_global_struct	access:public
decode_on_the_fly	util.h	/^        int     decode_on_the_fly; \/* decode on the fly? default=0                *\/$/;"	m	struct:__anon14	access:public
decode_only	lame_global_flags.h	/^    int     decode_only;     \/* use lame\/mpglib to convert mp3 to wav       *\/$/;"	m	struct:lame_global_struct	access:public
dim	id3tag.h	/^        size_t  dim;$/;"	m	struct:FrameDataNode::__anon17	access:public
dimension_of	machine.h	162;"	d
disable_FPE	util.c	/^disable_FPE(void)$/;"	f	signature:(void)
disable_FPE	util.h	/^    void    disable_FPE(void);$/;"	p	signature:(void)
disable_reservoir	lame_global_flags.h	/^    int     disable_reservoir; \/* use bit reservoir?                     *\/$/;"	m	struct:lame_global_struct	access:public
disable_reservoir	util.h	/^        int     disable_reservoir;$/;"	m	struct:__anon14	access:public
do_copy_buffer	bitstream.c	/^do_copy_buffer(lame_internal_flags * gfc, unsigned char *buffer, int size)$/;"	f	file:	signature:(lame_internal_flags * gfc, unsigned char *buffer, int size)
do_gain_analysis	bitstream.c	/^do_gain_analysis(lame_internal_flags * gfc, unsigned char* buffer, int minimum)$/;"	f	file:	signature:(lame_internal_flags * gfc, unsigned char* buffer, int minimum)
drain_into_ancillary	bitstream.c	/^drain_into_ancillary(lame_internal_flags * gfc, int remainingBits)$/;"	f	file:	signature:(lame_internal_flags * gfc, int remainingBits)
dsc	id3tag.h	/^    } dsc  , txt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::__anon17	access:public
emph	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
emphasis	lame_global_flags.h	/^    int     emphasis;        \/* Input PCM is emphased PCM (for$/;"	m	struct:lame_global_struct	access:public
emphasis	util.h	/^        int     emphasis;    \/* Input PCM is emphased PCM (for$/;"	m	struct:__anon14	access:public
en	l3side.h	/^    III_psy_xmin en;$/;"	m	struct:__anon32	access:public
en	lame-analysis.h	/^    double  en[2][4][SBMAX_l];$/;"	m	struct:plotting_data	access:public
en	util.h	/^        III_psy_xmin en[4];$/;"	m	struct:__anon6	access:public
en_s	lame-analysis.h	/^    double  en_s[2][4][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
enc	id3tag.h	/^        int     enc;         \/* 0:Latin-1, 1:UCS-2, 2:RAW        *\/$/;"	m	struct:FrameDataNode::__anon17	access:public
enc_delay	VbrTag.h	/^    int     enc_delay;       \/* encoder delay *\/$/;"	m	struct:__anon29	access:public
enc_padding	VbrTag.h	/^    int     enc_padding;     \/* encoder paddign added at end of stream *\/$/;"	m	struct:__anon29	access:public
encodeSideInfo2	bitstream.c	/^encodeSideInfo2(lame_internal_flags * gfc, int bitsPerFrame)$/;"	f	file:	signature:(lame_internal_flags * gfc, int bitsPerFrame)
encoder_delay	util.h	/^        int     encoder_delay;$/;"	m	struct:__anon10	access:public
encoder_padding	util.h	/^        int     encoder_padding; \/* number of samples of padding appended to input *\/$/;"	m	struct:__anon10	access:public
energy	lame-analysis.h	/^    double  energy[2][4][BLKSIZE];$/;"	m	struct:plotting_data	access:public
energy_above_cutoff	l3side.h	/^    char    energy_above_cutoff[SFBMAX];$/;"	m	struct:__anon33	access:public
energy_save	lame-analysis.h	/^    double  energy_save[4][BLKSIZE]; \/* psymodel is one ahead *\/$/;"	m	struct:plotting_data	access:public
enforce_min_bitrate	util.h	/^        int     enforce_min_bitrate; \/* strictly enforce VBR_min_bitrate normaly, it will be violated for analog silence *\/$/;"	m	struct:__anon14	access:public
enwindow	newmdct.c	/^static const FLOAT enwindow[] = {$/;"	v	file:
eql_w	util.h	/^        FLOAT   eql_w[BLKSIZE \/ 2]; \/* equal loudness weights (based on ATH) *\/$/;"	m	struct:__anon3	access:public
error_protection	lame_global_flags.h	/^    int     error_protection; \/* use 2 bytes per frame for a CRC$/;"	m	struct:lame_global_struct	access:public
error_protection	util.h	/^        int     error_protection; \/* use 2 bytes per frame for a CRC checksum. default=0 *\/$/;"	m	struct:__anon14	access:public
errorf	lame_global_flags.h	/^        void    (*errorf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
ers	lame-analysis.h	/^    double  ers[2][4];$/;"	m	struct:plotting_data	access:public
ers_save	lame-analysis.h	/^    double  ers_save[4];     \/* psymodel is one ahead *\/$/;"	m	struct:plotting_data	access:public
esp	i386/nasm.h	/^%define r7 esp$/;"	v
expY	presets.c	/^    int     expY;$/;"	m	struct:__anon24	file:	access:public
exp_nspsytune	lame_global_flags.h	/^    int     exp_nspsytune;$/;"	m	struct:lame_global_struct	access:public
experimentalY	lame_global_flags.h	/^    int     experimentalY;$/;"	m	struct:lame_global_struct	access:public
experimentalZ	lame_global_flags.h	/^    int     experimentalZ;$/;"	m	struct:lame_global_struct	access:public
extension	lame_global_flags.h	/^    int     extension;       \/* the MP3 'private extension' bit.$/;"	m	struct:lame_global_struct	access:public
extension	util.h	/^        int     extension;   \/* the MP3 'private extension' bit. Meaningless *\/$/;"	m	struct:__anon14	access:public
f	takehiro.c	/^    float   f;$/;"	m	union:__anon36	file:	access:public
f	vbrquantize.c	/^    float   f;$/;"	m	union:__anon37	file:	access:public
fabsf	machine.h	181;"	d
fast_log2	util.c	/^fast_log2(ieee754_float32_t x)$/;"	f	signature:(ieee754_float32_t x)
fast_log2	util.h	/^	extern float fast_log2(float x);$/;"	p	signature:(float x)
features	lame.h	/^    const char *features;    \/* Don't make assumptions about the contents! *\/$/;"	m	struct:__anon19	access:public
fft_fht	util.h	/^        void    (*fft_fht) (FLOAT *, int);$/;"	m	struct:lame_internal_flags	access:public
fft_long	fft.c	/^fft_long(lame_internal_flags const *const gfc,$/;"	f	signature:(lame_internal_flags const *const gfc, FLOAT x[BLKSIZE], int chn, const sample_t *const buffer[2])
fft_long	fft.h	/^void    fft_long(lame_internal_flags const *const gfc, FLOAT x_real[BLKSIZE],$/;"	p	signature:(lame_internal_flags const *const gfc, FLOAT x_real[BLKSIZE], int chn, const sample_t *const data[2])
fft_short	fft.c	/^fft_short(lame_internal_flags const *const gfc,$/;"	f	signature:(lame_internal_flags const *const gfc, FLOAT x_real[3][BLKSIZE_s], int chn, const sample_t *const buffer[2])
fft_short	fft.h	/^void    fft_short(lame_internal_flags const *const gfc, FLOAT x_real[3][BLKSIZE_s],$/;"	p	signature:(lame_internal_flags const *const gfc, FLOAT x_real[3][BLKSIZE_s], int chn, const sample_t *const data[2])
fht	fft.c	/^fht(FLOAT * fz, int n)$/;"	f	file:	signature:(FLOAT * fz, int n)
fht_3DN	fft.c	/^extern void fht_3DN(FLOAT * fz, int n);$/;"	p	file:	signature:(FLOAT * fz, int n)
fht_SSE	fft.c	/^extern void fht_SSE(FLOAT * fz, int n);$/;"	p	file:	signature:(FLOAT * fz, int n)
fht_SSE2	vector/lame_intrin.h	/^fht_SSE2(FLOAT* , int);$/;"	p	signature:(FLOAT* , int)
fht_SSE2	vector/xmm_quantize_sub.c	/^fht_SSE2(FLOAT * fz, int n)$/;"	f	signature:(FLOAT * fz, int n)
fi_union	takehiro.c	/^} fi_union;$/;"	t	typeref:union:__anon36	file:
fi_union	vbrquantize.c	/^} fi_union;$/;"	t	typeref:union:__anon37	file:
fid	id3tag.h	/^    uint32_t fid;             \/* Frame Identifier                 *\/$/;"	m	struct:FrameDataNode	access:public
fill_buffer	util.c	/^fill_buffer(lame_internal_flags * gfc,$/;"	f	signature:(lame_internal_flags * gfc, sample_t * const mfbuf[2], sample_t const * const in_buffer[2], int nsamples, int *n_in, int *n_out)
fill_buffer	util.h	/^    void    fill_buffer(lame_internal_flags * gfc,$/;"	p	signature:(lame_internal_flags * gfc, sample_t *const mfbuf[2], sample_t const *const in_buffer[2], int nsamples, int *n_in, int *n_out)
fill_buffer_resample	util.c	/^fill_buffer_resample(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, sample_t * outbuf, int desired_len, sample_t const *inbuf, int len, int *num_used, int ch)
fill_buffer_resample_init	util.h	/^        int     fill_buffer_resample_init;$/;"	m	struct:lame_internal_flags	access:public
filterButter	gain_analysis.c	/^filterButter(const Float_t * input, Float_t * output, size_t nSamples, const Float_t * const kernel)$/;"	f	file:	signature:(const Float_t * input, Float_t * output, size_t nSamples, const Float_t * const kernel)
filterYule	gain_analysis.c	/^filterYule(const Float_t * input, Float_t * output, size_t nSamples, const Float_t * const kernel)$/;"	f	file:	signature:(const Float_t * input, Float_t * output, size_t nSamples, const Float_t * const kernel)
filter_coef	lame.c	/^filter_coef(FLOAT x)$/;"	f	file:	signature:(FLOAT x)
find	vbrquantize.c	/^    find_sf_f  find;$/;"	m	struct:algo_s	file:	access:public
findNode	id3tag.c	/^findNode(id3tag_spec const *tag, uint32_t frame_id, FrameDataNode const *last)$/;"	f	file:	signature:(id3tag_spec const *tag, uint32_t frame_id, FrameDataNode const *last)
findPeakSample	util.h	/^        int     findPeakSample;$/;"	m	struct:__anon14	access:public
findReplayGain	lame_global_flags.h	/^    int     findReplayGain;  \/* find the RG value? default=0       *\/$/;"	m	struct:lame_global_struct	access:public
findReplayGain	util.h	/^        int     findReplayGain; \/* find the RG value? default=0       *\/$/;"	m	struct:__anon14	access:public
find_lowest_scalefac	vbrquantize.c	/^find_lowest_scalefac(const FLOAT xr34)$/;"	f	file:	signature:(const FLOAT xr34)
find_scalefac_x34	vbrquantize.c	/^find_scalefac_x34(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw,$/;"	f	file:	signature:(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw, uint8_t sf_min)
find_sf_f	vbrquantize.c	/^typedef uint8_t (*find_sf_f) (const FLOAT *, const FLOAT *, FLOAT, unsigned int, uint8_t);$/;"	t	file:
first	gain_analysis.h	/^        int     first;$/;"	m	struct:replaygain_data	access:public
flags	VbrTag.h	/^    int     flags;           \/* from Vbr header data *\/$/;"	m	struct:__anon29	access:public
flags	id3tag.h	/^    unsigned int flags;$/;"	m	struct:id3tag_spec	access:public
flattenDistribution	vbrquantize.c	/^flattenDistribution(const int sfwork[SFBMAX], int sf_out[SFBMAX], int dm, int k, int p)$/;"	f	file:	signature:(const int sfwork[SFBMAX], int sf_out[SFBMAX], int dm, int k, int p)
floatcompare	quantize.c	/^floatcompare(const void *v1, const void *v2)$/;"	f	file:	signature:(const void *v1, const void *v2)
floor	util.h	/^        FLOAT   floor;       \/* lowest ATH value *\/$/;"	m	struct:__anon3	access:public
flush_bitstream	bitstream.c	/^flush_bitstream(lame_internal_flags * gfc)$/;"	f	signature:(lame_internal_flags * gfc)
flush_bitstream	bitstream.h	/^void    flush_bitstream(lame_internal_flags * gfc);$/;"	p	signature:(lame_internal_flags * gfc)
force_ms	lame_global_flags.h	/^    int     force_ms;        \/* force M\/S mode.  requires mode=1            *\/$/;"	m	struct:lame_global_struct	access:public
force_ms	util.h	/^        int     force_ms;    \/* force M\/S mode.  requires mode=1            *\/$/;"	m	struct:__anon14	access:public
force_short_block_calc	util.h	/^        int     force_short_block_calc;$/;"	m	struct:__anon5	access:public
format_bitstream	bitstream.c	/^format_bitstream(lame_internal_flags * gfc)$/;"	f	signature:(lame_internal_flags * gfc)
format_bitstream	bitstream.h	/^int     format_bitstream(lame_internal_flags * gfc);$/;"	p	signature:(lame_internal_flags * gfc)
frac_SpF	util.h	/^        int     frac_SpF;$/;"	m	struct:__anon8	access:public
frameNum	lame-analysis.h	/^    int     frameNum;        \/* current frame number *\/$/;"	m	struct:plotting_data	access:public
frameNum123	lame-analysis.h	/^    int     frameNum123;$/;"	m	struct:plotting_data	access:public
frame_duration	psymodel.c	2073;"	d	file:
frame_duration	psymodel.c	2077;"	d	file:
frame_id_matches	id3tag.c	/^frame_id_matches(int id, int mask)$/;"	f	file:	signature:(int id, int mask)
frame_number	util.h	/^        int     frame_number; \/* number of frames encoded             *\/$/;"	m	struct:__anon10	access:public
framenum	lame.h	/^  int framenum;        \/* frames decoded counter                         *\/$/;"	m	struct:__anon20	access:public
frames	VbrTag.h	/^    int     frames;          \/* total bit stream frames from Vbr header data *\/$/;"	m	struct:__anon29	access:public
framesize	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
framesize	lame.h	/^  int framesize;       \/* number of samples per mp3 frame                *\/$/;"	m	struct:__anon20	access:public
frametime	lame-analysis.h	/^    double  frametime;       \/* starting time of frame, in seconds *\/$/;"	m	struct:plotting_data	access:public
free_aligned	util.c	/^free_aligned(aligned_pointer_t * ptr)$/;"	f	signature:(aligned_pointer_t * ptr)
free_aligned	util.h	/^    void    free_aligned(aligned_pointer_t * ptr);$/;"	p	signature:(aligned_pointer_t * ptr)
free_format	lame_global_flags.h	/^    int     free_format;     \/* use free format? default=0                  *\/$/;"	m	struct:lame_global_struct	access:public
free_format	util.h	/^        int     free_format;$/;"	m	struct:__anon14	access:public
free_global_data	util.c	/^free_global_data(lame_internal_flags * gfc)$/;"	f	file:	signature:(lame_internal_flags * gfc)
free_id3tag	util.c	/^free_id3tag(lame_internal_flags * const gfc)$/;"	f	signature:(lame_internal_flags * const gfc)
free_id3tag	util.h	/^    void    free_id3tag(lame_internal_flags * const gfc);$/;"	p	signature:(lame_internal_flags * const gfc)
freegfc	util.c	/^freegfc(lame_internal_flags * const gfc)$/;"	f	signature:(lame_internal_flags * const gfc)
freegfc	util.h	/^    void    freegfc(lame_internal_flags * const gfc);$/;"	p	signature:(lame_internal_flags * const gfc)
freq2bark	util.c	/^freq2bark(FLOAT freq)$/;"	f	signature:(FLOAT freq)
freq2bark	util.h	/^    extern FLOAT freq2bark(FLOAT freq);$/;"	p	signature:(FLOAT freq)
freqindex	gain_analysis.h	/^        int     freqindex;$/;"	m	struct:replaygain_data	access:public
fromLatin1Char	id3tag.c	/^fromLatin1Char(const unsigned short* s, unsigned short c)$/;"	f	file:	signature:(const unsigned short* s, unsigned short c)
fsqr	gain_analysis.c	/^fsqr(const double d)$/;"	f	file:	signature:(const double d)
full_outer_loop	util.h	/^        int     full_outer_loop; \/* 0 = stop early after 0 distortion found. 1 = full search *\/$/;"	m	struct:__anon14	access:public
gcd	util.c	/^gcd(int i, int j)$/;"	f	file:	signature:(int i, int j)
genre_alpha_map	id3tag.c	/^static const int genre_alpha_map[] = {$/;"	v	file:
genre_id3v1	id3tag.h	/^    int     genre_id3v1;$/;"	m	struct:id3tag_spec	access:public
genre_names	id3tag.c	/^static const char *const genre_names[] = {$/;"	v	file:
get_framebits	quantize.c	/^get_framebits(lame_internal_flags * gfc, int frameBits[15])$/;"	f	file:	signature:(lame_internal_flags * gfc, int frameBits[15])
get_klemm_noise	quantize.c	/^get_klemm_noise(const FLOAT * distort, const gr_info * const gi)$/;"	f	file:	signature:(const FLOAT * distort, const gr_info * const gi)
get_lame_os_bitness	lame.h	/^const char*  CDECL get_lame_os_bitness    ( void );$/;"	p	signature:( void )
get_lame_os_bitness	version.c	/^get_lame_os_bitness(void)$/;"	f	signature:(void)
get_lame_short_version	lame.h	/^const char*  CDECL get_lame_short_version ( void );$/;"	p	signature:( void )
get_lame_short_version	version.c	/^get_lame_short_version(void)$/;"	f	signature:(void)
get_lame_tag_encoder_short_version	VbrTag.c	/^extern const char* get_lame_tag_encoder_short_version(void);$/;"	p	file:	signature:(void)
get_lame_tag_encoder_short_version	version.c	/^get_lame_tag_encoder_short_version(void)$/;"	f	signature:(void)
get_lame_url	lame.h	/^const char*  CDECL get_lame_url           ( void );$/;"	p	signature:( void )
get_lame_url	version.c	/^get_lame_url(void)$/;"	f	signature:(void)
get_lame_version	lame.h	/^const char*  CDECL get_lame_version       ( void );$/;"	p	signature:( void )
get_lame_version	version.c	/^get_lame_version(void)$/;"	f	signature:(void)
get_lame_version_numerical	lame.h	/^void CDECL get_lame_version_numerical(lame_version_t *);$/;"	p	signature:(lame_version_t *)
get_lame_version_numerical	version.c	/^get_lame_version_numerical(lame_version_t * lvp)$/;"	f	signature:(lame_version_t * lvp)
get_lame_very_short_version	lame.h	/^const char*  CDECL get_lame_very_short_version ( void );$/;"	p	signature:( void )
get_lame_very_short_version	version.c	/^get_lame_very_short_version(void)$/;"	f	signature:(void)
get_max_frame_buffer_size_by_constraint	bitstream.c	/^get_max_frame_buffer_size_by_constraint(SessionConfig_t const * cfg, int constraint)$/;"	f	signature:(SessionConfig_t const * cfg, int constraint)
get_max_frame_buffer_size_by_constraint	bitstream.h	/^int     get_max_frame_buffer_size_by_constraint(SessionConfig_t const * cfg, int constraint);$/;"	p	signature:(SessionConfig_t const * cfg, int constraint)
get_psy_version	lame.h	/^const char*  CDECL get_psy_version        ( void );$/;"	p	signature:( void )
get_psy_version	version.c	/^get_psy_version(void)$/;"	f	signature:(void)
get_vbr_preset	presets.c	/^get_vbr_preset(int v)$/;"	f	file:	signature:(int v)
getframebits	bitstream.c	/^getframebits(const lame_internal_flags * gfc)$/;"	f	signature:(const lame_internal_flags * gfc)
getframebits	bitstream.h	/^int     getframebits(const lame_internal_flags * gfc);$/;"	p	signature:(const lame_internal_flags * gfc)
gfc	vbrquantize.c	/^    lame_internal_flags *gfc;$/;"	m	struct:algo_s	file:	access:public
global_gain	l3side.h	/^    int     global_gain;$/;"	m	struct:__anon33	access:public
global_gain	quantize_pvt.h	/^    int     global_gain;$/;"	m	struct:calc_noise_data_t	access:public
gr_info	l3side.h	/^} gr_info;$/;"	t	typeref:struct:__anon33
guess_scalefac_x34	vbrquantize.c	/^guess_scalefac_x34(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw, uint8_t sf_min)$/;"	f	file:	signature:(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw, uint8_t sf_min)
h	i386/nasm.h	/^	times (1 & ge10(($$-%%here) & 15) & ~ge11(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,008h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge11(($$-%%here) & 15) & ~ge12(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,009h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge12(($$-%%here) & 15) & ~ge13(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ah,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge13(($$-%%here) & 15) & ~ge14(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Bh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge14(($$-%%here) & 15) & ~ge15(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Ch,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge15(($$-%%here) & 15) & ~ge16(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,00Dh,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge3(($$-%%here) & 15)  & ~ge4(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,020h$/;"	v
h	i386/nasm.h	/^	times (1 & ge4(($$-%%here) & 15)  & ~ge5(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h$/;"	v
h	i386/nasm.h	/^	times (1 & ge5(($$-%%here) & 15)  & ~ge6(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,044h,020h,000h,090h$/;"	v
h	i386/nasm.h	/^	times (1 & ge6(($$-%%here) & 15)  & ~ge7(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,080h,0,0,0,0$/;"	v
h	i386/nasm.h	/^	times (1 & ge7(($$-%%here) & 15)  & ~ge8(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0$/;"	v
h	i386/nasm.h	/^	times (1 & ge8(($$-%%here) & 15)  & ~ge9(($$-%%here) & 15)  & ~ge%1(($$-%%here) & 15)) DB 08Dh,004h,005h,0,0,0,0,90h$/;"	v
h	i386/nasm.h	/^	times (1 & ge9(($$-%%here) & 15)  & ~ge10(($$-%%here) & 15) & ~ge%1(($$-%%here) & 15)) DB 0EBh,007h,90h,90h,90h,90h,90h,90h,90h$/;"	v
h_id	VbrTag.h	/^    int     h_id;            \/* from MPEG header, 0=MPEG2, 1=MPEG1 *\/$/;"	m	struct:__anon29	access:public
h_ptr	util.h	/^        int     h_ptr;$/;"	m	struct:__anon8	access:public
hasUcs2ByteOrderMarker	id3tag.c	/^hasUcs2ByteOrderMarker(unsigned short bom)$/;"	f	file:	signature:(unsigned short bom)
has_3DNow	util.c	/^has_3DNow(void)$/;"	f	signature:(void)
has_3DNow	util.h	/^    extern int has_3DNow(void);$/;"	p	signature:(void)
has_3DNow_nasm	util.c	/^extern int has_3DNow_nasm(void);$/;"	p	file:	signature:(void)
has_MMX	util.c	/^has_MMX(void)$/;"	f	signature:(void)
has_MMX	util.h	/^    extern int has_MMX(void);$/;"	p	signature:(void)
has_MMX_nasm	util.c	/^extern int has_MMX_nasm(void);$/;"	p	file:	signature:(void)
has_SSE	util.c	/^has_SSE(void)$/;"	f	signature:(void)
has_SSE	util.h	/^    extern int has_SSE(void);$/;"	p	signature:(void)
has_SSE2	util.c	/^has_SSE2(void)$/;"	f	signature:(void)
has_SSE2	util.h	/^    extern int has_SSE2(void);$/;"	p	signature:(void)
has_SSE2_nasm	util.c	/^extern int has_SSE2_nasm(void);$/;"	p	file:	signature:(void)
has_SSE_nasm	util.c	/^extern int has_SSE_nasm(void);$/;"	p	file:	signature:(void)
header	util.h	/^        } header[MAX_HEADER_BUF];$/;"	m	struct:__anon8	typeref:struct:__anon8::__anon9	access:public
header_parsed	lame.h	/^  int header_parsed;   \/* 1 if header was parsed and following data was$/;"	m	struct:__anon20	access:public
headersize	VbrTag.h	/^    int     headersize;      \/* size of VBR header, in bytes *\/$/;"	m	struct:__anon29	access:public
highpass1	util.h	/^        FLOAT   highpass1, highpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
highpass2	util.h	/^        FLOAT   highpass1, highpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
highpassfreq	lame_global_flags.h	/^    int     highpassfreq;    \/* freq in Hz. 0=lame choses.$/;"	m	struct:lame_global_struct	access:public
highpassfreq	util.h	/^        int     highpassfreq;$/;"	m	struct:__anon14	access:public
highpasswidth	lame_global_flags.h	/^    int     highpasswidth;   \/* freq width of filter, in Hz$/;"	m	struct:lame_global_struct	access:public
hip	util.h	/^        hip_t hip;$/;"	m	struct:lame_internal_flags	access:public
hip_decode	lame.h	/^int CDECL hip_decode( hip_t           gfp$/;"	p	signature:( hip_t gfp , unsigned char * mp3buf , size_t len , short pcm_l[] , short pcm_r[] )
hip_decode	mpglib_interface.c	/^hip_decode(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[])$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[])
hip_decode1	lame.h	/^int CDECL hip_decode1( hip_t          gfp$/;"	p	signature:( hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] )
hip_decode1	mpglib_interface.c	/^hip_decode1(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[])$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[])
hip_decode1_headers	lame.h	/^int CDECL hip_decode1_headers( hip_t           gfp$/;"	p	signature:( hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data )
hip_decode1_headers	mpglib_interface.c	/^hip_decode1_headers(hip_t hip, unsigned char *buffer,$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data)
hip_decode1_headersB	lame.h	/^int CDECL hip_decode1_headersB( hip_t gfp$/;"	p	signature:( hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data , int *enc_delay , int *enc_padding )
hip_decode1_headersB	mpglib_interface.c	/^hip_decode1_headersB(hip_t hip, unsigned char *buffer,$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data, int *enc_delay, int *enc_padding)
hip_decode1_unclipped	mpglib_interface.c	/^hip_decode1_unclipped(hip_t hip, unsigned char *buffer, size_t len, sample_t pcm_l[], sample_t pcm_r[])$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, sample_t pcm_l[], sample_t pcm_r[])
hip_decode1_unclipped	util.h	/^    int     hip_decode1_unclipped(hip_t hip, unsigned char *mp3buf,$/;"	p	signature:(hip_t hip, unsigned char *mp3buf, size_t len, sample_t pcm_l[], sample_t pcm_r[])
hip_decode_exit	lame.h	/^int CDECL hip_decode_exit(hip_t gfp);$/;"	p	signature:(hip_t gfp)
hip_decode_exit	mpglib_interface.c	/^int hip_decode_exit(hip_t hip)$/;"	f	signature:(hip_t hip)
hip_decode_headers	lame.h	/^int CDECL hip_decode_headers( hip_t           gfp$/;"	p	signature:( hip_t gfp , unsigned char* mp3buf , size_t len , short pcm_l[] , short pcm_r[] , mp3data_struct* mp3data )
hip_decode_headers	mpglib_interface.c	/^hip_decode_headers(hip_t hip, unsigned char *buffer,$/;"	f	signature:(hip_t hip, unsigned char *buffer, size_t len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data)
hip_decode_init	lame.h	/^hip_t CDECL hip_decode_init(void);$/;"	p	signature:(void)
hip_decode_init	mpglib_interface.c	/^hip_t hip_decode_init(void)$/;"	f	signature:(void)
hip_global_flags	lame.h	/^typedef struct hip_global_struct hip_global_flags;$/;"	t	typeref:struct:hip_global_struct
hip_global_struct	mpglib_interface.c	32;"	d	file:
hip_set_debugf	lame.h	/^void CDECL hip_set_debugf(hip_t gfp, lame_report_function f);$/;"	p	signature:(hip_t gfp, lame_report_function f)
hip_set_debugf	mpglib_interface.c	/^void hip_set_debugf(hip_t hip, lame_report_function func)$/;"	f	signature:(hip_t hip, lame_report_function func)
hip_set_errorf	lame.h	/^void CDECL hip_set_errorf(hip_t gfp, lame_report_function f);$/;"	p	signature:(hip_t gfp, lame_report_function f)
hip_set_errorf	mpglib_interface.c	/^void hip_set_errorf(hip_t hip, lame_report_function func)$/;"	f	signature:(hip_t hip, lame_report_function func)
hip_set_msgf	lame.h	/^void CDECL hip_set_msgf  (hip_t gfp, lame_report_function f);$/;"	p	signature:(hip_t gfp, lame_report_function f)
hip_set_msgf	mpglib_interface.c	/^void hip_set_msgf  (hip_t hip, lame_report_function func)$/;"	f	signature:(hip_t hip, lame_report_function func)
hip_set_pinfo	mpglib_interface.c	/^void hip_set_pinfo(hip_t hip, plotting_data* pinfo)$/;"	f	signature:(hip_t hip, plotting_data* pinfo)
hip_set_pinfo	util.h	/^    extern void hip_set_pinfo(hip_t hip, plotting_data* pinfo);$/;"	p	signature:(hip_t hip, plotting_data* pinfo)
hip_t	lame.h	/^typedef hip_global_flags *hip_t;$/;"	t
hlen	tables.h	/^    const uint8_t *hlen;        \/* pointer to array[xlen][ylen]  *\/$/;"	m	struct:huffcodetab	access:public
hogege	bitstream.c	/^static int hogege;$/;"	v	file:
ht	tables.c	/^const struct huffcodetab ht[HTN] = {$/;"	v	typeref:struct:huffcodetab
huf_tbl_noESC	takehiro.c	/^static const int huf_tbl_noESC[] = {$/;"	v	file:
huffcodetab	tables.h	/^struct huffcodetab {$/;"	s
huffcodetab::hlen	tables.h	/^    const uint8_t *hlen;        \/* pointer to array[xlen][ylen]  *\/$/;"	m	struct:huffcodetab	access:public
huffcodetab::linmax	tables.h	/^    const unsigned int linmax;        \/* max number to be stored in linbits *\/$/;"	m	struct:huffcodetab	access:public
huffcodetab::table	tables.h	/^    const uint16_t *table;      \/* pointer to array[xlen][ylen]  *\/$/;"	m	struct:huffcodetab	access:public
huffcodetab::xlen	tables.h	/^    const unsigned int xlen;          \/* max. x-index+   *\/$/;"	m	struct:huffcodetab	access:public
huffman_coder_count1	bitstream.c	/^huffman_coder_count1(lame_internal_flags * gfc, gr_info const *gi)$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info const *gi)
huffman_init	quantize_pvt.h	/^void    huffman_init(lame_internal_flags * const gfc);$/;"	p	signature:(lame_internal_flags * const gfc)
huffman_init	takehiro.c	/^huffman_init(lame_internal_flags * const gfc)$/;"	f	signature:(lame_internal_flags * const gfc)
i	takehiro.c	/^    int     i;$/;"	m	union:__anon36	file:	access:public
i	vbrquantize.c	/^    int     i;$/;"	m	union:__anon37	file:	access:public
i_stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
id3tag_add_v2	id3tag.c	/^id3tag_add_v2(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_add_v2	lame.h	/^void CDECL id3tag_add_v2   (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_genre_list	id3tag.c	/^id3tag_genre_list(void (*handler) (int, const char *, void *), void *cookie)$/;"	f	signature:(void (*handler) (int, const char *, void *), void *cookie)
id3tag_genre_list	lame.h	/^void CDECL id3tag_genre_list($/;"	p	signature:( void (*handler)(int, const char *, void *), void* cookie)
id3tag_init	id3tag.c	/^id3tag_init(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_init	lame.h	/^void CDECL id3tag_init     (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_pad_v2	id3tag.c	/^id3tag_pad_v2(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_pad_v2	lame.h	/^void CDECL id3tag_pad_v2   (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_set_album	id3tag.c	/^id3tag_set_album(lame_t gfp, const char *album)$/;"	f	signature:(lame_t gfp, const char *album)
id3tag_set_album	lame.h	/^void CDECL id3tag_set_album(lame_t gfp, const char* album);$/;"	p	signature:(lame_t gfp, const char* album)
id3tag_set_albumart	id3tag.c	/^id3tag_set_albumart(lame_t gfp, const char *image, size_t size)$/;"	f	signature:(lame_t gfp, const char *image, size_t size)
id3tag_set_albumart	lame.h	/^int CDECL id3tag_set_albumart(lame_t gfp, const char* image, size_t size);$/;"	p	signature:(lame_t gfp, const char* image, size_t size)
id3tag_set_artist	id3tag.c	/^id3tag_set_artist(lame_t gfp, const char *artist)$/;"	f	signature:(lame_t gfp, const char *artist)
id3tag_set_artist	lame.h	/^void CDECL id3tag_set_artist(lame_t gfp, const char* artist);$/;"	p	signature:(lame_t gfp, const char* artist)
id3tag_set_comment	id3tag.c	/^id3tag_set_comment(lame_t gfp, const char *comment)$/;"	f	signature:(lame_t gfp, const char *comment)
id3tag_set_comment	lame.h	/^void CDECL id3tag_set_comment(lame_t gfp, const char* comment);$/;"	p	signature:(lame_t gfp, const char* comment)
id3tag_set_comment_latin1	id3tag.c	/^id3tag_set_comment_latin1(lame_t gfp, char const *lang, char const *desc, char const *text)$/;"	f	signature:(lame_t gfp, char const *lang, char const *desc, char const *text)
id3tag_set_comment_latin1	lame.h	/^int CDECL id3tag_set_comment_latin1(lame_t gfp, char const *lang, char const *desc, char const *text);$/;"	p	signature:(lame_t gfp, char const *lang, char const *desc, char const *text)
id3tag_set_comment_ucs2	id3tag.c	/^id3tag_set_comment_ucs2(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)$/;"	f	signature:(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)
id3tag_set_comment_ucs2	id3tag.c	/^id3tag_set_comment_ucs2(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text);$/;"	p	file:	signature:(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)
id3tag_set_comment_ucs2	lame.h	/^int CDECL id3tag_set_comment_ucs2(lame_t gfp, char const *lang,$/;"	p	signature:(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)
id3tag_set_comment_utf16	id3tag.c	/^id3tag_set_comment_utf16(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)$/;"	f	signature:(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)
id3tag_set_comment_utf16	lame.h	/^int CDECL id3tag_set_comment_utf16(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text);$/;"	p	signature:(lame_t gfp, char const *lang, unsigned short const *desc, unsigned short const *text)
id3tag_set_fieldvalue	id3tag.c	/^id3tag_set_fieldvalue(lame_t gfp, const char *fieldvalue)$/;"	f	signature:(lame_t gfp, const char *fieldvalue)
id3tag_set_fieldvalue	lame.h	/^int CDECL id3tag_set_fieldvalue(lame_t gfp, const char* fieldvalue);$/;"	p	signature:(lame_t gfp, const char* fieldvalue)
id3tag_set_fieldvalue_ucs2	id3tag.c	/^id3tag_set_fieldvalue_ucs2(lame_t gfp, const unsigned short *fieldvalue)$/;"	f	signature:(lame_t gfp, const unsigned short *fieldvalue)
id3tag_set_fieldvalue_ucs2	id3tag.c	/^id3tag_set_fieldvalue_ucs2(lame_t gfp, const unsigned short *fieldvalue);$/;"	p	file:	signature:(lame_t gfp, const unsigned short *fieldvalue)
id3tag_set_fieldvalue_ucs2	lame.h	/^int CDECL id3tag_set_fieldvalue_ucs2(lame_t gfp, const unsigned short *fieldvalue);$/;"	p	signature:(lame_t gfp, const unsigned short *fieldvalue)
id3tag_set_fieldvalue_utf16	id3tag.c	/^id3tag_set_fieldvalue_utf16(lame_t gfp, const unsigned short *fieldvalue)$/;"	f	signature:(lame_t gfp, const unsigned short *fieldvalue)
id3tag_set_fieldvalue_utf16	lame.h	/^int CDECL id3tag_set_fieldvalue_utf16(lame_t gfp, const unsigned short *fieldvalue);$/;"	p	signature:(lame_t gfp, const unsigned short *fieldvalue)
id3tag_set_genre	id3tag.c	/^id3tag_set_genre(lame_t gfp, const char *genre)$/;"	f	signature:(lame_t gfp, const char *genre)
id3tag_set_genre	lame.h	/^int CDECL id3tag_set_genre(lame_t gfp, const char* genre);$/;"	p	signature:(lame_t gfp, const char* genre)
id3tag_set_genre_utf16	id3tag.c	/^id3tag_set_genre_utf16(lame_t gfp, unsigned short const* text)$/;"	f	file:	signature:(lame_t gfp, unsigned short const* text)
id3tag_set_pad	id3tag.c	/^id3tag_set_pad(lame_t gfp, size_t n)$/;"	f	signature:(lame_t gfp, size_t n)
id3tag_set_pad	lame.h	/^void CDECL id3tag_set_pad  (lame_t gfp, size_t n);$/;"	p	signature:(lame_t gfp, size_t n)
id3tag_set_textinfo_latin1	id3tag.c	/^id3tag_set_textinfo_latin1(lame_t gfp, char const *id, char const *text)$/;"	f	signature:(lame_t gfp, char const *id, char const *text)
id3tag_set_textinfo_latin1	lame.h	/^int CDECL id3tag_set_textinfo_latin1(lame_t gfp, char const *id, char const *text);$/;"	p	signature:(lame_t gfp, char const *id, char const *text)
id3tag_set_textinfo_ucs2	id3tag.c	/^id3tag_set_textinfo_ucs2(lame_t gfp, char const *id, unsigned short const *text)$/;"	f	signature:(lame_t gfp, char const *id, unsigned short const *text)
id3tag_set_textinfo_ucs2	id3tag.c	/^id3tag_set_textinfo_ucs2(lame_t gfp, char const *id, unsigned short const *text);$/;"	p	file:	signature:(lame_t gfp, char const *id, unsigned short const *text)
id3tag_set_textinfo_ucs2	lame.h	/^int CDECL id3tag_set_textinfo_ucs2(lame_t gfp, char const *id, unsigned short const *text);$/;"	p	signature:(lame_t gfp, char const *id, unsigned short const *text)
id3tag_set_textinfo_utf16	id3tag.c	/^id3tag_set_textinfo_utf16(lame_t gfp, char const *id, unsigned short const *text)$/;"	f	signature:(lame_t gfp, char const *id, unsigned short const *text)
id3tag_set_textinfo_utf16	lame.h	/^int CDECL id3tag_set_textinfo_utf16(lame_t gfp, char const *id, unsigned short const *text);$/;"	p	signature:(lame_t gfp, char const *id, unsigned short const *text)
id3tag_set_title	id3tag.c	/^id3tag_set_title(lame_t gfp, const char *title)$/;"	f	signature:(lame_t gfp, const char *title)
id3tag_set_title	lame.h	/^void CDECL id3tag_set_title(lame_t gfp, const char* title);$/;"	p	signature:(lame_t gfp, const char* title)
id3tag_set_track	id3tag.c	/^id3tag_set_track(lame_t gfp, const char *track)$/;"	f	signature:(lame_t gfp, const char *track)
id3tag_set_track	lame.h	/^int CDECL id3tag_set_track(lame_t gfp, const char* track);$/;"	p	signature:(lame_t gfp, const char* track)
id3tag_set_userinfo_latin1	id3tag.c	/^id3tag_set_userinfo_latin1(lame_t gfp, uint32_t id, char const *fieldvalue)$/;"	f	file:	signature:(lame_t gfp, uint32_t id, char const *fieldvalue)
id3tag_set_userinfo_ucs2	id3tag.c	/^id3tag_set_userinfo_ucs2(lame_t gfp, uint32_t id, unsigned short const *fieldvalue)$/;"	f	file:	signature:(lame_t gfp, uint32_t id, unsigned short const *fieldvalue)
id3tag_set_year	id3tag.c	/^id3tag_set_year(lame_t gfp, const char *year)$/;"	f	signature:(lame_t gfp, const char *year)
id3tag_set_year	lame.h	/^void CDECL id3tag_set_year(lame_t gfp, const char* year);$/;"	p	signature:(lame_t gfp, const char* year)
id3tag_space_v1	id3tag.c	/^id3tag_space_v1(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_space_v1	lame.h	/^void CDECL id3tag_space_v1 (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_spec	id3tag.h	/^typedef struct id3tag_spec {$/;"	s
id3tag_spec	id3tag.h	/^} id3tag_spec;$/;"	t	typeref:struct:id3tag_spec
id3tag_spec::album	id3tag.h	/^    char   *album;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::albumart	id3tag.h	/^    unsigned char *albumart;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::albumart_mimetype	id3tag.h	/^    int     albumart_mimetype;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::albumart_size	id3tag.h	/^    unsigned int albumart_size;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::artist	id3tag.h	/^    char   *artist;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::comment	id3tag.h	/^    char   *comment;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::flags	id3tag.h	/^    unsigned int flags;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::genre_id3v1	id3tag.h	/^    int     genre_id3v1;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::padding_size	id3tag.h	/^    unsigned int padding_size;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::title	id3tag.h	/^    char   *title;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::track_id3v1	id3tag.h	/^    int     track_id3v1;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::v2_head	id3tag.h	/^    FrameDataNode *v2_head, *v2_tail;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::v2_tail	id3tag.h	/^    FrameDataNode *v2_head, *v2_tail;$/;"	m	struct:id3tag_spec	access:public
id3tag_spec::year	id3tag.h	/^    int     year;$/;"	m	struct:id3tag_spec	access:public
id3tag_v1_only	id3tag.c	/^id3tag_v1_only(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_v1_only	lame.h	/^void CDECL id3tag_v1_only  (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_v2_only	id3tag.c	/^id3tag_v2_only(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_v2_only	lame.h	/^void CDECL id3tag_v2_only  (lame_t gfp);$/;"	p	signature:(lame_t gfp)
id3tag_write_v1	id3tag.c	/^id3tag_write_v1(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_write_v1	id3tag.h	/^extern int id3tag_write_v1(lame_global_flags * gfp);$/;"	p	signature:(lame_global_flags * gfp)
id3tag_write_v2	id3tag.c	/^id3tag_write_v2(lame_t gfp)$/;"	f	signature:(lame_t gfp)
id3tag_write_v2	id3tag.h	/^extern int id3tag_write_v2(lame_global_flags * gfp);$/;"	p	signature:(lame_global_flags * gfp)
id3v2AddAudioDuration	id3tag.c	/^id3v2AddAudioDuration(lame_t gfp, double ms)$/;"	f	file:	signature:(lame_t gfp, double ms)
id3v2AddLameVersion	id3tag.c	/^id3v2AddLameVersion(lame_t gfp)$/;"	f	file:	signature:(lame_t gfp)
id3v2_add_latin1	id3tag.c	/^id3v2_add_latin1(lame_t gfp, uint32_t frame_id, char const *lang, char const *desc, char const *text)$/;"	f	file:	signature:(lame_t gfp, uint32_t frame_id, char const *lang, char const *desc, char const *text)
id3v2_add_latin1	id3tag.c	/^id3v2_add_latin1(lame_t gfp, uint32_t frame_id, char const *lang, char const *desc, char const *text);$/;"	p	file:	signature:(lame_t gfp, uint32_t frame_id, char const *lang, char const *desc, char const *text)
id3v2_add_ucs2	id3tag.c	/^id3v2_add_ucs2(lame_t gfp, uint32_t frame_id, char const *lang, unsigned short const *desc, unsigned short const *text)$/;"	f	file:	signature:(lame_t gfp, uint32_t frame_id, char const *lang, unsigned short const *desc, unsigned short const *text)
id3v2_add_ucs2	id3tag.c	/^id3v2_add_ucs2(lame_t gfp, uint32_t frame_id, char const *lang, unsigned short const *desc, unsigned short const *text);$/;"	p	file:	signature:(lame_t gfp, uint32_t frame_id, char const *lang, unsigned short const *desc, unsigned short const *text)
in_buffer_0	util.h	/^        sample_t *in_buffer_0;$/;"	m	struct:__anon8	access:public
in_buffer_1	util.h	/^        sample_t *in_buffer_1;$/;"	m	struct:__anon8	access:public
in_buffer_nsamples	util.h	/^        int     in_buffer_nsamples;$/;"	m	struct:__anon8	access:public
inbuf_old	util.h	/^        sample_t *inbuf_old[2];$/;"	m	struct:__anon8	access:public
inc_scalefac_scale	quantize.c	/^inc_scalefac_scale(gr_info * const cod_info, FLOAT xrpow[576])$/;"	f	file:	signature:(gr_info * const cod_info, FLOAT xrpow[576])
inc_subblock_gain	quantize.c	/^inc_subblock_gain(const lame_internal_flags * const gfc, gr_info * const cod_info, FLOAT xrpow[576])$/;"	f	file:	signature:(const lame_internal_flags * const gfc, gr_info * const cod_info, FLOAT xrpow[576])
init_bit_stream_w	bitstream.c	/^init_bit_stream_w(lame_internal_flags * gfc)$/;"	f	signature:(lame_internal_flags * gfc)
init_bit_stream_w	bitstream.h	/^void    init_bit_stream_w(lame_internal_flags * gfc);$/;"	p	signature:(lame_internal_flags * gfc)
init_fft	fft.c	/^init_fft(lame_internal_flags * const gfc)$/;"	f	signature:(lame_internal_flags * const gfc)
init_fft	fft.h	/^void    init_fft(lame_internal_flags * const gfc);$/;"	p	signature:(lame_internal_flags * const gfc)
init_log_table	util.c	/^init_log_table(void)$/;"	f	signature:(void)
init_log_table	util.h	/^    extern void init_log_table(void);$/;"	p	signature:(void)
init_mask_add_max_values	psymodel.c	/^init_mask_add_max_values(void)$/;"	f	file:	signature:(void)
init_numline	psymodel.c	/^init_numline(PsyConst_CB2SB_t * gd, FLOAT sfreq, int fft_size,$/;"	f	file:	signature:(PsyConst_CB2SB_t * gd, FLOAT sfreq, int fft_size, int mdct_size, int sbmax, int const *scalepos)
init_outer_loop	quantize.c	/^init_outer_loop(lame_internal_flags const *gfc, gr_info * const cod_info)$/;"	f	file:	signature:(lame_internal_flags const *gfc, gr_info * const cod_info)
init_s3_values	psymodel.c	/^init_s3_values(FLOAT ** p, int (*s3ind)[2], int npart,$/;"	f	file:	signature:(FLOAT ** p, int (*s3ind)[2], int npart, FLOAT const *bval, FLOAT const *bval_width, FLOAT const *norm)
init_xrpow	quantize.c	/^init_xrpow(lame_internal_flags * gfc, gr_info * const cod_info, FLOAT xrpow[576])$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info * const cod_info, FLOAT xrpow[576])
init_xrpow_core	util.h	/^        void    (*init_xrpow_core) (gr_info * const cod_info, FLOAT xrpow[576], int upper,$/;"	m	struct:lame_internal_flags	access:public
init_xrpow_core_c	quantize.c	/^init_xrpow_core_c(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum)$/;"	f	file:	signature:(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum)
init_xrpow_core_init	quantize.c	/^init_xrpow_core_init(lame_internal_flags * const gfc)$/;"	f	signature:(lame_internal_flags * const gfc)
init_xrpow_core_init	quantize_pvt.h	/^void    init_xrpow_core_init(lame_internal_flags * const gfc);$/;"	p	signature:(lame_internal_flags * const gfc)
init_xrpow_core_sse	vector/lame_intrin.h	/^init_xrpow_core_sse(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum);$/;"	p	signature:(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum)
init_xrpow_core_sse	vector/xmm_quantize_sub.c	/^init_xrpow_core_sse(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum)$/;"	f	signature:(gr_info * const cod_info, FLOAT xrpow[576], int upper, FLOAT * sum)
inline	machine.h	102;"	d
inline	machine.h	106;"	d
inline	machine.h	107;"	d
inline	machine.h	110;"	d
inline	machine.h	111;"	d
interChRatio	lame_global_flags.h	/^    float   interChRatio;$/;"	m	struct:lame_global_struct	access:public
interChRatio	util.h	/^        float   interChRatio;$/;"	m	struct:__anon14	access:public
interch	presets.c	/^    FLOAT   interch;$/;"	m	struct:__anon24	file:	access:public
internal_flags	lame_global_flags.h	/^    lame_internal_flags *internal_flags;$/;"	m	struct:lame_global_struct	access:public
ipow20	quantize_pvt.c	/^FLOAT   ipow20[Q_MAX];$/;"	v
isFrameIdMatching	id3tag.c	/^isFrameIdMatching(int id, int mask)$/;"	f	file:	signature:(int id, int mask)
isMultiFrame	id3tag.c	/^isMultiFrame(uint32_t frame_id)$/;"	f	file:	signature:(uint32_t frame_id)
isResamplingNecessary	util.c	/^isResamplingNecessary(SessionConfig_t const* cfg)$/;"	f	signature:(SessionConfig_t const* cfg)
isResamplingNecessary	util.h	/^    int     isResamplingNecessary(SessionConfig_t const* cfg);$/;"	p	signature:(SessionConfig_t const* cfg)
isSameDescriptor	id3tag.c	/^isSameDescriptor(FrameDataNode const *node, char const *dsc)$/;"	f	file:	signature:(FrameDataNode const *node, char const *dsc)
isSameDescriptorUcs2	id3tag.c	/^isSameDescriptorUcs2(FrameDataNode const *node, unsigned short const *dsc)$/;"	f	file:	signature:(FrameDataNode const *node, unsigned short const *dsc)
isSameLang	id3tag.c	/^isSameLang(char const *l1, char const *l2)$/;"	f	file:	signature:(char const *l1, char const *l2)
is_lame_global_flags_valid	lame.c	/^is_lame_global_flags_valid(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
is_lame_global_flags_valid	lame_global_flags.h	/^int     is_lame_global_flags_valid(const lame_global_flags * gfp);$/;"	p	signature:(const lame_global_flags * gfp)
is_lame_internal_flags_valid	lame.c	/^is_lame_internal_flags_valid(const lame_internal_flags * gfc)$/;"	f	signature:(const lame_internal_flags * gfc)
is_lame_internal_flags_valid	util.h	/^    int     is_lame_internal_flags_valid(const lame_internal_flags * gfp);$/;"	p	signature:(const lame_internal_flags * gfp)
iteration_finish_one	quantize.c	/^iteration_finish_one(lame_internal_flags * gfc, int gr, int ch)$/;"	f	file:	signature:(lame_internal_flags * gfc, int gr, int ch)
iteration_init	quantize_pvt.c	/^iteration_init(lame_internal_flags * gfc)$/;"	f	signature:(lame_internal_flags * gfc)
iteration_init	quantize_pvt.h	/^void    iteration_init(lame_internal_flags * gfc);$/;"	p	signature:(lame_internal_flags * gfc)
iteration_init_init	util.h	/^        int     iteration_init_init;$/;"	m	struct:lame_internal_flags	access:public
iteration_loop	util.h	/^        iteration_loop_t iteration_loop;$/;"	m	struct:lame_internal_flags	access:public
iteration_loop_t	util.h	/^    typedef void (*iteration_loop_t) (lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	t
itime	util.h	/^        double  itime[2]; \/* float precision seems to be not enough *\/$/;"	m	struct:__anon8	access:public
ix_max	takehiro.c	/^ix_max(const int *ix, const int *end)$/;"	f	file:	signature:(const int *ix, const int *end)
js	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
k_34_4	vbrquantize.c	/^k_34_4(DOUBLEX x[4], int l3[4])$/;"	f	file:	signature:(DOUBLEX x[4], int l3[4])
l	id3tag.h	/^            char   *l;       \/* ptr to Latin-1 chars             *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
l	l3side.h	/^    FLOAT   l[SBMAX_l];$/;"	m	struct:__anon31	access:public
l	l3side.h	/^    int     l[1 + SBMAX_l];$/;"	m	struct:__anon30	access:public
l	util.h	/^        FLOAT   l[SBMAX_l];  \/* ATH for sfbs in long blocks *\/$/;"	m	struct:__anon3	access:public
l	util.h	/^        PsyConst_CB2SB_t l;$/;"	m	struct:__anon5	access:public
l3_enc	l3side.h	/^    int     l3_enc[576];$/;"	m	struct:__anon33	access:public
l3_side	util.h	/^        III_side_info_t l3_side;$/;"	m	struct:lame_internal_flags	access:public
l_to_s	util.h	/^        PsyConst_CB2SB_t l_to_s;$/;"	m	struct:__anon5	access:public
lame_allocated_gfp	lame_global_flags.h	/^    int     lame_allocated_gfp; \/* is this struct owned by calling$/;"	m	struct:lame_global_struct	access:public
lame_bitrate_block_type_hist	lame.c	/^lame_bitrate_block_type_hist(const lame_global_flags * gfp, int bitrate_btype_count[14][6])$/;"	f	signature:(const lame_global_flags * gfp, int bitrate_btype_count[14][6])
lame_bitrate_block_type_hist	lame.h	/^void CDECL lame_bitrate_block_type_hist ($/;"	p	signature:( const lame_global_flags * gfp, int bitrate_btype_count[14][6] )
lame_bitrate_hist	lame.c	/^lame_bitrate_hist(const lame_global_flags * gfp, int bitrate_count[14])$/;"	f	signature:(const lame_global_flags * gfp, int bitrate_count[14])
lame_bitrate_hist	lame.h	/^void CDECL lame_bitrate_hist($/;"	p	signature:( const lame_global_flags * gfp, int bitrate_count[14] )
lame_bitrate_kbps	lame.c	/^lame_bitrate_kbps(const lame_global_flags * gfp, int bitrate_kbps[14])$/;"	f	signature:(const lame_global_flags * gfp, int bitrate_kbps[14])
lame_bitrate_kbps	lame.h	/^void CDECL lame_bitrate_kbps($/;"	p	signature:( const lame_global_flags * gfp, int bitrate_kbps [14] )
lame_bitrate_stereo_mode_hist	lame.c	/^lame_bitrate_stereo_mode_hist(const lame_global_flags * gfp, int bitrate_stmode_count[14][4])$/;"	f	signature:(const lame_global_flags * gfp, int bitrate_stmode_count[14][4])
lame_bitrate_stereo_mode_hist	lame.h	/^void CDECL lame_bitrate_stereo_mode_hist ($/;"	p	signature:( const lame_global_flags * gfp, int bitrate_stmode_count[14][4] )
lame_block_type_hist	lame.c	/^lame_block_type_hist(const lame_global_flags * gfp, int btype_count[6])$/;"	f	signature:(const lame_global_flags * gfp, int btype_count[6])
lame_block_type_hist	lame.h	/^void CDECL lame_block_type_hist ($/;"	p	signature:( const lame_global_flags * gfp, int btype_count[6] )
lame_calloc	id3tag.c	63;"	d	file:
lame_close	lame.c	/^lame_close(lame_global_flags * gfp)$/;"	f	signature:(lame_global_flags * gfp)
lame_close	lame.h	/^int  CDECL lame_close (lame_global_flags *);$/;"	p	signature:(lame_global_flags *)
lame_copy_inbuffer	lame.c	/^lame_copy_inbuffer(lame_internal_flags* gfc, $/;"	f	file:	signature:(lame_internal_flags* gfc, void const* l, void const* r, int nsamples, enum PCMSampleType pcm_type, int jump, FLOAT s)
lame_debugf	util.c	/^lame_debugf(const lame_internal_flags* gfc, const char *format, ...)$/;"	f	signature:(const lame_internal_flags* gfc, const char *format, ...)
lame_debugf	util.h	/^    extern void lame_debugf(const lame_internal_flags * gfc, const char *, ...);$/;"	p	signature:(const lame_internal_flags * gfc, const char *, ...)
lame_decode	lame.h	/^int CDECL lame_decode($/;"	p	signature:( unsigned char * mp3buf, int len, short pcm_l[], short pcm_r[] )
lame_decode	mpglib_interface.c	/^int CDECL lame_decode($/;"	p	file:	signature:( unsigned char * mp3buf, int len, short pcm_l[], short pcm_r[] )
lame_decode	mpglib_interface.c	/^lame_decode(unsigned char *buffer, int len, short pcm_l[], short pcm_r[])$/;"	f	signature:(unsigned char *buffer, int len, short pcm_l[], short pcm_r[])
lame_decode1	lame.h	/^int CDECL lame_decode1($/;"	p	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[] )
lame_decode1	mpglib_interface.c	/^int CDECL lame_decode1($/;"	p	file:	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[] )
lame_decode1	mpglib_interface.c	/^lame_decode1(unsigned char *buffer, int len, short pcm_l[], short pcm_r[])$/;"	f	signature:(unsigned char *buffer, int len, short pcm_l[], short pcm_r[])
lame_decode1_headers	lame.h	/^int CDECL lame_decode1_headers($/;"	p	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data )
lame_decode1_headers	mpglib_interface.c	/^int CDECL lame_decode1_headers($/;"	p	file:	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data )
lame_decode1_headers	mpglib_interface.c	/^lame_decode1_headers(unsigned char *buffer,$/;"	f	signature:(unsigned char *buffer, int len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data)
lame_decode1_headersB	lame.h	/^int CDECL lame_decode1_headersB($/;"	p	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data, int *enc_delay, int *enc_padding )
lame_decode1_headersB	mpglib_interface.c	/^int CDECL lame_decode1_headersB($/;"	p	file:	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data, int *enc_delay, int *enc_padding )
lame_decode1_headersB	mpglib_interface.c	/^lame_decode1_headersB(unsigned char *buffer,$/;"	f	signature:(unsigned char *buffer, int len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data, int *enc_delay, int *enc_padding)
lame_decode_exit	lame.h	/^int CDECL lame_decode_exit(void);$/;"	p	signature:(void)
lame_decode_exit	mpglib_interface.c	/^int CDECL lame_decode_exit(void);$/;"	p	file:	signature:(void)
lame_decode_exit	mpglib_interface.c	/^lame_decode_exit(void)$/;"	f	signature:(void)
lame_decode_headers	lame.h	/^int CDECL lame_decode_headers($/;"	p	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data )
lame_decode_headers	mpglib_interface.c	/^int CDECL lame_decode_headers($/;"	p	file:	signature:( unsigned char* mp3buf, int len, short pcm_l[], short pcm_r[], mp3data_struct* mp3data )
lame_decode_headers	mpglib_interface.c	/^lame_decode_headers(unsigned char *buffer,$/;"	f	signature:(unsigned char *buffer, int len, short pcm_l[], short pcm_r[], mp3data_struct * mp3data)
lame_decode_init	lame.h	/^int CDECL lame_decode_init(void);$/;"	p	signature:(void)
lame_decode_init	mpglib_interface.c	/^int CDECL lame_decode_init(void);$/;"	p	file:	signature:(void)
lame_decode_init	mpglib_interface.c	/^lame_decode_init(void)$/;"	f	signature:(void)
lame_encode_buffer	lame.c	/^lame_encode_buffer(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, const short int pcm_l[], const short int pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer	lame.h	/^int CDECL lame_encode_buffer ($/;"	p	signature:( lame_global_flags* gfp, const short int buffer_l [], const short int buffer_r [], const int nsamples, unsigned char* mp3buf, const int mp3buf_size )
lame_encode_buffer_float	lame.c	/^lame_encode_buffer_float(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, const float pcm_l[], const float pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_float	lame.h	/^int CDECL lame_encode_buffer_float($/;"	p	signature:( lame_global_flags* gfp, const float pcm_l [], const float pcm_r [], const int nsamples, unsigned char* mp3buf, const int mp3buf_size )
lame_encode_buffer_ieee_double	lame.c	/^lame_encode_buffer_ieee_double(lame_t gfp,$/;"	f	signature:(lame_t gfp, const double pcm_l[], const double pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_ieee_double	lame.h	/^int CDECL lame_encode_buffer_ieee_double($/;"	p	signature:( lame_t gfp, const double pcm_l [], const double pcm_r [], const int nsamples, unsigned char * mp3buf, const int mp3buf_size)
lame_encode_buffer_ieee_float	lame.c	/^lame_encode_buffer_ieee_float(lame_t gfp,$/;"	f	signature:(lame_t gfp, const float pcm_l[], const float pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_ieee_float	lame.h	/^int CDECL lame_encode_buffer_ieee_float($/;"	p	signature:( lame_t gfp, const float pcm_l [], const float pcm_r [], const int nsamples, unsigned char * mp3buf, const int mp3buf_size)
lame_encode_buffer_int	lame.c	/^lame_encode_buffer_int(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, const int pcm_l[], const int pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_int	lame.h	/^int CDECL lame_encode_buffer_int($/;"	p	signature:( lame_global_flags* gfp, const int buffer_l [], const int buffer_r [], const int nsamples, unsigned char* mp3buf, const int mp3buf_size )
lame_encode_buffer_interleaved	lame.c	/^lame_encode_buffer_interleaved(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, short int pcm[], int nsamples, unsigned char *mp3buf, int mp3buf_size)
lame_encode_buffer_interleaved	lame.h	/^int CDECL lame_encode_buffer_interleaved($/;"	p	signature:( lame_global_flags* gfp, short int pcm[], int num_samples, unsigned char* mp3buf, int mp3buf_size )
lame_encode_buffer_interleaved_ieee_double	lame.c	/^lame_encode_buffer_interleaved_ieee_double(lame_t gfp,$/;"	f	signature:(lame_t gfp, const double pcm[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_interleaved_ieee_double	lame.h	/^int CDECL lame_encode_buffer_interleaved_ieee_double($/;"	p	signature:( lame_t gfp, const double pcm[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size)
lame_encode_buffer_interleaved_ieee_float	lame.c	/^lame_encode_buffer_interleaved_ieee_float(lame_t gfp,$/;"	f	signature:(lame_t gfp, const float pcm[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_interleaved_ieee_float	lame.h	/^int CDECL lame_encode_buffer_interleaved_ieee_float($/;"	p	signature:( lame_t gfp, const float pcm[], const int nsamples, unsigned char * mp3buf, const int mp3buf_size)
lame_encode_buffer_long	lame.c	/^lame_encode_buffer_long(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, const long pcm_l[], const long pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_long	lame.h	/^int CDECL lame_encode_buffer_long($/;"	p	signature:( lame_global_flags* gfp, const long buffer_l [], const long buffer_r [], const int nsamples, unsigned char* mp3buf, const int mp3buf_size )
lame_encode_buffer_long2	lame.c	/^lame_encode_buffer_long2(lame_global_flags * gfp,$/;"	f	signature:(lame_global_flags * gfp, const long pcm_l[], const long pcm_r[], const int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_long2	lame.h	/^int CDECL lame_encode_buffer_long2($/;"	p	signature:( lame_global_flags* gfp, const long buffer_l [], const long buffer_r [], const int nsamples, unsigned char* mp3buf, const int mp3buf_size )
lame_encode_buffer_sample_t	lame.c	/^lame_encode_buffer_sample_t(lame_internal_flags * gfc,$/;"	f	file:	signature:(lame_internal_flags * gfc, int nsamples, unsigned char *mp3buf, const int mp3buf_size)
lame_encode_buffer_template	lame.c	/^lame_encode_buffer_template(lame_global_flags * gfp,$/;"	f	file:	signature:(lame_global_flags * gfp, void const* buffer_l, void const* buffer_r, const int nsamples, unsigned char *mp3buf, const int mp3buf_size, enum PCMSampleType pcm_type, int aa, FLOAT norm)
lame_encode_finish	lame.c	/^lame_encode_finish(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)$/;"	f	signature:(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)
lame_encode_finish	lame.c	/^lame_encode_finish(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size);$/;"	p	file:	signature:(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)
lame_encode_finish	lame.h	/^int CDECL lame_encode_finish($/;"	p	signature:( lame_global_flags* gfp, unsigned char* mp3buf, int size )
lame_encode_flush	lame.c	/^lame_encode_flush(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)$/;"	f	signature:(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)
lame_encode_flush	lame.h	/^int CDECL lame_encode_flush($/;"	p	signature:( lame_global_flags * gfp, unsigned char* mp3buf, int size)
lame_encode_flush_nogap	lame.c	/^lame_encode_flush_nogap(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)$/;"	f	signature:(lame_global_flags * gfp, unsigned char *mp3buffer, int mp3buffer_size)
lame_encode_flush_nogap	lame.h	/^int CDECL lame_encode_flush_nogap($/;"	p	signature:( lame_global_flags * gfp, unsigned char* mp3buf, int size)
lame_encode_frame_init	encoder.c	/^lame_encode_frame_init(lame_internal_flags * gfc, const sample_t *const inbuf[2])$/;"	f	file:	signature:(lame_internal_flags * gfc, const sample_t *const inbuf[2])
lame_encode_frame_init	util.h	/^        int     lame_encode_frame_init;$/;"	m	struct:lame_internal_flags	access:public
lame_encode_mp3_frame	encoder.c	/^lame_encode_mp3_frame(       \/* Output *\/$/;"	f	signature:( lame_internal_flags * gfc, sample_t const *inbuf_l, sample_t const *inbuf_r, unsigned char *mp3buf, int mp3buf_size)
lame_encode_mp3_frame	encoder.h	/^int     lame_encode_mp3_frame(lame_internal_flags * gfc,$/;"	p	signature:(lame_internal_flags * gfc, sample_t const *inbuf_l, sample_t const *inbuf_r, unsigned char *mp3buf, int mp3buf_size)
lame_errorcodes_t	lame.h	/^} lame_errorcodes_t;$/;"	t	typeref:enum:__anon21
lame_errorcodes_t	lameerror.h	/^} lame_errorcodes_t;$/;"	t	typeref:enum:__anon28
lame_errorf	util.c	/^lame_errorf(const lame_internal_flags* gfc, const char *format, ...)$/;"	f	signature:(const lame_internal_flags* gfc, const char *format, ...)
lame_errorf	util.h	/^    extern void lame_errorf(const lame_internal_flags * gfc, const char *, ...);$/;"	p	signature:(const lame_internal_flags * gfc, const char *, ...)
lame_get_ATHcurve	set_get.c	/^lame_get_ATHcurve(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ATHcurve	set_get.h	/^    float CDECL lame_get_ATHcurve(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ATHlower	lame.h	/^float CDECL lame_get_ATHlower(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ATHlower	set_get.c	/^lame_get_ATHlower(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ATHonly	lame.h	/^int CDECL lame_get_ATHonly(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ATHonly	set_get.c	/^lame_get_ATHonly(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ATHshort	lame.h	/^int CDECL lame_get_ATHshort(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ATHshort	set_get.c	/^lame_get_ATHshort(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ATHtype	lame.h	/^int CDECL lame_get_ATHtype(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ATHtype	set_get.c	/^lame_get_ATHtype(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_AudiophileGain	lame.h	/^int CDECL lame_get_AudiophileGain(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_AudiophileGain	set_get.c	/^lame_get_AudiophileGain(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_PeakSample	lame.h	/^float CDECL lame_get_PeakSample(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_PeakSample	set_get.c	/^lame_get_PeakSample(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_RadioGain	lame.h	/^int CDECL lame_get_RadioGain(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_RadioGain	set_get.c	/^lame_get_RadioGain(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ReplayGain_decode	lame.h	/^int CDECL lame_get_ReplayGain_decode(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ReplayGain_decode	set_get.c	/^int CDECL lame_get_ReplayGain_decode(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_ReplayGain_decode	set_get.c	/^lame_get_ReplayGain_decode(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ReplayGain_input	lame.h	/^int CDECL lame_get_ReplayGain_input(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ReplayGain_input	set_get.c	/^int CDECL lame_get_ReplayGain_input(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_ReplayGain_input	set_get.c	/^lame_get_ReplayGain_input(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR	lame.h	/^vbr_mode CDECL lame_get_VBR(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR	set_get.c	/^lame_get_VBR(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_hard_min	lame.h	/^int CDECL lame_get_VBR_hard_min(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_hard_min	set_get.c	/^lame_get_VBR_hard_min(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_max_bitrate_kbps	lame.h	/^int CDECL lame_get_VBR_max_bitrate_kbps(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_max_bitrate_kbps	set_get.c	/^lame_get_VBR_max_bitrate_kbps(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_mean_bitrate_kbps	lame.h	/^int CDECL lame_get_VBR_mean_bitrate_kbps(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_mean_bitrate_kbps	set_get.c	/^lame_get_VBR_mean_bitrate_kbps(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_min_bitrate_kbps	lame.h	/^int CDECL lame_get_VBR_min_bitrate_kbps(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_min_bitrate_kbps	set_get.c	/^lame_get_VBR_min_bitrate_kbps(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_q	lame.h	/^int CDECL lame_get_VBR_q(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_q	set_get.c	/^lame_get_VBR_q(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_VBR_quality	lame.h	/^float CDECL lame_get_VBR_quality(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_VBR_quality	set_get.c	/^lame_get_VBR_quality(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_allow_diff_short	lame.h	/^int CDECL lame_get_allow_diff_short(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_allow_diff_short	set_get.c	/^lame_get_allow_diff_short(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_analysis	lame.h	/^int CDECL lame_get_analysis(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_analysis	set_get.c	/^lame_get_analysis(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_athaa_loudapprox	lame.h	/^int CDECL lame_get_athaa_loudapprox( const lame_global_flags *);$/;"	p	signature:( const lame_global_flags *)
lame_get_athaa_loudapprox	set_get.c	/^int CDECL lame_get_athaa_loudapprox(const lame_global_flags * gfp);$/;"	p	file:	signature:(const lame_global_flags * gfp)
lame_get_athaa_loudapprox	set_get.c	/^lame_get_athaa_loudapprox(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_athaa_sensitivity	lame.h	/^float CDECL lame_get_athaa_sensitivity( const lame_global_flags* );$/;"	p	signature:( const lame_global_flags* )
lame_get_athaa_sensitivity	set_get.c	/^lame_get_athaa_sensitivity(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_athaa_type	lame.h	/^int CDECL lame_get_athaa_type( const lame_global_flags *);$/;"	p	signature:( const lame_global_flags *)
lame_get_athaa_type	set_get.c	/^lame_get_athaa_type(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_bWriteVbrTag	lame.h	/^int CDECL lame_get_bWriteVbrTag(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_bWriteVbrTag	set_get.c	/^lame_get_bWriteVbrTag(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_bitrate	lame.h	/^int CDECL lame_get_bitrate(int mpeg_version, int table_index);$/;"	p	signature:(int mpeg_version, int table_index)
lame_get_bitrate	tables.c	/^lame_get_bitrate(int mpeg_version, int table_index)$/;"	f	signature:(int mpeg_version, int table_index)
lame_get_brate	lame.h	/^int CDECL lame_get_brate(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_brate	set_get.c	/^lame_get_brate(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_compression_ratio	lame.h	/^float CDECL lame_get_compression_ratio(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_compression_ratio	set_get.c	/^lame_get_compression_ratio(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_copyright	lame.h	/^int CDECL lame_get_copyright(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_copyright	set_get.c	/^lame_get_copyright(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_cwlimit	lame.h	/^int CDECL lame_get_cwlimit(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_cwlimit	set_get.c	/^int     lame_get_cwlimit(const lame_global_flags * gfp);$/;"	p	file:	signature:(const lame_global_flags * gfp)
lame_get_cwlimit	set_get.c	/^lame_get_cwlimit(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_decode_on_the_fly	lame.h	/^int CDECL lame_get_decode_on_the_fly(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_decode_on_the_fly	set_get.c	/^lame_get_decode_on_the_fly(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_decode_only	lame.h	/^int CDECL lame_get_decode_only(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_decode_only	set_get.c	/^lame_get_decode_only(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_disable_reservoir	lame.h	/^int CDECL lame_get_disable_reservoir(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_disable_reservoir	set_get.c	/^lame_get_disable_reservoir(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_emphasis	lame.h	/^int CDECL lame_get_emphasis(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_emphasis	set_get.c	/^lame_get_emphasis(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_encoder_delay	lame.h	/^int CDECL lame_get_encoder_delay(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_encoder_delay	set_get.c	/^lame_get_encoder_delay(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_encoder_padding	lame.h	/^int CDECL lame_get_encoder_padding(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_encoder_padding	set_get.c	/^lame_get_encoder_padding(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_error_protection	lame.h	/^int CDECL lame_get_error_protection(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_error_protection	set_get.c	/^lame_get_error_protection(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_exp_nspsytune	lame.h	/^int CDECL lame_get_exp_nspsytune(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_exp_nspsytune	set_get.c	/^lame_get_exp_nspsytune(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_experimentalX	lame.h	/^int CDECL lame_get_experimentalX(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_experimentalX	set_get.c	/^lame_get_experimentalX(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_experimentalY	lame.h	/^int CDECL lame_get_experimentalY(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_experimentalY	set_get.c	/^lame_get_experimentalY(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_experimentalZ	lame.h	/^int CDECL lame_get_experimentalZ(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_experimentalZ	set_get.c	/^lame_get_experimentalZ(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_extension	lame.h	/^int CDECL lame_get_extension(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_extension	set_get.c	/^lame_get_extension(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_findPeakSample	lame.h	/^int CDECL lame_get_findPeakSample(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_findPeakSample	set_get.c	/^int CDECL lame_get_findPeakSample(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_findPeakSample	set_get.c	/^lame_get_findPeakSample(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_findReplayGain	lame.h	/^int CDECL lame_get_findReplayGain(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_findReplayGain	set_get.c	/^lame_get_findReplayGain(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_force_ms	lame.h	/^int CDECL lame_get_force_ms(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_force_ms	set_get.c	/^lame_get_force_ms(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_force_short_blocks	lame.h	/^int CDECL lame_get_force_short_blocks(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_force_short_blocks	set_get.c	/^lame_get_force_short_blocks(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_frameNum	lame.h	/^int CDECL lame_get_frameNum(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_frameNum	set_get.c	/^lame_get_frameNum(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_framesize	lame.h	/^int CDECL lame_get_framesize(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_framesize	set_get.c	/^lame_get_framesize(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_free_format	lame.h	/^int CDECL lame_get_free_format(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_free_format	set_get.c	/^lame_get_free_format(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_highpassfreq	lame.h	/^int CDECL lame_get_highpassfreq(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_highpassfreq	set_get.c	/^lame_get_highpassfreq(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_highpasswidth	lame.h	/^int CDECL lame_get_highpasswidth(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_highpasswidth	set_get.c	/^lame_get_highpasswidth(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_id3v1_tag	id3tag.c	/^lame_get_id3v1_tag(lame_t gfp, unsigned char *buffer, size_t size)$/;"	f	signature:(lame_t gfp, unsigned char *buffer, size_t size)
lame_get_id3v1_tag	lame.h	/^size_t CDECL lame_get_id3v1_tag(lame_t gfp, unsigned char* buffer, size_t size);$/;"	p	signature:(lame_t gfp, unsigned char* buffer, size_t size)
lame_get_id3v2_tag	id3tag.c	/^lame_get_id3v2_tag(lame_t gfp, unsigned char *buffer, size_t size)$/;"	f	signature:(lame_t gfp, unsigned char *buffer, size_t size)
lame_get_id3v2_tag	lame.h	/^size_t CDECL lame_get_id3v2_tag(lame_t gfp, unsigned char* buffer, size_t size);$/;"	p	signature:(lame_t gfp, unsigned char* buffer, size_t size)
lame_get_in_samplerate	lame.h	/^int CDECL lame_get_in_samplerate(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_in_samplerate	set_get.c	/^lame_get_in_samplerate(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_interChRatio	lame.h	/^float CDECL lame_get_interChRatio(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_interChRatio	set_get.c	/^lame_get_interChRatio(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_lametag_frame	VbrTag.c	/^lame_get_lametag_frame(lame_global_flags const *gfp, unsigned char *buffer, size_t size)$/;"	f	signature:(lame_global_flags const *gfp, unsigned char *buffer, size_t size)
lame_get_lametag_frame	lame.h	/^size_t CDECL lame_get_lametag_frame($/;"	p	signature:( const lame_global_flags *, unsigned char* buffer, size_t size)
lame_get_lowpassfreq	lame.h	/^int CDECL lame_get_lowpassfreq(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_lowpassfreq	set_get.c	/^lame_get_lowpassfreq(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_lowpasswidth	lame.h	/^int CDECL lame_get_lowpasswidth(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_lowpasswidth	set_get.c	/^lame_get_lowpasswidth(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_maskingadjust	set_get.c	/^lame_get_maskingadjust(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_maskingadjust	set_get.h	/^    float CDECL lame_get_maskingadjust(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_maskingadjust_short	set_get.c	/^lame_get_maskingadjust_short(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_maskingadjust_short	set_get.h	/^    float CDECL lame_get_maskingadjust_short(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_mf_samples_to_encode	lame.h	/^int CDECL lame_get_mf_samples_to_encode( const lame_global_flags*  gfp );$/;"	p	signature:( const lame_global_flags* gfp )
lame_get_mf_samples_to_encode	set_get.c	/^lame_get_mf_samples_to_encode(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_mode	lame.h	/^MPEG_mode CDECL lame_get_mode(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_mode	set_get.c	/^lame_get_mode(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_mode_automs	lame.h	/^int CDECL lame_get_mode_automs(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_mode_automs	set_get.c	/^int CDECL lame_get_mode_automs(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_mode_automs	set_get.c	/^lame_get_mode_automs(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_msfix	lame.h	/^float CDECL lame_get_msfix(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_msfix	set_get.c	/^lame_get_msfix(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_noATH	lame.h	/^int CDECL lame_get_noATH(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_noATH	set_get.c	/^lame_get_noATH(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_no_short_blocks	lame.h	/^int CDECL lame_get_no_short_blocks(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_no_short_blocks	set_get.c	/^lame_get_no_short_blocks(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_noclipGainChange	lame.h	/^int CDECL lame_get_noclipGainChange(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_noclipGainChange	set_get.c	/^lame_get_noclipGainChange(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_noclipScale	lame.h	/^float CDECL lame_get_noclipScale(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_noclipScale	set_get.c	/^lame_get_noclipScale(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_nogap_currentindex	lame.h	/^int CDECL lame_get_nogap_currentindex(const lame_global_flags*);$/;"	p	signature:(const lame_global_flags*)
lame_get_nogap_currentindex	set_get.c	/^lame_get_nogap_currentindex(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_nogap_total	lame.h	/^int CDECL lame_get_nogap_total(const lame_global_flags*);$/;"	p	signature:(const lame_global_flags*)
lame_get_nogap_total	set_get.c	/^lame_get_nogap_total(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_num_channels	lame.h	/^int CDECL lame_get_num_channels(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_num_channels	set_get.c	/^lame_get_num_channels(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_num_samples	lame.h	/^unsigned long CDECL lame_get_num_samples(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_num_samples	set_get.c	/^lame_get_num_samples(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_ogg	lame.h	/^int CDECL lame_get_ogg(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_ogg	set_get.c	/^int CDECL lame_get_ogg(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_ogg	set_get.c	/^lame_get_ogg(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_original	lame.h	/^int CDECL lame_get_original(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_original	set_get.c	/^lame_get_original(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_out_samplerate	lame.h	/^int CDECL lame_get_out_samplerate(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_out_samplerate	set_get.c	/^lame_get_out_samplerate(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_padding_type	lame.h	/^Padding_type CDECL lame_get_padding_type(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_padding_type	set_get.c	/^Padding_type CDECL lame_get_padding_type(const lame_global_flags *);$/;"	p	file:	signature:(const lame_global_flags *)
lame_get_padding_type	set_get.c	/^lame_get_padding_type(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_quality	lame.h	/^int CDECL lame_get_quality(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_quality	set_get.c	/^lame_get_quality(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_quant_comp	lame.h	/^int CDECL lame_get_quant_comp(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_quant_comp	set_get.c	/^lame_get_quant_comp(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_quant_comp_short	lame.h	/^int CDECL lame_get_quant_comp_short(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_quant_comp_short	set_get.c	/^lame_get_quant_comp_short(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_samplerate	lame.h	/^int CDECL lame_get_samplerate(int mpeg_version, int table_index);$/;"	p	signature:(int mpeg_version, int table_index)
lame_get_samplerate	tables.c	/^lame_get_samplerate(int mpeg_version, int table_index)$/;"	f	signature:(int mpeg_version, int table_index)
lame_get_scale	lame.h	/^float CDECL lame_get_scale(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_scale	set_get.c	/^lame_get_scale(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_scale_left	lame.h	/^float CDECL lame_get_scale_left(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_scale_left	set_get.c	/^lame_get_scale_left(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_scale_right	lame.h	/^float CDECL lame_get_scale_right(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_scale_right	set_get.c	/^lame_get_scale_right(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_sfscale	set_get.c	/^lame_get_sfscale(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_sfscale	set_get.h	/^    int CDECL lame_get_sfscale(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_short_threshold_lrm	set_get.c	/^lame_get_short_threshold_lrm(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_short_threshold_lrm	set_get.h	/^    float CDECL lame_get_short_threshold_lrm(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_short_threshold_s	set_get.c	/^lame_get_short_threshold_s(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_short_threshold_s	set_get.h	/^    float CDECL lame_get_short_threshold_s(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_size_mp3buffer	lame.h	/^int CDECL lame_get_size_mp3buffer( const lame_global_flags*  gfp );$/;"	p	signature:( const lame_global_flags* gfp )
lame_get_size_mp3buffer	set_get.c	/^lame_get_size_mp3buffer(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_strict_ISO	lame.h	/^int CDECL lame_get_strict_ISO(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_strict_ISO	set_get.c	/^lame_get_strict_ISO(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_subblock_gain	set_get.c	/^lame_get_subblock_gain(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_subblock_gain	set_get.h	/^    int CDECL lame_get_subblock_gain(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_substep	set_get.c	/^lame_get_substep(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_substep	set_get.h	/^    int CDECL lame_get_substep(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_totalframes	lame.h	/^int CDECL lame_get_totalframes(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_totalframes	set_get.c	/^lame_get_totalframes(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_useTemporal	lame.h	/^int CDECL lame_get_useTemporal(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_useTemporal	set_get.c	/^lame_get_useTemporal(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_version	lame.h	/^int CDECL lame_get_version(const lame_global_flags *);$/;"	p	signature:(const lame_global_flags *)
lame_get_version	set_get.c	/^lame_get_version(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_get_write_id3tag_automatic	lame.h	/^int CDECL lame_get_write_id3tag_automatic(lame_global_flags const* gfp);$/;"	p	signature:(lame_global_flags const* gfp)
lame_get_write_id3tag_automatic	set_get.c	/^lame_get_write_id3tag_automatic(lame_global_flags const *gfp)$/;"	f	signature:(lame_global_flags const *gfp)
lame_global_flags	lame.h	/^typedef struct lame_global_struct lame_global_flags;$/;"	t	typeref:struct:lame_global_struct
lame_global_struct	lame_global_flags.h	/^struct lame_global_struct {$/;"	s
lame_global_struct::ATH_lower_db	lame_global_flags.h	/^    float   ATH_lower_db;    \/* lower ATH by this many db            *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::ATHcurve	lame_global_flags.h	/^    float   ATHcurve;        \/* change ATH formula 4 shape           *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::ATHonly	lame_global_flags.h	/^    int     ATHonly;         \/* only use ATH                         *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::ATHshort	lame_global_flags.h	/^    int     ATHshort;        \/* only use ATH for short blocks        *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::ATHtype	lame_global_flags.h	/^    int     ATHtype;         \/* select ATH formula                   *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR	lame_global_flags.h	/^    vbr_mode VBR;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_hard_min	lame_global_flags.h	/^    int     VBR_hard_min;    \/* strictly enforce VBR_min_bitrate$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_max_bitrate_kbps	lame_global_flags.h	/^    int     VBR_max_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_mean_bitrate_kbps	lame_global_flags.h	/^    int     VBR_mean_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_min_bitrate_kbps	lame_global_flags.h	/^    int     VBR_min_bitrate_kbps;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_q	lame_global_flags.h	/^    int     VBR_q;           \/* Range [0,...,9] *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::VBR_q_frac	lame_global_flags.h	/^    float   VBR_q_frac;      \/* Range [0,...,1[ *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::__anon25::debugf	lame_global_flags.h	/^        void    (*debugf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
lame_global_struct::__anon25::errorf	lame_global_flags.h	/^        void    (*errorf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
lame_global_struct::__anon25::msgf	lame_global_flags.h	/^        void    (*msgf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
lame_global_struct::__anon26::amd3dnow	lame_global_flags.h	/^        int     amd3dnow;$/;"	m	struct:lame_global_struct::__anon26	access:public
lame_global_struct::__anon26::mmx	lame_global_flags.h	/^        int     mmx;$/;"	m	struct:lame_global_struct::__anon26	access:public
lame_global_struct::__anon26::sse	lame_global_flags.h	/^        int     sse;$/;"	m	struct:lame_global_struct::__anon26	access:public
lame_global_struct::analysis	lame_global_flags.h	/^    int     analysis;        \/* collect data for a MP3 frame analyzer?      *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::asm_optimizations	lame_global_flags.h	/^    } asm_optimizations;$/;"	m	struct:lame_global_struct	typeref:struct:lame_global_struct::__anon26	access:public
lame_global_struct::athaa_sensitivity	lame_global_flags.h	/^    float   athaa_sensitivity; \/* dB, tune active region of auto-level *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::athaa_type	lame_global_flags.h	/^    int     athaa_type;      \/* select ATH auto-adjust scheme        *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::attackthre	lame_global_flags.h	/^    float   attackthre;      \/* attack threshold for L\/R\/M channel *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::attackthre_s	lame_global_flags.h	/^    float   attackthre_s;    \/* attack threshold for S channel *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::brate	lame_global_flags.h	/^    int     brate;           \/* bitrate                                    *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::class_id	lame_global_flags.h	/^    unsigned int class_id;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::compression_ratio	lame_global_flags.h	/^    float   compression_ratio; \/* sizeof(wav file)\/sizeof(mp3 file)          *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::copyright	lame_global_flags.h	/^    int     copyright;       \/* mark as copyright. default=0           *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::decode_on_the_fly	lame_global_flags.h	/^    int     decode_on_the_fly; \/* decode on the fly? default=0                *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::decode_only	lame_global_flags.h	/^    int     decode_only;     \/* use lame\/mpglib to convert mp3 to wav       *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::disable_reservoir	lame_global_flags.h	/^    int     disable_reservoir; \/* use bit reservoir?                     *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::emphasis	lame_global_flags.h	/^    int     emphasis;        \/* Input PCM is emphased PCM (for$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::error_protection	lame_global_flags.h	/^    int     error_protection; \/* use 2 bytes per frame for a CRC$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::exp_nspsytune	lame_global_flags.h	/^    int     exp_nspsytune;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::experimentalY	lame_global_flags.h	/^    int     experimentalY;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::experimentalZ	lame_global_flags.h	/^    int     experimentalZ;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::extension	lame_global_flags.h	/^    int     extension;       \/* the MP3 'private extension' bit.$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::findReplayGain	lame_global_flags.h	/^    int     findReplayGain;  \/* find the RG value? default=0       *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::force_ms	lame_global_flags.h	/^    int     force_ms;        \/* force M\/S mode.  requires mode=1            *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::free_format	lame_global_flags.h	/^    int     free_format;     \/* use free format? default=0                  *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::highpassfreq	lame_global_flags.h	/^    int     highpassfreq;    \/* freq in Hz. 0=lame choses.$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::highpasswidth	lame_global_flags.h	/^    int     highpasswidth;   \/* freq width of filter, in Hz$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::interChRatio	lame_global_flags.h	/^    float   interChRatio;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::internal_flags	lame_global_flags.h	/^    lame_internal_flags *internal_flags;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::lame_allocated_gfp	lame_global_flags.h	/^    int     lame_allocated_gfp; \/* is this struct owned by calling$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::lowpassfreq	lame_global_flags.h	/^    int     lowpassfreq;     \/* freq in Hz. 0=lame choses.$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::lowpasswidth	lame_global_flags.h	/^    int     lowpasswidth;    \/* freq width of filter, in Hz$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::maskingadjust	lame_global_flags.h	/^    float   maskingadjust;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::maskingadjust_short	lame_global_flags.h	/^    float   maskingadjust_short;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::mode	lame_global_flags.h	/^    MPEG_mode mode;          \/* see enum in lame.h$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::msfix	lame_global_flags.h	/^    float   msfix;           \/* Naoki's adjustment of Mid\/Side maskings *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::noATH	lame_global_flags.h	/^    int     noATH;           \/* disable ATH                          *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::nogap_current	lame_global_flags.h	/^    int     nogap_current;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::nogap_total	lame_global_flags.h	/^    int     nogap_total;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::noise_shaping	lame_global_flags.h	/^    int     noise_shaping;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::num_channels	lame_global_flags.h	/^    int     num_channels;    \/* input number of channels. default=2         *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::num_samples	lame_global_flags.h	/^    unsigned long num_samples; \/* number of samples. default=2^32-1           *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::original	lame_global_flags.h	/^    int     original;        \/* mark as original. default=1            *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::preset	lame_global_flags.h	/^    int     preset;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::quality	lame_global_flags.h	/^    int     quality;         \/* quality setting 0=best,  9=worst  default=5 *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::quant_comp	lame_global_flags.h	/^    int     quant_comp;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::quant_comp_short	lame_global_flags.h	/^    int     quant_comp_short;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::report	lame_global_flags.h	/^    } report;$/;"	m	struct:lame_global_struct	typeref:struct:lame_global_struct::__anon25	access:public
lame_global_struct::samplerate_in	lame_global_flags.h	/^    int     samplerate_in;   \/* input_samp_rate in Hz. default=44.1 kHz     *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::samplerate_out	lame_global_flags.h	/^    int     samplerate_out;  \/* output_samp_rate.$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::scale	lame_global_flags.h	/^    float   scale;           \/* scale input by this amount before encoding$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::scale_left	lame_global_flags.h	/^    float   scale_left;      \/* scale input of channel 0 (left) by this$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::scale_right	lame_global_flags.h	/^    float   scale_right;     \/* scale input of channel 1 (right) by this$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::short_blocks	lame_global_flags.h	/^    short_block_t short_blocks;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::strict_ISO	lame_global_flags.h	/^    int     strict_ISO;      \/* enforce ISO spec as much as possible   *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::subblock_gain	lame_global_flags.h	/^    int     subblock_gain;   \/*  0 = no, 1 = yes *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::substep_shaping	lame_global_flags.h	/^    int     substep_shaping;$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::tune	lame_global_flags.h	/^    int     tune;            \/* 0 off, 1 on *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::tune_value_a	lame_global_flags.h	/^    float   tune_value_a;    \/* used to pass values for debugging and stuff *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::useTemporal	lame_global_flags.h	/^    int     useTemporal;     \/* use temporal masking effect          *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::use_best_huffman	lame_global_flags.h	/^    int     use_best_huffman; \/* 0 = no.  1=outside loop  2=inside loop(slow) *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::write_id3tag_automatic	lame_global_flags.h	/^    int     write_id3tag_automatic; \/* 1 (default) writes ID3 tags, 0 not *\/$/;"	m	struct:lame_global_struct	access:public
lame_global_struct::write_lame_tag	lame_global_flags.h	/^    int     write_lame_tag;  \/* add Xing VBR tag?                           *\/$/;"	m	struct:lame_global_struct	access:public
lame_init	lame.c	/^lame_init(void)$/;"	f	signature:(void)
lame_init	lame.h	/^lame_global_flags * CDECL lame_init(void);$/;"	p	signature:(void)
lame_init_bitstream	lame.c	/^lame_init_bitstream(lame_global_flags * gfp)$/;"	f	signature:(lame_global_flags * gfp)
lame_init_bitstream	lame.h	/^int CDECL lame_init_bitstream($/;"	p	signature:( lame_global_flags * gfp)
lame_init_old	lame.c	/^lame_init_old(lame_global_flags * gfp)$/;"	f	file:	signature:(lame_global_flags * gfp)
lame_init_old	lame.h	/^int CDECL lame_init_old(lame_global_flags *);$/;"	p	signature:(lame_global_flags *)
lame_init_params	lame.c	/^lame_init_params(lame_global_flags * gfp)$/;"	f	signature:(lame_global_flags * gfp)
lame_init_params	lame.h	/^int CDECL lame_init_params(lame_global_flags *);$/;"	p	signature:(lame_global_flags *)
lame_init_params_ppflt	lame.c	/^lame_init_params_ppflt(lame_internal_flags * gfc)$/;"	f	file:	signature:(lame_internal_flags * gfc)
lame_init_qval	lame.c	/^lame_init_qval(lame_global_flags * gfp)$/;"	f	file:	signature:(lame_global_flags * gfp)
lame_internal_flags	VbrTag.h	/^typedef struct lame_internal_flags lame_internal_flags;$/;"	t	typeref:struct:lame_internal_flags
lame_internal_flags	encoder.h	/^typedef struct lame_internal_flags lame_internal_flags;$/;"	t	typeref:struct:lame_internal_flags
lame_internal_flags	lame_global_flags.h	/^typedef struct lame_internal_flags lame_internal_flags;$/;"	t	typeref:struct:lame_internal_flags
lame_internal_flags	util.h	/^    struct lame_internal_flags {$/;"	s
lame_internal_flags	util.h	/^    typedef struct lame_internal_flags lame_internal_flags;$/;"	t	typeref:struct:lame_internal_flags
lame_internal_flags::ATH	util.h	/^        ATH_t  *ATH;         \/* all ATH related stuff *\/$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::CPU_features	util.h	/^        } CPU_features;$/;"	m	struct:lame_internal_flags	typeref:struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::VBR_seek_table	util.h	/^        VBR_seek_info_t VBR_seek_table; \/* used for Xing VBR header *\/$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::__anon15::AMD_3DNow	util.h	/^            unsigned int AMD_3DNow:1; \/* K6-2, K6-III, Athlon      *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::__anon15::MMX	util.h	/^            unsigned int MMX:1; \/* Pentium MMX, Pentium II...IV, K6, K6-2,$/;"	m	struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::__anon15::SSE	util.h	/^            unsigned int SSE:1; \/* Pentium III, Pentium 4    *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::__anon15::SSE2	util.h	/^            unsigned int SSE2:1; \/* Pentium 4, K8             *\/$/;"	m	struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::__anon15::_unused	util.h	/^            unsigned int _unused:28;$/;"	m	struct:lame_internal_flags::__anon15	access:public
lame_internal_flags::_unused	util.h	/^        uint16_t _unused;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::bs	util.h	/^        Bit_stream_struc bs;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::cd_psy	util.h	/^        PsyConst_t *cd_psy;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::cfg	util.h	/^        SessionConfig_t cfg;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::choose_table	util.h	/^        int     (*choose_table) (const int *ix, const int *const end, int *const s);$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::class_id	util.h	/^        unsigned long class_id;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::fft_fht	util.h	/^        void    (*fft_fht) (FLOAT *, int);$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::fill_buffer_resample_init	util.h	/^        int     fill_buffer_resample_init;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::hip	util.h	/^        hip_t hip;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::init_xrpow_core	util.h	/^        void    (*init_xrpow_core) (gr_info * const cod_info, FLOAT xrpow[576], int upper,$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::iteration_init_init	util.h	/^        int     iteration_init_init;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::iteration_loop	util.h	/^        iteration_loop_t iteration_loop;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::l3_side	util.h	/^        III_side_info_t l3_side;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::lame_encode_frame_init	util.h	/^        int     lame_encode_frame_init;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::nMusicCRC	util.h	/^        uint16_t nMusicCRC;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::ov_enc	util.h	/^        EncResult_t ov_enc;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::ov_psy	util.h	/^        PsyResult_t ov_psy;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::ov_rpg	util.h	/^        RpgResult_t ov_rpg;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::pinfo	util.h	/^        plotting_data *pinfo;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::report_dbg	util.h	/^        lame_report_function report_dbg;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::report_err	util.h	/^        lame_report_function report_err;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::report_msg	util.h	/^        lame_report_function report_msg;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::scalefac_band	util.h	/^        scalefac_struct scalefac_band;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::sv_enc	util.h	/^        EncStateVar_t sv_enc; \/* DATA FROM ENCODER.C *\/$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::sv_psy	util.h	/^        PsyStateVar_t sv_psy; \/* DATA FROM PSYMODEL.C *\/$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::sv_qnt	util.h	/^        QntStateVar_t sv_qnt; \/* DATA FROM QUANTIZE.C *\/$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::sv_rpg	util.h	/^        RpgStateVar_t sv_rpg;$/;"	m	struct:lame_internal_flags	access:public
lame_internal_flags::tag_spec	util.h	/^        struct id3tag_spec tag_spec;$/;"	m	struct:lame_internal_flags	typeref:struct:lame_internal_flags::id3tag_spec	access:public
lame_internal_flags_defined	VbrTag.h	51;"	d
lame_internal_flags_defined	encoder.h	147;"	d
lame_internal_flags_defined	lame_global_flags.h	5;"	d
lame_internal_flags_defined	util.h	551;"	d
lame_mp3_tags_fid	lame.c	/^lame_mp3_tags_fid(lame_global_flags * gfp, FILE * fpStream)$/;"	f	signature:(lame_global_flags * gfp, FILE * fpStream)
lame_mp3_tags_fid	lame.c	/^void    lame_mp3_tags_fid(lame_global_flags * gfp, FILE * fpStream);$/;"	p	file:	signature:(lame_global_flags * gfp, FILE * fpStream)
lame_mp3_tags_fid	lame.h	/^void CDECL lame_mp3_tags_fid(lame_global_flags *, FILE* fid);$/;"	p	signature:(lame_global_flags *, FILE* fid)
lame_msgf	util.c	/^lame_msgf(const lame_internal_flags* gfc, const char *format, ...)$/;"	f	signature:(const lame_internal_flags* gfc, const char *format, ...)
lame_msgf	util.h	/^    extern void lame_msgf(const lame_internal_flags * gfc, const char *, ...);$/;"	p	signature:(const lame_internal_flags * gfc, const char *, ...)
lame_print_config	lame.c	/^lame_print_config(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_print_config	lame.h	/^void CDECL lame_print_config(const lame_global_flags*  gfp);$/;"	p	signature:(const lame_global_flags* gfp)
lame_print_internals	lame.c	/^lame_print_internals(const lame_global_flags * gfp)$/;"	f	signature:(const lame_global_flags * gfp)
lame_print_internals	lame.h	/^void CDECL lame_print_internals( const lame_global_flags *gfp);$/;"	p	signature:( const lame_global_flags *gfp)
lame_report_def	util.c	/^lame_report_def(const char *format, va_list args)$/;"	f	signature:(const char *format, va_list args)
lame_report_def	util.h	/^    extern void lame_report_def(const char* format, va_list args);$/;"	p	signature:(const char* format, va_list args)
lame_report_fnc	util.c	/^lame_report_fnc(lame_report_function print_f, const char *format, ...)$/;"	f	signature:(lame_report_function print_f, const char *format, ...)
lame_report_fnc	util.h	/^    extern void lame_report_fnc(lame_report_function print_f, const char *, ...);$/;"	p	signature:(lame_report_function print_f, const char *, ...)
lame_report_function	lame.h	/^typedef void (*lame_report_function)(const char *format, va_list ap);$/;"	t
lame_set_ATHcurve	set_get.c	/^lame_set_ATHcurve(lame_global_flags * gfp, float ATHcurve)$/;"	f	signature:(lame_global_flags * gfp, float ATHcurve)
lame_set_ATHcurve	set_get.h	/^    int CDECL lame_set_ATHcurve(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_ATHlower	lame.h	/^int CDECL lame_set_ATHlower(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_ATHlower	set_get.c	/^lame_set_ATHlower(lame_global_flags * gfp, float ATHlower)$/;"	f	signature:(lame_global_flags * gfp, float ATHlower)
lame_set_ATHonly	lame.h	/^int CDECL lame_set_ATHonly(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ATHonly	set_get.c	/^lame_set_ATHonly(lame_global_flags * gfp, int ATHonly)$/;"	f	signature:(lame_global_flags * gfp, int ATHonly)
lame_set_ATHshort	lame.h	/^int CDECL lame_set_ATHshort(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ATHshort	set_get.c	/^lame_set_ATHshort(lame_global_flags * gfp, int ATHshort)$/;"	f	signature:(lame_global_flags * gfp, int ATHshort)
lame_set_ATHtype	lame.h	/^int CDECL lame_set_ATHtype(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ATHtype	set_get.c	/^lame_set_ATHtype(lame_global_flags * gfp, int ATHtype)$/;"	f	signature:(lame_global_flags * gfp, int ATHtype)
lame_set_ReplayGain_decode	lame.h	/^int CDECL lame_set_ReplayGain_decode(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ReplayGain_decode	set_get.c	/^int CDECL lame_set_ReplayGain_decode(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_ReplayGain_decode	set_get.c	/^lame_set_ReplayGain_decode(lame_global_flags * gfp, int arg)$/;"	f	signature:(lame_global_flags * gfp, int arg)
lame_set_ReplayGain_input	lame.h	/^int CDECL lame_set_ReplayGain_input(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ReplayGain_input	set_get.c	/^int CDECL lame_set_ReplayGain_input(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_ReplayGain_input	set_get.c	/^lame_set_ReplayGain_input(lame_global_flags * gfp, int arg)$/;"	f	signature:(lame_global_flags * gfp, int arg)
lame_set_VBR	lame.h	/^int CDECL lame_set_VBR(lame_global_flags *, vbr_mode);$/;"	p	signature:(lame_global_flags *, vbr_mode)
lame_set_VBR	set_get.c	/^lame_set_VBR(lame_global_flags * gfp, vbr_mode VBR)$/;"	f	signature:(lame_global_flags * gfp, vbr_mode VBR)
lame_set_VBR_hard_min	lame.h	/^int CDECL lame_set_VBR_hard_min(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_VBR_hard_min	set_get.c	/^lame_set_VBR_hard_min(lame_global_flags * gfp, int VBR_hard_min)$/;"	f	signature:(lame_global_flags * gfp, int VBR_hard_min)
lame_set_VBR_max_bitrate_kbps	lame.h	/^int CDECL lame_set_VBR_max_bitrate_kbps(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_VBR_max_bitrate_kbps	set_get.c	/^lame_set_VBR_max_bitrate_kbps(lame_global_flags * gfp, int VBR_max_bitrate_kbps)$/;"	f	signature:(lame_global_flags * gfp, int VBR_max_bitrate_kbps)
lame_set_VBR_mean_bitrate_kbps	lame.h	/^int CDECL lame_set_VBR_mean_bitrate_kbps(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_VBR_mean_bitrate_kbps	set_get.c	/^lame_set_VBR_mean_bitrate_kbps(lame_global_flags * gfp, int VBR_mean_bitrate_kbps)$/;"	f	signature:(lame_global_flags * gfp, int VBR_mean_bitrate_kbps)
lame_set_VBR_min_bitrate_kbps	lame.h	/^int CDECL lame_set_VBR_min_bitrate_kbps(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_VBR_min_bitrate_kbps	set_get.c	/^lame_set_VBR_min_bitrate_kbps(lame_global_flags * gfp, int VBR_min_bitrate_kbps)$/;"	f	signature:(lame_global_flags * gfp, int VBR_min_bitrate_kbps)
lame_set_VBR_q	lame.h	/^int CDECL lame_set_VBR_q(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_VBR_q	set_get.c	/^lame_set_VBR_q(lame_global_flags * gfp, int VBR_q)$/;"	f	signature:(lame_global_flags * gfp, int VBR_q)
lame_set_VBR_quality	lame.h	/^int CDECL lame_set_VBR_quality(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_VBR_quality	set_get.c	/^lame_set_VBR_quality(lame_global_flags * gfp, float VBR_q)$/;"	f	signature:(lame_global_flags * gfp, float VBR_q)
lame_set_allow_diff_short	lame.h	/^int CDECL lame_set_allow_diff_short(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_allow_diff_short	set_get.c	/^lame_set_allow_diff_short(lame_global_flags * gfp, int allow_diff_short)$/;"	f	signature:(lame_global_flags * gfp, int allow_diff_short)
lame_set_analysis	lame.h	/^int CDECL lame_set_analysis(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_analysis	set_get.c	/^lame_set_analysis(lame_global_flags * gfp, int analysis)$/;"	f	signature:(lame_global_flags * gfp, int analysis)
lame_set_asm_optimizations	lame.h	/^int CDECL lame_set_asm_optimizations( lame_global_flags*  gfp, int, int );$/;"	p	signature:( lame_global_flags* gfp, int, int )
lame_set_asm_optimizations	set_get.c	/^lame_set_asm_optimizations(lame_global_flags * gfp, int optim, int mode)$/;"	f	signature:(lame_global_flags * gfp, int optim, int mode)
lame_set_athaa_loudapprox	lame.h	/^int CDECL lame_set_athaa_loudapprox( lame_global_flags *, int);$/;"	p	signature:( lame_global_flags *, int)
lame_set_athaa_loudapprox	set_get.c	/^int CDECL lame_set_athaa_loudapprox(lame_global_flags * gfp, int athaa_loudapprox);$/;"	p	file:	signature:(lame_global_flags * gfp, int athaa_loudapprox)
lame_set_athaa_loudapprox	set_get.c	/^lame_set_athaa_loudapprox(lame_global_flags * gfp, int athaa_loudapprox)$/;"	f	signature:(lame_global_flags * gfp, int athaa_loudapprox)
lame_set_athaa_sensitivity	lame.h	/^int CDECL lame_set_athaa_sensitivity( lame_global_flags *, float);$/;"	p	signature:( lame_global_flags *, float)
lame_set_athaa_sensitivity	set_get.c	/^lame_set_athaa_sensitivity(lame_global_flags * gfp, float athaa_sensitivity)$/;"	f	signature:(lame_global_flags * gfp, float athaa_sensitivity)
lame_set_athaa_type	lame.h	/^int CDECL lame_set_athaa_type( lame_global_flags *, int);$/;"	p	signature:( lame_global_flags *, int)
lame_set_athaa_type	set_get.c	/^lame_set_athaa_type(lame_global_flags * gfp, int athaa_type)$/;"	f	signature:(lame_global_flags * gfp, int athaa_type)
lame_set_bWriteVbrTag	lame.h	/^int CDECL lame_set_bWriteVbrTag(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_bWriteVbrTag	set_get.c	/^lame_set_bWriteVbrTag(lame_global_flags * gfp, int bWriteVbrTag)$/;"	f	signature:(lame_global_flags * gfp, int bWriteVbrTag)
lame_set_brate	lame.h	/^int CDECL lame_set_brate(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_brate	set_get.c	/^lame_set_brate(lame_global_flags * gfp, int brate)$/;"	f	signature:(lame_global_flags * gfp, int brate)
lame_set_compression_ratio	lame.h	/^int CDECL lame_set_compression_ratio(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_compression_ratio	set_get.c	/^lame_set_compression_ratio(lame_global_flags * gfp, float compression_ratio)$/;"	f	signature:(lame_global_flags * gfp, float compression_ratio)
lame_set_copyright	lame.h	/^int CDECL lame_set_copyright(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_copyright	set_get.c	/^lame_set_copyright(lame_global_flags * gfp, int copyright)$/;"	f	signature:(lame_global_flags * gfp, int copyright)
lame_set_cwlimit	lame.h	/^int CDECL lame_set_cwlimit(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_cwlimit	set_get.c	/^int     lame_set_cwlimit(lame_global_flags * gfp, int cwlimit);$/;"	p	file:	signature:(lame_global_flags * gfp, int cwlimit)
lame_set_cwlimit	set_get.c	/^lame_set_cwlimit(lame_global_flags * gfp, int cwlimit)$/;"	f	signature:(lame_global_flags * gfp, int cwlimit)
lame_set_debugf	lame.h	/^int CDECL lame_set_debugf(lame_global_flags *, lame_report_function);$/;"	p	signature:(lame_global_flags *, lame_report_function)
lame_set_debugf	set_get.c	/^lame_set_debugf(lame_global_flags * gfp, void (*func) (const char *, va_list))$/;"	f	signature:(lame_global_flags * gfp, void (*func) (const char *, va_list))
lame_set_decode_on_the_fly	lame.h	/^int CDECL lame_set_decode_on_the_fly(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_decode_on_the_fly	set_get.c	/^lame_set_decode_on_the_fly(lame_global_flags * gfp, int decode_on_the_fly)$/;"	f	signature:(lame_global_flags * gfp, int decode_on_the_fly)
lame_set_decode_only	lame.h	/^int CDECL lame_set_decode_only(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_decode_only	set_get.c	/^lame_set_decode_only(lame_global_flags * gfp, int decode_only)$/;"	f	signature:(lame_global_flags * gfp, int decode_only)
lame_set_disable_reservoir	lame.h	/^int CDECL lame_set_disable_reservoir(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_disable_reservoir	set_get.c	/^lame_set_disable_reservoir(lame_global_flags * gfp, int disable_reservoir)$/;"	f	signature:(lame_global_flags * gfp, int disable_reservoir)
lame_set_emphasis	lame.h	/^int CDECL lame_set_emphasis(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_emphasis	set_get.c	/^lame_set_emphasis(lame_global_flags * gfp, int emphasis)$/;"	f	signature:(lame_global_flags * gfp, int emphasis)
lame_set_error_protection	lame.h	/^int CDECL lame_set_error_protection(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_error_protection	set_get.c	/^lame_set_error_protection(lame_global_flags * gfp, int error_protection)$/;"	f	signature:(lame_global_flags * gfp, int error_protection)
lame_set_errorf	lame.h	/^int CDECL lame_set_errorf(lame_global_flags *, lame_report_function);$/;"	p	signature:(lame_global_flags *, lame_report_function)
lame_set_errorf	set_get.c	/^lame_set_errorf(lame_global_flags * gfp, void (*func) (const char *, va_list))$/;"	f	signature:(lame_global_flags * gfp, void (*func) (const char *, va_list))
lame_set_exp_nspsytune	lame.h	/^int CDECL lame_set_exp_nspsytune(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_exp_nspsytune	set_get.c	/^lame_set_exp_nspsytune(lame_global_flags * gfp, int exp_nspsytune)$/;"	f	signature:(lame_global_flags * gfp, int exp_nspsytune)
lame_set_experimentalX	lame.h	/^int CDECL lame_set_experimentalX(lame_global_flags *, int); \/* compatibility*\/$/;"	p	signature:(lame_global_flags *, int)
lame_set_experimentalX	set_get.c	/^lame_set_experimentalX(lame_global_flags * gfp, int experimentalX)$/;"	f	signature:(lame_global_flags * gfp, int experimentalX)
lame_set_experimentalY	lame.h	/^int CDECL lame_set_experimentalY(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_experimentalY	set_get.c	/^lame_set_experimentalY(lame_global_flags * gfp, int experimentalY)$/;"	f	signature:(lame_global_flags * gfp, int experimentalY)
lame_set_experimentalZ	lame.h	/^int CDECL lame_set_experimentalZ(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_experimentalZ	set_get.c	/^lame_set_experimentalZ(lame_global_flags * gfp, int experimentalZ)$/;"	f	signature:(lame_global_flags * gfp, int experimentalZ)
lame_set_extension	lame.h	/^int CDECL lame_set_extension(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_extension	set_get.c	/^lame_set_extension(lame_global_flags * gfp, int extension)$/;"	f	signature:(lame_global_flags * gfp, int extension)
lame_set_findPeakSample	lame.h	/^int CDECL lame_set_findPeakSample(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_findPeakSample	set_get.c	/^int CDECL lame_set_findPeakSample(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_findPeakSample	set_get.c	/^lame_set_findPeakSample(lame_global_flags * gfp, int arg)$/;"	f	signature:(lame_global_flags * gfp, int arg)
lame_set_findReplayGain	lame.h	/^int CDECL lame_set_findReplayGain(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_findReplayGain	set_get.c	/^lame_set_findReplayGain(lame_global_flags * gfp, int findReplayGain)$/;"	f	signature:(lame_global_flags * gfp, int findReplayGain)
lame_set_force_ms	lame.h	/^int CDECL lame_set_force_ms(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_force_ms	set_get.c	/^lame_set_force_ms(lame_global_flags * gfp, int force_ms)$/;"	f	signature:(lame_global_flags * gfp, int force_ms)
lame_set_force_short_blocks	lame.h	/^int CDECL lame_set_force_short_blocks(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_force_short_blocks	set_get.c	/^lame_set_force_short_blocks(lame_global_flags * gfp, int short_blocks)$/;"	f	signature:(lame_global_flags * gfp, int short_blocks)
lame_set_free_format	lame.h	/^int CDECL lame_set_free_format(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_free_format	set_get.c	/^lame_set_free_format(lame_global_flags * gfp, int free_format)$/;"	f	signature:(lame_global_flags * gfp, int free_format)
lame_set_highpassfreq	lame.h	/^int CDECL lame_set_highpassfreq(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_highpassfreq	set_get.c	/^lame_set_highpassfreq(lame_global_flags * gfp, int highpassfreq)$/;"	f	signature:(lame_global_flags * gfp, int highpassfreq)
lame_set_highpasswidth	lame.h	/^int CDECL lame_set_highpasswidth(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_highpasswidth	set_get.c	/^lame_set_highpasswidth(lame_global_flags * gfp, int highpasswidth)$/;"	f	signature:(lame_global_flags * gfp, int highpasswidth)
lame_set_in_samplerate	lame.h	/^int CDECL lame_set_in_samplerate(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_in_samplerate	set_get.c	/^lame_set_in_samplerate(lame_global_flags * gfp, int in_samplerate)$/;"	f	signature:(lame_global_flags * gfp, int in_samplerate)
lame_set_interChRatio	lame.h	/^int CDECL lame_set_interChRatio(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_interChRatio	set_get.c	/^lame_set_interChRatio(lame_global_flags * gfp, float ratio)$/;"	f	signature:(lame_global_flags * gfp, float ratio)
lame_set_lowpassfreq	lame.h	/^int CDECL lame_set_lowpassfreq(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_lowpassfreq	set_get.c	/^lame_set_lowpassfreq(lame_global_flags * gfp, int lowpassfreq)$/;"	f	signature:(lame_global_flags * gfp, int lowpassfreq)
lame_set_lowpasswidth	lame.h	/^int CDECL lame_set_lowpasswidth(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_lowpasswidth	set_get.c	/^lame_set_lowpasswidth(lame_global_flags * gfp, int lowpasswidth)$/;"	f	signature:(lame_global_flags * gfp, int lowpasswidth)
lame_set_maskingadjust	set_get.c	/^lame_set_maskingadjust(lame_global_flags * gfp, float adjust)$/;"	f	signature:(lame_global_flags * gfp, float adjust)
lame_set_maskingadjust	set_get.h	/^    int CDECL lame_set_maskingadjust(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_maskingadjust_short	set_get.c	/^lame_set_maskingadjust_short(lame_global_flags * gfp, float adjust)$/;"	f	signature:(lame_global_flags * gfp, float adjust)
lame_set_maskingadjust_short	set_get.h	/^    int CDECL lame_set_maskingadjust_short(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_mode	lame.h	/^int CDECL lame_set_mode(lame_global_flags *, MPEG_mode);$/;"	p	signature:(lame_global_flags *, MPEG_mode)
lame_set_mode	set_get.c	/^lame_set_mode(lame_global_flags * gfp, MPEG_mode mode)$/;"	f	signature:(lame_global_flags * gfp, MPEG_mode mode)
lame_set_mode_automs	lame.h	/^int CDECL lame_set_mode_automs(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_mode_automs	set_get.c	/^int CDECL lame_set_mode_automs(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_mode_automs	set_get.c	/^lame_set_mode_automs(lame_global_flags * gfp, int mode_automs)$/;"	f	signature:(lame_global_flags * gfp, int mode_automs)
lame_set_msfix	lame.h	/^void CDECL lame_set_msfix(lame_global_flags *, double);$/;"	p	signature:(lame_global_flags *, double)
lame_set_msfix	set_get.c	/^lame_set_msfix(lame_global_flags * gfp, double msfix)$/;"	f	signature:(lame_global_flags * gfp, double msfix)
lame_set_msfix	set_get.h	/^    void CDECL lame_set_msfix(lame_t gfp, double msfix);$/;"	p	signature:(lame_t gfp, double msfix)
lame_set_msgf	lame.h	/^int CDECL lame_set_msgf  (lame_global_flags *, lame_report_function);$/;"	p	signature:(lame_global_flags *, lame_report_function)
lame_set_msgf	set_get.c	/^lame_set_msgf(lame_global_flags * gfp, void (*func) (const char *, va_list))$/;"	f	signature:(lame_global_flags * gfp, void (*func) (const char *, va_list))
lame_set_noATH	lame.h	/^int CDECL lame_set_noATH(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_noATH	set_get.c	/^lame_set_noATH(lame_global_flags * gfp, int noATH)$/;"	f	signature:(lame_global_flags * gfp, int noATH)
lame_set_no_short_blocks	lame.h	/^int CDECL lame_set_no_short_blocks(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_no_short_blocks	set_get.c	/^lame_set_no_short_blocks(lame_global_flags * gfp, int no_short_blocks)$/;"	f	signature:(lame_global_flags * gfp, int no_short_blocks)
lame_set_nogap_currentindex	lame.h	/^int CDECL lame_set_nogap_currentindex(lame_global_flags* , int);$/;"	p	signature:(lame_global_flags* , int)
lame_set_nogap_currentindex	set_get.c	/^lame_set_nogap_currentindex(lame_global_flags * gfp, int the_nogap_index)$/;"	f	signature:(lame_global_flags * gfp, int the_nogap_index)
lame_set_nogap_total	lame.h	/^int CDECL lame_set_nogap_total(lame_global_flags*, int);$/;"	p	signature:(lame_global_flags*, int)
lame_set_nogap_total	set_get.c	/^lame_set_nogap_total(lame_global_flags * gfp, int the_nogap_total)$/;"	f	signature:(lame_global_flags * gfp, int the_nogap_total)
lame_set_num_channels	lame.h	/^int CDECL lame_set_num_channels(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_num_channels	set_get.c	/^lame_set_num_channels(lame_global_flags * gfp, int num_channels)$/;"	f	signature:(lame_global_flags * gfp, int num_channels)
lame_set_num_samples	lame.h	/^int CDECL lame_set_num_samples(lame_global_flags *, unsigned long);$/;"	p	signature:(lame_global_flags *, unsigned long)
lame_set_num_samples	set_get.c	/^lame_set_num_samples(lame_global_flags * gfp, unsigned long num_samples)$/;"	f	signature:(lame_global_flags * gfp, unsigned long num_samples)
lame_set_ogg	lame.h	/^int CDECL lame_set_ogg(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_ogg	set_get.c	/^int CDECL lame_set_ogg(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_ogg	set_get.c	/^lame_set_ogg(lame_global_flags * gfp, int ogg)$/;"	f	signature:(lame_global_flags * gfp, int ogg)
lame_set_original	lame.h	/^int CDECL lame_set_original(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_original	set_get.c	/^lame_set_original(lame_global_flags * gfp, int original)$/;"	f	signature:(lame_global_flags * gfp, int original)
lame_set_out_samplerate	lame.h	/^int CDECL lame_set_out_samplerate(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_out_samplerate	set_get.c	/^lame_set_out_samplerate(lame_global_flags * gfp, int out_samplerate)$/;"	f	signature:(lame_global_flags * gfp, int out_samplerate)
lame_set_padding_type	lame.h	/^int CDECL lame_set_padding_type(lame_global_flags *, Padding_type);$/;"	p	signature:(lame_global_flags *, Padding_type)
lame_set_padding_type	set_get.c	/^int CDECL lame_set_padding_type(lame_global_flags *, Padding_type);$/;"	p	file:	signature:(lame_global_flags *, Padding_type)
lame_set_padding_type	set_get.c	/^lame_set_padding_type(lame_global_flags * gfp, Padding_type padding_type)$/;"	f	signature:(lame_global_flags * gfp, Padding_type padding_type)
lame_set_preset	lame.h	/^int CDECL lame_set_preset( lame_global_flags*  gfp, int );$/;"	p	signature:( lame_global_flags* gfp, int )
lame_set_preset	set_get.c	/^lame_set_preset(lame_global_flags * gfp, int preset)$/;"	f	signature:(lame_global_flags * gfp, int preset)
lame_set_preset_expopts	lame.h	/^int CDECL lame_set_preset_expopts(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_preset_expopts	set_get.c	/^int CDECL lame_set_preset_expopts(lame_global_flags *, int);$/;"	p	file:	signature:(lame_global_flags *, int)
lame_set_preset_expopts	set_get.c	/^lame_set_preset_expopts(lame_global_flags * gfp, int preset_expopts)$/;"	f	signature:(lame_global_flags * gfp, int preset_expopts)
lame_set_preset_notune	set_get.c	/^lame_set_preset_notune(lame_global_flags * gfp, int preset_notune)$/;"	f	signature:(lame_global_flags * gfp, int preset_notune)
lame_set_preset_notune	set_get.h	/^    int CDECL lame_set_preset_notune(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_quality	lame.h	/^int CDECL lame_set_quality(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_quality	set_get.c	/^lame_set_quality(lame_global_flags * gfp, int quality)$/;"	f	signature:(lame_global_flags * gfp, int quality)
lame_set_quant_comp	lame.h	/^int CDECL lame_set_quant_comp(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_quant_comp	set_get.c	/^lame_set_quant_comp(lame_global_flags * gfp, int quant_type)$/;"	f	signature:(lame_global_flags * gfp, int quant_type)
lame_set_quant_comp_short	lame.h	/^int CDECL lame_set_quant_comp_short(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_quant_comp_short	set_get.c	/^lame_set_quant_comp_short(lame_global_flags * gfp, int quant_type)$/;"	f	signature:(lame_global_flags * gfp, int quant_type)
lame_set_scale	lame.h	/^int CDECL lame_set_scale(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_scale	set_get.c	/^lame_set_scale(lame_global_flags * gfp, float scale)$/;"	f	signature:(lame_global_flags * gfp, float scale)
lame_set_scale_left	lame.h	/^int CDECL lame_set_scale_left(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_scale_left	set_get.c	/^lame_set_scale_left(lame_global_flags * gfp, float scale)$/;"	f	signature:(lame_global_flags * gfp, float scale)
lame_set_scale_right	lame.h	/^int CDECL lame_set_scale_right(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_scale_right	set_get.c	/^lame_set_scale_right(lame_global_flags * gfp, float scale)$/;"	f	signature:(lame_global_flags * gfp, float scale)
lame_set_sfscale	set_get.c	/^lame_set_sfscale(lame_global_flags * gfp, int val)$/;"	f	signature:(lame_global_flags * gfp, int val)
lame_set_sfscale	set_get.h	/^    int CDECL lame_set_sfscale(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_short_threshold	set_get.c	/^lame_set_short_threshold(lame_global_flags * gfp, float lrm, float s)$/;"	f	signature:(lame_global_flags * gfp, float lrm, float s)
lame_set_short_threshold	set_get.h	/^    int CDECL lame_set_short_threshold(lame_global_flags *, float, float);$/;"	p	signature:(lame_global_flags *, float, float)
lame_set_short_threshold_lrm	set_get.c	/^lame_set_short_threshold_lrm(lame_global_flags * gfp, float lrm)$/;"	f	signature:(lame_global_flags * gfp, float lrm)
lame_set_short_threshold_lrm	set_get.h	/^    int CDECL lame_set_short_threshold_lrm(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_short_threshold_s	set_get.c	/^lame_set_short_threshold_s(lame_global_flags * gfp, float s)$/;"	f	signature:(lame_global_flags * gfp, float s)
lame_set_short_threshold_s	set_get.h	/^    int CDECL lame_set_short_threshold_s(lame_global_flags *, float);$/;"	p	signature:(lame_global_flags *, float)
lame_set_strict_ISO	lame.h	/^int CDECL lame_set_strict_ISO(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_strict_ISO	set_get.c	/^lame_set_strict_ISO(lame_global_flags * gfp, int val)$/;"	f	signature:(lame_global_flags * gfp, int val)
lame_set_subblock_gain	set_get.c	/^lame_set_subblock_gain(lame_global_flags * gfp, int sbgain)$/;"	f	signature:(lame_global_flags * gfp, int sbgain)
lame_set_subblock_gain	set_get.h	/^    int CDECL lame_set_subblock_gain(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_substep	set_get.c	/^lame_set_substep(lame_global_flags * gfp, int method)$/;"	f	signature:(lame_global_flags * gfp, int method)
lame_set_substep	set_get.h	/^    int CDECL lame_set_substep(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_tune	set_get.c	/^lame_set_tune(lame_global_flags * gfp, float val)$/;"	f	signature:(lame_global_flags * gfp, float val)
lame_set_tune	set_get.c	/^void CDECL lame_set_tune(lame_global_flags *, float);$/;"	p	file:	signature:(lame_global_flags *, float)
lame_set_tune	set_get.h	/^    void CDECL lame_set_tune(lame_t, float); \/* FOR INTERNAL USE ONLY *\/$/;"	p	signature:(lame_t, float)
lame_set_useTemporal	lame.h	/^int CDECL lame_set_useTemporal(lame_global_flags *, int);$/;"	p	signature:(lame_global_flags *, int)
lame_set_useTemporal	set_get.c	/^lame_set_useTemporal(lame_global_flags * gfp, int useTemporal)$/;"	f	signature:(lame_global_flags * gfp, int useTemporal)
lame_set_write_id3tag_automatic	lame.h	/^void CDECL lame_set_write_id3tag_automatic(lame_global_flags * gfp, int);$/;"	p	signature:(lame_global_flags * gfp, int)
lame_set_write_id3tag_automatic	set_get.c	/^lame_set_write_id3tag_automatic(lame_global_flags * gfp, int v)$/;"	f	signature:(lame_global_flags * gfp, int v)
lame_stereo_mode_hist	lame.c	/^lame_stereo_mode_hist(const lame_global_flags * gfp, int stmode_count[4])$/;"	f	signature:(const lame_global_flags * gfp, int stmode_count[4])
lame_stereo_mode_hist	lame.h	/^void CDECL lame_stereo_mode_hist($/;"	p	signature:( const lame_global_flags * gfp, int stereo_mode_count[4] )
lame_t	lame.h	/^typedef lame_global_flags *lame_t;$/;"	t
lame_version_t	lame.h	/^} lame_version_t;$/;"	t	typeref:struct:__anon19
largetbl	tables.c	/^const uint32_t largetbl[16 * 16] = {$/;"	v
last_attacks	util.h	/^        int     last_attacks[4];$/;"	m	struct:__anon6	access:public
last_en_subshort	util.h	/^        FLOAT   last_en_subshort[4][9];$/;"	m	struct:__anon6	access:public
linear_int	lame.c	/^linear_int(double a, double b, double m)$/;"	f	file:	signature:(double a, double b, double m)
linmax	tables.h	/^    const unsigned int linmax;        \/* max number to be stored in linbits *\/$/;"	m	struct:huffcodetab	access:public
linpre	gain_analysis.h	/^        Float_t *linpre;     \/* left input samples, with pre-buffer *\/$/;"	m	struct:replaygain_data	access:public
linprebuf	gain_analysis.h	/^        Float_t linprebuf[MAX_ORDER * 2];$/;"	m	struct:replaygain_data	access:public
lng	id3tag.h	/^    char    lng[4];          \/* 3-character language descriptor  *\/$/;"	m	struct:FrameDataNode	access:public
local_char_pos	id3tag.c	/^local_char_pos(char const* str, char c)$/;"	f	file:	signature:(char const* str, char c)
local_strcasecmp	id3tag.c	/^local_strcasecmp(const char *s1, const char *s2)$/;"	f	file:	signature:(const char *s1, const char *s2)
local_strdup	id3tag.c	/^local_strdup(char **dst, const char *src)$/;"	f	file:	signature:(char **dst, const char *src)
local_strdup_utf16_to_latin1	id3tag.c	/^local_strdup_utf16_to_latin1(unsigned short const* utf16)$/;"	f	file:	signature:(unsigned short const* utf16)
local_ucs2_pos	id3tag.c	/^local_ucs2_pos(unsigned short const* str, unsigned short c)$/;"	f	file:	signature:(unsigned short const* str, unsigned short c)
local_ucs2_strdup	id3tag.c	/^local_ucs2_strdup(unsigned short **dst, unsigned short const *src)$/;"	f	file:	signature:(unsigned short **dst, unsigned short const *src)
local_ucs2_strlen	id3tag.c	/^local_ucs2_strlen(unsigned short const *s)$/;"	f	file:	signature:(unsigned short const *s)
local_ucs2_substr	id3tag.c	/^local_ucs2_substr(unsigned short** dst, unsigned short const* src, size_t start, size_t end)$/;"	f	file:	signature:(unsigned short** dst, unsigned short const* src, size_t start, size_t end)
log10f	machine.h	183;"	d
log_table	util.c	/^static ieee754_float32_t log_table[LOG2_SIZE + 1];$/;"	v	file:
long_block_constrain	vbrquantize.c	/^long_block_constrain(const algo_t * that, const int vbrsf[SFBMAX], const int vbrsfmin[SFBMAX],$/;"	f	file:	signature:(const algo_t * that, const int vbrsf[SFBMAX], const int vbrsfmin[SFBMAX], int vbrmax)
longfact	util.h	/^        FLOAT   longfact[SBMAX_l];$/;"	m	struct:__anon11	access:public
lookupGenre	id3tag.c	/^lookupGenre(char const* genre)$/;"	f	file:	signature:(char const* genre)
loop	i386/nasm.h	/^; macro to align for begining of loop$/;"	v
loop_break	quantize.c	/^loop_break(const gr_info * const cod_info)$/;"	f	file:	signature:(const gr_info * const cod_info)
loudness_sq	util.h	/^        FLOAT   loudness_sq[2][2]; \/* loudness^2 approx. per granule and channel *\/$/;"	m	struct:__anon7	access:public
loudness_sq_save	util.h	/^        FLOAT   loudness_sq_save[2]; \/* account for granule delay of L3psycho_anal *\/$/;"	m	struct:__anon6	access:public
lout	gain_analysis.h	/^        Float_t *lout;       \/* left "out" (i.e. post second filter) samples *\/$/;"	m	struct:replaygain_data	access:public
loutbuf	gain_analysis.h	/^        Float_t loutbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
lowpass1	util.h	/^        FLOAT   lowpass1, lowpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
lowpass2	util.h	/^        FLOAT   lowpass1, lowpass2; \/* normalized frequency bounds of passband *\/$/;"	m	struct:__anon14	access:public
lowpassfreq	lame_global_flags.h	/^    int     lowpassfreq;     \/* freq in Hz. 0=lame choses.$/;"	m	struct:lame_global_struct	access:public
lowpassfreq	util.h	/^        int     lowpassfreq;$/;"	m	struct:__anon14	access:public
lowpasswidth	lame_global_flags.h	/^    int     lowpasswidth;    \/* freq width of filter, in Hz$/;"	m	struct:lame_global_struct	access:public
lstep	gain_analysis.h	/^        Float_t *lstep;      \/* left "first step" (i.e. post first filter) samples *\/$/;"	m	struct:replaygain_data	access:public
lstepbuf	gain_analysis.h	/^        Float_t lstepbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
lsum	gain_analysis.h	/^        double  lsum;$/;"	m	struct:replaygain_data	access:public
ma_max_i1	psymodel.c	/^static FLOAT ma_max_i1;$/;"	v	file:
ma_max_i2	psymodel.c	/^static FLOAT ma_max_i2;$/;"	v	file:
ma_max_m	psymodel.c	/^static FLOAT ma_max_m;$/;"	v	file:
main_data_begin	l3side.h	/^    int     main_data_begin;$/;"	m	struct:__anon34	access:public
mainbits	lame-analysis.h	/^    int     mainbits[2][2];$/;"	m	struct:plotting_data	access:public
maindata	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
major	lame.h	/^    int major;$/;"	m	struct:__anon19	access:public
malloc_aligned	util.c	/^malloc_aligned(aligned_pointer_t * ptr, unsigned int size, unsigned int bytes)$/;"	f	signature:(aligned_pointer_t * ptr, unsigned int size, unsigned int bytes)
malloc_aligned	util.h	/^    void    malloc_aligned(aligned_pointer_t * ptr, unsigned int size, unsigned int bytes);$/;"	p	signature:(aligned_pointer_t * ptr, unsigned int size, unsigned int bytes)
map2MP3Frequency	util.c	/^map2MP3Frequency(int freq)$/;"	f	signature:(int freq)
map2MP3Frequency	util.h	/^    extern int map2MP3Frequency(int freq);$/;"	p	signature:(int freq)
mask_add_delta	psymodel.c	/^mask_add_delta(int i)$/;"	f	file:	signature:(int i)
mask_adjust	util.h	/^        FLOAT   mask_adjust; \/* the dbQ stuff *\/$/;"	m	struct:__anon11	access:public
mask_adjust_short	util.h	/^        FLOAT   mask_adjust_short; \/* the dbQ stuff *\/$/;"	m	struct:__anon11	access:public
masking_adj	presets.c	/^    FLOAT   masking_adj;$/;"	m	struct:__anon24	file:	access:public
masking_adj_short	presets.c	/^    FLOAT   masking_adj_short;$/;"	m	struct:__anon24	file:	access:public
masking_lower	util.h	/^        FLOAT   masking_lower;$/;"	m	struct:__anon11	access:public
masking_lower	util.h	/^        FLOAT   masking_lower[CBANDS];$/;"	m	struct:__anon4	access:public
maskingadjust	lame_global_flags.h	/^    float   maskingadjust;$/;"	m	struct:lame_global_struct	access:public
maskingadjust_short	lame_global_flags.h	/^    float   maskingadjust_short;$/;"	m	struct:lame_global_struct	access:public
max_int	presets.c	/^max_int(int a, int b)$/;"	f	file:	signature:(int a, int b)
max_noise	lame-analysis.h	/^    double  max_noise[2][2];$/;"	m	struct:plotting_data	access:public
max_noise	quantize_pvt.h	/^    FLOAT   max_noise;       \/* max quantization noise *\/$/;"	m	struct:calc_noise_result_t	access:public
max_nonzero_coeff	l3side.h	/^    int     max_nonzero_coeff;$/;"	m	struct:__anon33	access:public
max_range_long	vbrquantize.c	/^static const uint8_t max_range_long[SBMAX_l] = {$/;"	v	file:
max_range_long_lsf_pretab	vbrquantize.c	/^static const uint8_t max_range_long_lsf_pretab[SBMAX_l] = {$/;"	v	file:
max_range_sfac_tab	takehiro.c	/^static const int max_range_sfac_tab[6][4] = {$/;"	v	file:
max_range_short	vbrquantize.c	/^static const uint8_t max_range_short[SBMAX_s * 3] = {$/;"	v	file:
maybeLatin1	id3tag.c	/^maybeLatin1(unsigned short const* text)$/;"	f	file:	signature:(unsigned short const* text)
mdct_long	newmdct.c	/^mdct_long(FLOAT * out, FLOAT const *in)$/;"	f	file:	signature:(FLOAT * out, FLOAT const *in)
mdct_short	newmdct.c	/^mdct_short(FLOAT * inout)$/;"	f	file:	signature:(FLOAT * inout)
mdct_sub48	newmdct.c	/^mdct_sub48(lame_internal_flags * gfc, const sample_t * w0, const sample_t * w1)$/;"	f	signature:(lame_internal_flags * gfc, const sample_t * w0, const sample_t * w1)
mdct_sub48	newmdct.h	/^void    mdct_sub48(lame_internal_flags * gfc, const sample_t * w0, const sample_t * w1);$/;"	p	signature:(lame_internal_flags * gfc, const sample_t * w0, const sample_t * w1)
mean_bits	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
memcpy	id3tag.c	50;"	d	file:
memcpy	machine.h	44;"	d
memmove	machine.h	45;"	d
mf_samples_to_encode	util.h	/^        int     mf_samples_to_encode;$/;"	m	struct:__anon8	access:public
mf_size	util.h	/^        int     mf_size;$/;"	m	struct:__anon8	access:public
mfbuf	util.h	/^        sample_t mfbuf[2][MFSIZE];$/;"	m	struct:__anon8	access:public
min_int	presets.c	/^min_int(int a, int b)$/;"	f	file:	signature:(int a, int b)
mingain_l	vbrquantize.c	/^    int     mingain_l;$/;"	m	struct:algo_s	file:	access:public
mingain_s	vbrquantize.c	/^    int     mingain_s[3];$/;"	m	struct:algo_s	file:	access:public
minor	lame.h	/^    int minor;$/;"	m	struct:__anon19	access:public
minval	presets.c	/^    FLOAT   minval;$/;"	m	struct:__anon24	file:	access:public
minval	util.h	/^        FLOAT   minval;$/;"	m	struct:__anon14	access:public
minval	util.h	/^        FLOAT   minval[CBANDS];$/;"	m	struct:__anon4	access:public
mixed	lame-analysis.h	/^    int     mixed[2][2];$/;"	m	struct:plotting_data	access:public
mixed_block_flag	l3side.h	/^    int     mixed_block_flag;$/;"	m	struct:__anon33	access:public
ml00	fft.c	172;"	d	file:
ml01	fft.c	177;"	d	file:
ml10	fft.c	173;"	d	file:
ml11	fft.c	178;"	d	file:
ml20	fft.c	174;"	d	file:
ml21	fft.c	179;"	d	file:
ml30	fft.c	175;"	d	file:
ml31	fft.c	180;"	d	file:
mld	util.h	/^        FLOAT   mld[Max(SBMAX_l,SBMAX_s)];$/;"	m	struct:__anon4	access:public
mld_cb	util.h	/^        FLOAT   mld_cb[CBANDS];$/;"	m	struct:__anon4	access:public
mmx	lame_global_flags.h	/^        int     mmx;$/;"	m	struct:lame_global_struct::__anon26	access:public
mode	lame.h	/^  int mode;            \/* mp3 frame type                                 *\/$/;"	m	struct:__anon20	access:public
mode	lame_global_flags.h	/^    MPEG_mode mode;          \/* see enum in lame.h$/;"	m	struct:lame_global_struct	access:public
mode	util.h	/^        MPEG_mode mode;$/;"	m	struct:__anon14	access:public
mode_ext	lame.h	/^  int mode_ext;        \/* mp3 frame type                                 *\/$/;"	m	struct:__anon20	access:public
mode_ext	util.h	/^        int     mode_ext;$/;"	m	struct:__anon10	access:public
mode_gr	util.h	/^        int     mode_gr;     \/* granules per frame *\/$/;"	m	struct:__anon14	access:public
mp	mpglib_interface.c	/^static MPSTR   mp;$/;"	v	file:
mp3data_struct	lame.h	/^} mp3data_struct;$/;"	t	typeref:struct:__anon20
mpeg1_scale_bitcount	takehiro.c	/^mpeg1_scale_bitcount(const lame_internal_flags * gfc, gr_info * const cod_info)$/;"	f	file:	signature:(const lame_internal_flags * gfc, gr_info * const cod_info)
mpeg2_scale_bitcount	takehiro.c	/^mpeg2_scale_bitcount(const lame_internal_flags * gfc, gr_info * const cod_info)$/;"	f	file:	signature:(const lame_internal_flags * gfc, gr_info * const cod_info)
mpg123blocktype	lame-analysis.h	/^    int     mpg123blocktype[2][2];$/;"	m	struct:plotting_data	access:public
mpg123xr	lame-analysis.h	/^    double  mpg123xr[2][2][576];$/;"	m	struct:plotting_data	access:public
ms00	fft.c	182;"	d	file:
ms01	fft.c	187;"	d	file:
ms10	fft.c	183;"	d	file:
ms11	fft.c	188;"	d	file:
ms20	fft.c	184;"	d	file:
ms21	fft.c	189;"	d	file:
ms30	fft.c	185;"	d	file:
ms31	fft.c	190;"	d	file:
ms_convert	quantize.c	/^ms_convert(III_side_info_t * l3_side, int gr)$/;"	f	file:	signature:(III_side_info_t * l3_side, int gr)
ms_ener_ratio	lame-analysis.h	/^    double  ms_ener_ratio[2];$/;"	m	struct:plotting_data	access:public
ms_ratio	lame-analysis.h	/^    double  ms_ratio[2];$/;"	m	struct:plotting_data	access:public
ms_stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
msfix	lame_global_flags.h	/^    float   msfix;           \/* Naoki's adjustment of Mid\/Side maskings *\/$/;"	m	struct:lame_global_struct	access:public
msfix	presets.c	/^    FLOAT   msfix;$/;"	m	struct:__anon24	file:	access:public
msfix	util.h	/^        float   msfix;       \/* Naoki's adjustment of Mid\/Side maskings *\/$/;"	m	struct:__anon14	access:public
msgf	lame_global_flags.h	/^        void    (*msgf) (const char *format, va_list ap);$/;"	m	struct:lame_global_struct::__anon25	access:public
n	i386/nasm.h	/^%define	ge1(n)		(ge2(n) | ((((n) \/  1)*0xFFFFFFFF) & 0xFFFFFFFF))$/;"	p	signature:(ge2(
nBytesWritten	util.h	/^        unsigned long nBytesWritten;$/;"	m	struct:__anon2	access:public
nMusicCRC	util.h	/^        uint16_t nMusicCRC;$/;"	m	struct:lame_internal_flags	access:public
nVbrNumFrames	util.h	/^        unsigned int nVbrNumFrames;$/;"	m	struct:__anon2	access:public
n_sb	util.h	/^        int     n_sb; \/* SBMAX_l or SBMAX_s *\/$/;"	m	struct:__anon4	access:public
nb_l1	util.h	/^        FLOAT   nb_l1[4][CBANDS], nb_l2[4][CBANDS];$/;"	m	struct:__anon6	access:public
nb_l2	util.h	/^        FLOAT   nb_l1[4][CBANDS], nb_l2[4][CBANDS];$/;"	m	struct:__anon6	access:public
nb_s1	util.h	/^        FLOAT   nb_s1[4][CBANDS], nb_s2[4][CBANDS];$/;"	m	struct:__anon6	access:public
nb_s2	util.h	/^        FLOAT   nb_s1[4][CBANDS], nb_s2[4][CBANDS];$/;"	m	struct:__anon6	access:public
nearestBitrateFullIndex	util.c	/^nearestBitrateFullIndex(uint16_t bitrate)$/;"	f	signature:(uint16_t bitrate)
nearestBitrateFullIndex	util.h	/^    extern int nearestBitrateFullIndex(uint16_t brate);$/;"	p	signature:(uint16_t brate)
nextUpperAlpha	id3tag.c	/^const char* nextUpperAlpha(const char* p, char x)$/;"	f	file:	signature:(const char* p, char x)
noATH	lame_global_flags.h	/^    int     noATH;           \/* disable ATH                          *\/$/;"	m	struct:lame_global_struct	access:public
noATH	util.h	/^        int     noATH;       \/* disable ATH                          *\/$/;"	m	struct:__anon14	access:public
noclipGainChange	util.h	/^        int     noclipGainChange; \/* gain change required for preventing clipping *\/$/;"	m	struct:__anon13	access:public
noclipScale	util.h	/^        FLOAT   noclipScale; \/* user-specified scale factor required for preventing clipping *\/$/;"	m	struct:__anon13	access:public
nogap_current	lame_global_flags.h	/^    int     nogap_current;$/;"	m	struct:lame_global_struct	access:public
nogap_total	lame_global_flags.h	/^    int     nogap_total;$/;"	m	struct:lame_global_struct	access:public
noise	quantize_pvt.h	/^    FLOAT   noise[39];$/;"	m	struct:calc_noise_data_t	access:public
noise_log	quantize_pvt.h	/^    FLOAT   noise_log[39];$/;"	m	struct:calc_noise_data_t	access:public
noise_shaping	lame_global_flags.h	/^    int     noise_shaping;$/;"	m	struct:lame_global_struct	access:public
noise_shaping	util.h	/^        int     noise_shaping; \/* 0 = none$/;"	m	struct:__anon14	access:public
noise_shaping_amp	util.h	/^        int     noise_shaping_amp; \/*  0 = ISO model: amplify all distorted bands$/;"	m	struct:__anon14	access:public
noise_shaping_stop	util.h	/^        int     noise_shaping_stop; \/* 0 = stop at over=0, all scalefacs amplified or$/;"	m	struct:__anon14	access:public
noquant_count_bits	quantize_pvt.h	/^int     noquant_count_bits(lame_internal_flags const *const gfc,$/;"	p	signature:(lame_internal_flags const *const gfc, gr_info * const cod_info, calc_noise_data * prev_noise)
noquant_count_bits	takehiro.c	/^noquant_count_bits(lame_internal_flags const *const gfc,$/;"	f	signature:(lame_internal_flags const *const gfc, gr_info * const gi, calc_noise_data * prev_noise)
npart	util.h	/^        int     npart;$/;"	m	struct:__anon4	access:public
nr_of_sfb_block	quantize_pvt.c	/^const int nr_of_sfb_block[6][3][4] = {$/;"	v
nsamp	lame.h	/^  unsigned long nsamp; \/* number of samples in mp3 file.                 *\/$/;"	m	struct:__anon20	access:public
num_channels	lame_global_flags.h	/^    int     num_channels;    \/* input number of channels. default=2         *\/$/;"	m	struct:lame_global_struct	access:public
num_samples	lame-analysis.h	/^    int     num_samples;     \/* number of pcm samples read for this frame *\/$/;"	m	struct:plotting_data	access:public
num_samples	lame_global_flags.h	/^    unsigned long num_samples; \/* number of samples. default=2^32-1           *\/$/;"	m	struct:lame_global_struct	access:public
numlines	util.h	/^        int     numlines[CBANDS];$/;"	m	struct:__anon4	access:public
nxt	id3tag.h	/^    struct FrameDataNode *nxt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::FrameDataNode	access:public
on_pe	quantize_pvt.c	/^on_pe(lame_internal_flags * gfc, const FLOAT pe[][2], int targ_bits[2], int mean_bits, int gr, int cbr)$/;"	f	signature:(lame_internal_flags * gfc, const FLOAT pe[][2], int targ_bits[2], int mean_bits, int gr, int cbr)
on_pe	quantize_pvt.h	/^int     on_pe(lame_internal_flags * gfc, const FLOAT pe[2][2],$/;"	p	signature:(lame_internal_flags * gfc, const FLOAT pe[2][2], int targ_bits[2], int mean_bits, int gr, int cbr)
optimum_bandwidth	lame.c	/^optimum_bandwidth(double *const lowerlimit, double *const upperlimit, const unsigned bitrate)$/;"	f	file:	signature:(double *const lowerlimit, double *const upperlimit, const unsigned bitrate)
optimum_samplefreq	lame.c	/^optimum_samplefreq(int lowpassfreq, int input_samplefreq)$/;"	f	file:	signature:(int lowpassfreq, int input_samplefreq)
order	newmdct.c	/^static const int order[] = {$/;"	v	file:
original	lame_global_flags.h	/^    int     original;        \/* mark as original. default=1            *\/$/;"	m	struct:lame_global_struct	access:public
original	util.h	/^        int     original;    \/* mark as original. default=1            *\/$/;"	m	struct:__anon14	access:public
outOfBitsStrategy	vbrquantize.c	/^outOfBitsStrategy(algo_t const* that, const int sfwork[SFBMAX], const int vbrsfmin[SFBMAX], int target)$/;"	f	file:	signature:(algo_t const* that, const int sfwork[SFBMAX], const int vbrsfmin[SFBMAX], int target)
outer_loop	quantize.c	/^outer_loop(lame_internal_flags * gfc, gr_info * const cod_info, const FLOAT * const l3_xmin, \/* allowed distortion *\/$/;"	f	file:	signature:(lame_internal_flags * gfc, gr_info * const cod_info, const FLOAT * const l3_xmin, FLOAT xrpow[576], const int ch, const int targ_bits)
ov_enc	util.h	/^        EncResult_t ov_enc;$/;"	m	struct:lame_internal_flags	access:public
ov_psy	util.h	/^        PsyResult_t ov_psy;$/;"	m	struct:lame_internal_flags	access:public
ov_rpg	util.h	/^        RpgResult_t ov_rpg;$/;"	m	struct:lame_internal_flags	access:public
over	lame-analysis.h	/^    int     over[2][2];$/;"	m	struct:plotting_data	access:public
over_SSD	lame-analysis.h	/^    int     over_SSD[2][2];$/;"	m	struct:plotting_data	access:public
over_SSD	quantize_pvt.h	/^    int     over_SSD;        \/* SSD-like cost of distorted bands *\/$/;"	m	struct:calc_noise_result_t	access:public
over_count	quantize_pvt.h	/^    int     over_count;      \/* number of quantization noise > masking *\/$/;"	m	struct:calc_noise_result_t	access:public
over_noise	lame-analysis.h	/^    double  over_noise[2][2];$/;"	m	struct:plotting_data	access:public
over_noise	quantize_pvt.h	/^    FLOAT   over_noise;      \/* sum of quantization noise > masking *\/$/;"	m	struct:calc_noise_result_t	access:public
padding	lame-analysis.h	/^    int     crc, padding;$/;"	m	struct:plotting_data	access:public
padding	util.h	/^        int     padding;     \/* padding for the current frame? *\/$/;"	m	struct:__anon10	access:public
padding_size	id3tag.h	/^    unsigned int padding_size;$/;"	m	struct:id3tag_spec	access:public
part2_3_length	l3side.h	/^    int     part2_3_length;$/;"	m	struct:__anon33	access:public
part2_length	l3side.h	/^    int     part2_length;$/;"	m	struct:__anon33	access:public
payload_long	quantize_pvt.c	/^static float const payload_long[2][4] = $/;"	v	file:
payload_short	quantize_pvt.c	/^static float const payload_short[2][4] = $/;"	v	file:
pcm_double_type	lame.c	/^,   pcm_double_type$/;"	e	enum:PCMSampleType	file:
pcm_float_type	lame.c	/^,   pcm_float_type$/;"	e	enum:PCMSampleType	file:
pcm_int_type	lame.c	/^,   pcm_int_type$/;"	e	enum:PCMSampleType	file:
pcm_long_type	lame.c	/^,   pcm_long_type$/;"	e	enum:PCMSampleType	file:
pcm_short_type	lame.c	/^{   pcm_short_type$/;"	e	enum:PCMSampleType	file:
pcm_transform	util.h	/^        FLOAT   pcm_transform[2][2];$/;"	m	struct:__anon14	access:public
pcmdata	lame-analysis.h	/^    double  pcmdata[2][1600];$/;"	m	struct:plotting_data	access:public
pcmdata2	lame-analysis.h	/^    double  pcmdata2[2][1152 + 1152 - DECDELAY];$/;"	m	struct:plotting_data	access:public
pe	lame-analysis.h	/^    double  pe[2][4];$/;"	m	struct:plotting_data	access:public
pecalc_l	psymodel.c	/^pecalc_l(III_psy_ratio const *mr, FLOAT masking_lower)$/;"	f	file:	signature:(III_psy_ratio const *mr, FLOAT masking_lower)
pecalc_s	psymodel.c	/^pecalc_s(III_psy_ratio const *mr, FLOAT masking_lower)$/;"	f	file:	signature:(III_psy_ratio const *mr, FLOAT masking_lower)
pefirbuf	util.h	/^        FLOAT   pefirbuf[19];$/;"	m	struct:__anon8	access:public
penalties	quantize.c	/^penalties(double noise)$/;"	f	file:	signature:(double noise)
pinfo	util.h	/^        plotting_data *pinfo;$/;"	m	struct:lame_internal_flags	access:public
plotting_data	lame-analysis.h	/^struct plotting_data {$/;"	s
plotting_data	lame-analysis.h	/^typedef struct plotting_data plotting_data;$/;"	t	typeref:struct:plotting_data
plotting_data	util.h	/^    typedef struct plotting_data plotting_data;$/;"	t	typeref:struct:plotting_data
plotting_data::LAMEmainbits	lame-analysis.h	/^    int     LAMEmainbits[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::LAMEqss	lame-analysis.h	/^    int     LAMEqss[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::LAMEsfb	lame-analysis.h	/^    double  LAMEsfb[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
plotting_data::LAMEsfb_s	lame-analysis.h	/^    double  LAMEsfb_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
plotting_data::LAMEsfbits	lame-analysis.h	/^    int     LAMEsfbits[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::big_values	lame-analysis.h	/^    int     big_values[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::bitrate	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::blocktype	lame-analysis.h	/^    int     blocktype[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::crc	lame-analysis.h	/^    int     crc, padding;$/;"	m	struct:plotting_data	access:public
plotting_data::emph	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::en	lame-analysis.h	/^    double  en[2][4][SBMAX_l];$/;"	m	struct:plotting_data	access:public
plotting_data::en_s	lame-analysis.h	/^    double  en_s[2][4][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
plotting_data::energy	lame-analysis.h	/^    double  energy[2][4][BLKSIZE];$/;"	m	struct:plotting_data	access:public
plotting_data::energy_save	lame-analysis.h	/^    double  energy_save[4][BLKSIZE]; \/* psymodel is one ahead *\/$/;"	m	struct:plotting_data	access:public
plotting_data::ers	lame-analysis.h	/^    double  ers[2][4];$/;"	m	struct:plotting_data	access:public
plotting_data::ers_save	lame-analysis.h	/^    double  ers_save[4];     \/* psymodel is one ahead *\/$/;"	m	struct:plotting_data	access:public
plotting_data::frameNum	lame-analysis.h	/^    int     frameNum;        \/* current frame number *\/$/;"	m	struct:plotting_data	access:public
plotting_data::frameNum123	lame-analysis.h	/^    int     frameNum123;$/;"	m	struct:plotting_data	access:public
plotting_data::framesize	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::frametime	lame-analysis.h	/^    double  frametime;       \/* starting time of frame, in seconds *\/$/;"	m	struct:plotting_data	access:public
plotting_data::i_stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::js	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::mainbits	lame-analysis.h	/^    int     mainbits[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::maindata	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::max_noise	lame-analysis.h	/^    double  max_noise[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::mean_bits	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
plotting_data::mixed	lame-analysis.h	/^    int     mixed[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::mpg123blocktype	lame-analysis.h	/^    int     mpg123blocktype[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::mpg123xr	lame-analysis.h	/^    double  mpg123xr[2][2][576];$/;"	m	struct:plotting_data	access:public
plotting_data::ms_ener_ratio	lame-analysis.h	/^    double  ms_ener_ratio[2];$/;"	m	struct:plotting_data	access:public
plotting_data::ms_ratio	lame-analysis.h	/^    double  ms_ratio[2];$/;"	m	struct:plotting_data	access:public
plotting_data::ms_stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::num_samples	lame-analysis.h	/^    int     num_samples;     \/* number of pcm samples read for this frame *\/$/;"	m	struct:plotting_data	access:public
plotting_data::over	lame-analysis.h	/^    int     over[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::over_SSD	lame-analysis.h	/^    int     over_SSD[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::over_noise	lame-analysis.h	/^    double  over_noise[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::padding	lame-analysis.h	/^    int     crc, padding;$/;"	m	struct:plotting_data	access:public
plotting_data::pcmdata	lame-analysis.h	/^    double  pcmdata[2][1600];$/;"	m	struct:plotting_data	access:public
plotting_data::pcmdata2	lame-analysis.h	/^    double  pcmdata2[2][1152 + 1152 - DECDELAY];$/;"	m	struct:plotting_data	access:public
plotting_data::pe	lame-analysis.h	/^    double  pe[2][4];$/;"	m	struct:plotting_data	access:public
plotting_data::preflag	lame-analysis.h	/^    int     preflag[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::qss	lame-analysis.h	/^    int     qss[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::resvsize	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
plotting_data::sampfreq	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::scalefac_scale	lame-analysis.h	/^    int     scalefac_scale[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::scfsi	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
plotting_data::sfb	lame-analysis.h	/^    double  sfb[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
plotting_data::sfb_s	lame-analysis.h	/^    double  sfb_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
plotting_data::sfbits	lame-analysis.h	/^    int     sfbits[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
plotting_data::sub_gain	lame-analysis.h	/^    int     sub_gain[2][2][3];$/;"	m	struct:plotting_data	access:public
plotting_data::thr	lame-analysis.h	/^    double  thr[2][4][SBMAX_l];$/;"	m	struct:plotting_data	access:public
plotting_data::thr_s	lame-analysis.h	/^    double  thr_s[2][4][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
plotting_data::tot_noise	lame-analysis.h	/^    double  tot_noise[2][2];$/;"	m	struct:plotting_data	access:public
plotting_data::totbits	lame-analysis.h	/^    int     totbits;$/;"	m	struct:plotting_data	access:public
plotting_data::xfsf	lame-analysis.h	/^    double  xfsf[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
plotting_data::xfsf_s	lame-analysis.h	/^    double  xfsf_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
plotting_data::xr	lame-analysis.h	/^    double  xr[2][2][576];$/;"	m	struct:plotting_data	access:public
plotting_data_defined	lame-analysis.h	90;"	d
plotting_data_defined	util.h	115;"	d
pointer	util.h	/^        void   *pointer;     \/* to use with malloc\/free *\/$/;"	m	struct:__anon1	access:public
pos	util.h	/^        int     pos;         \/* actual position in our bag *\/$/;"	m	struct:__anon2	access:public
pow20	quantize_pvt.c	/^FLOAT   pow20[Q_MAX + Q_MAX2 + 1];$/;"	v
pow43	quantize_pvt.c	/^FLOAT   pow43[PRECALC_SIZE];$/;"	v
powf	machine.h	182;"	d
preflag	l3side.h	/^    int     preflag;$/;"	m	struct:__anon33	access:public
preflag	lame-analysis.h	/^    int     preflag[2][2];$/;"	m	struct:plotting_data	access:public
preset	lame_global_flags.h	/^    int     preset;$/;"	m	struct:lame_global_struct	access:public
preset	util.h	/^        int     preset;$/;"	m	struct:__anon14	access:public
preset_mode	lame.h	/^} preset_mode;$/;"	t	typeref:enum:preset_mode_e
preset_mode_e	lame.h	/^typedef enum preset_mode_e {$/;"	g
pretab	quantize_pvt.c	/^const int pretab[SBMAX_l] = {$/;"	v
print_seeking	VbrTag.c	/^print_seeking(unsigned char *t)$/;"	f	file:	signature:(unsigned char *t)
private_bits	l3side.h	/^    int     private_bits;$/;"	m	struct:__anon34	access:public
pseudohalf	util.h	/^        int     pseudohalf[SFBMAX];$/;"	m	struct:__anon11	access:public
psfb12	l3side.h	/^    int     psfb12[1 + PSFB12];$/;"	m	struct:__anon30	access:public
psfb12	util.h	/^        FLOAT   psfb12[PSFB12]; \/* ATH for partitionned sfb12 in short blocks *\/$/;"	m	struct:__anon3	access:public
psfb21	l3side.h	/^    int     psfb21[1 + PSFB21];$/;"	m	struct:__anon30	access:public
psfb21	util.h	/^        FLOAT   psfb21[PSFB21]; \/* ATH for partitionned sfb21 in long blocks *\/$/;"	m	struct:__anon3	access:public
psfb21_analogsilence	quantize.c	/^psfb21_analogsilence(lame_internal_flags const *gfc, gr_info * const cod_info)$/;"	f	file:	signature:(lame_internal_flags const *gfc, gr_info * const cod_info)
psy_alpha	lame.h	/^    int psy_alpha;           \/* 0 if not an alpha version                  *\/$/;"	m	struct:__anon19	access:public
psy_beta	lame.h	/^    int psy_beta;            \/* 0 if not a beta version                    *\/$/;"	m	struct:__anon19	access:public
psy_lmax	l3side.h	/^    int     psy_lmax;$/;"	m	struct:__anon33	access:public
psy_major	lame.h	/^    int psy_major;$/;"	m	struct:__anon19	access:public
psy_minor	lame.h	/^    int psy_minor;$/;"	m	struct:__anon19	access:public
psycho_loudness_approx	psymodel.c	/^psycho_loudness_approx(FLOAT const *energy, FLOAT const *eql_w)$/;"	f	file:	signature:(FLOAT const *energy, FLOAT const *eql_w)
psymax	l3side.h	/^    int     psymax;$/;"	m	struct:__anon33	access:public
psymodel_init	psymodel.c	/^psymodel_init(lame_global_flags const *gfp)$/;"	f	signature:(lame_global_flags const *gfp)
psymodel_init	psymodel.h	/^int     psymodel_init(lame_global_flags const* gfp);$/;"	p	signature:(lame_global_flags const* gfp)
ptr	id3tag.h	/^        } ptr;$/;"	m	struct:FrameDataNode::__anon17	typeref:union:FrameDataNode::__anon17::__anon18	access:public
ptr	util.h	/^            int     ptr;$/;"	m	struct:__anon8::__anon9	access:public
putbits2	bitstream.c	/^putbits2(lame_internal_flags * gfc, int val, int j)$/;"	f	file:	signature:(lame_internal_flags * gfc, int val, int j)
putbits_noheaders	bitstream.c	/^putbits_noheaders(lame_internal_flags * gfc, int val, int j)$/;"	f	file:	signature:(lame_internal_flags * gfc, int val, int j)
putheader_bits	bitstream.c	/^putheader_bits(lame_internal_flags * gfc)$/;"	f	file:	signature:(lame_internal_flags * gfc)
qss	lame-analysis.h	/^    int     qss[2][2];$/;"	m	struct:plotting_data	access:public
quality	lame_global_flags.h	/^    int     quality;         \/* quality setting 0=best,  9=worst  default=5 *\/$/;"	m	struct:lame_global_struct	access:public
quant_comp	lame_global_flags.h	/^    int     quant_comp;$/;"	m	struct:lame_global_struct	access:public
quant_comp	presets.c	/^    int     quant_comp;$/;"	m	struct:__anon24	file:	access:public
quant_comp	util.h	/^        int     quant_comp;$/;"	m	struct:__anon14	access:public
quant_comp_s	presets.c	/^    int     quant_comp_s;$/;"	m	struct:__anon24	file:	access:public
quant_comp_short	lame_global_flags.h	/^    int     quant_comp_short;$/;"	m	struct:lame_global_struct	access:public
quant_comp_short	util.h	/^        int     quant_comp_short;$/;"	m	struct:__anon14	access:public
quant_compare	quantize.c	/^quant_compare(const int quant_comp,$/;"	f	file:	signature:(const int quant_comp, const calc_noise_result * const best, calc_noise_result * const calc, const gr_info * const gi, const FLOAT * distort)
quantizeAndCountBits	vbrquantize.c	/^quantizeAndCountBits(const algo_t * that)$/;"	f	file:	signature:(const algo_t * that)
quantize_lines_xrpow	takehiro.c	/^quantize_lines_xrpow(unsigned int l, FLOAT istep, const FLOAT * xp, int *pi)$/;"	f	file:	signature:(unsigned int l, FLOAT istep, const FLOAT * xp, int *pi)
quantize_lines_xrpow	takehiro.c	/^quantize_lines_xrpow(unsigned int l, FLOAT istep, const FLOAT * xr, int *ix)$/;"	f	file:	signature:(unsigned int l, FLOAT istep, const FLOAT * xr, int *ix)
quantize_lines_xrpow_01	takehiro.c	/^quantize_lines_xrpow_01(unsigned int l, FLOAT istep, const FLOAT * xr, int *ix)$/;"	f	file:	signature:(unsigned int l, FLOAT istep, const FLOAT * xr, int *ix)
quantize_x34	vbrquantize.c	/^quantize_x34(const algo_t * that)$/;"	f	file:	signature:(const algo_t * that)
quantize_xrpow	takehiro.c	/^quantize_xrpow(const FLOAT * xp, int *pi, FLOAT istep, gr_info const *const cod_info,$/;"	f	file:	signature:(const FLOAT * xp, int *pi, FLOAT istep, gr_info const *const cod_info, calc_noise_data const *prev_noise)
recalc_divide_init	takehiro.c	/^recalc_divide_init(const lame_internal_flags * const gfc,$/;"	f	file:	signature:(const lame_internal_flags * const gfc, gr_info const *cod_info, int const *const ix, int r01_bits[], int r01_div[], int r0_tbl[], int r1_tbl[])
recalc_divide_sub	takehiro.c	/^recalc_divide_sub(const lame_internal_flags * const gfc,$/;"	f	file:	signature:(const lame_internal_flags * const gfc, const gr_info * cod_info2, gr_info * const gi, const int *const ix, const int r01_bits[], const int r01_div[], const int r0_tbl[], const int r1_tbl[])
reduce_bit_usage	vbrquantize.c	/^reduce_bit_usage(lame_internal_flags * gfc, int gr, int ch$/;"	f	file:	signature:(lame_internal_flags * gfc, int gr, int ch )
reduce_side	quantize_pvt.c	/^reduce_side(int targ_bits[2], FLOAT ms_ener_ratio, int mean_bits, int max_bits)$/;"	f	signature:(int targ_bits[2], FLOAT ms_ener_ratio, int mean_bits, int max_bits)
reduce_side	quantize_pvt.h	/^void    reduce_side(int targ_bits[2], FLOAT ms_ener_ratio, int mean_bits, int max_bits);$/;"	p	signature:(int targ_bits[2], FLOAT ms_ener_ratio, int mean_bits, int max_bits)
region0_count	l3side.h	/^    int     region0_count;$/;"	m	struct:__anon33	access:public
region0_count	takehiro.c	/^    const int region0_count;$/;"	m	struct:__anon35	file:	access:public
region1_count	l3side.h	/^    int     region1_count;$/;"	m	struct:__anon33	access:public
region1_count	takehiro.c	/^    const int region1_count;$/;"	m	struct:__anon35	file:	access:public
replaygain_data	gain_analysis.h	/^    struct replaygain_data {$/;"	s
replaygain_data::A	gain_analysis.h	/^        uint32_t A[STEPS_per_dB * MAX_dB];$/;"	m	struct:replaygain_data	access:public
replaygain_data::B	gain_analysis.h	/^        uint32_t B[STEPS_per_dB * MAX_dB];$/;"	m	struct:replaygain_data	access:public
replaygain_data::first	gain_analysis.h	/^        int     first;$/;"	m	struct:replaygain_data	access:public
replaygain_data::freqindex	gain_analysis.h	/^        int     freqindex;$/;"	m	struct:replaygain_data	access:public
replaygain_data::linpre	gain_analysis.h	/^        Float_t *linpre;     \/* left input samples, with pre-buffer *\/$/;"	m	struct:replaygain_data	access:public
replaygain_data::linprebuf	gain_analysis.h	/^        Float_t linprebuf[MAX_ORDER * 2];$/;"	m	struct:replaygain_data	access:public
replaygain_data::lout	gain_analysis.h	/^        Float_t *lout;       \/* left "out" (i.e. post second filter) samples *\/$/;"	m	struct:replaygain_data	access:public
replaygain_data::loutbuf	gain_analysis.h	/^        Float_t loutbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
replaygain_data::lstep	gain_analysis.h	/^        Float_t *lstep;      \/* left "first step" (i.e. post first filter) samples *\/$/;"	m	struct:replaygain_data	access:public
replaygain_data::lstepbuf	gain_analysis.h	/^        Float_t lstepbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
replaygain_data::lsum	gain_analysis.h	/^        double  lsum;$/;"	m	struct:replaygain_data	access:public
replaygain_data::rinpre	gain_analysis.h	/^        Float_t *rinpre;     \/* right input samples ... *\/$/;"	m	struct:replaygain_data	access:public
replaygain_data::rinprebuf	gain_analysis.h	/^        Float_t rinprebuf[MAX_ORDER * 2];$/;"	m	struct:replaygain_data	access:public
replaygain_data::rout	gain_analysis.h	/^        Float_t *rout;$/;"	m	struct:replaygain_data	access:public
replaygain_data::routbuf	gain_analysis.h	/^        Float_t routbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
replaygain_data::rstep	gain_analysis.h	/^        Float_t *rstep;$/;"	m	struct:replaygain_data	access:public
replaygain_data::rstepbuf	gain_analysis.h	/^        Float_t rstepbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
replaygain_data::rsum	gain_analysis.h	/^        double  rsum;$/;"	m	struct:replaygain_data	access:public
replaygain_data::sampleWindow	gain_analysis.h	/^        long    sampleWindow; \/* number of samples required to reach number of milliseconds required for RMS window *\/$/;"	m	struct:replaygain_data	access:public
replaygain_data::totsamp	gain_analysis.h	/^        long    totsamp;$/;"	m	struct:replaygain_data	access:public
replaygain_data_defined	gain_analysis.h	93;"	d
replaygain_data_defined	util.h	110;"	d
replaygain_t	gain_analysis.h	/^    typedef struct replaygain_data replaygain_t;$/;"	t	typeref:struct:replaygain_data
replaygain_t	util.h	/^    typedef struct replaygain_data replaygain_t;$/;"	t	typeref:struct:replaygain_data
report	lame_global_flags.h	/^    } report;$/;"	m	struct:lame_global_struct	typeref:struct:lame_global_struct::__anon25	access:public
report_dbg	util.h	/^        lame_report_function report_dbg;$/;"	m	struct:lame_internal_flags	access:public
report_err	util.h	/^        lame_report_function report_err;$/;"	m	struct:lame_internal_flags	access:public
report_msg	util.h	/^        lame_report_function report_msg;$/;"	m	struct:lame_internal_flags	access:public
resvDrain_post	l3side.h	/^    int     resvDrain_post;$/;"	m	struct:__anon34	access:public
resvDrain_pre	l3side.h	/^    int     resvDrain_pre;$/;"	m	struct:__anon34	access:public
resvsize	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
rgdata	util.h	/^        replaygain_t *rgdata;$/;"	m	struct:__anon12	access:public
rinpre	gain_analysis.h	/^        Float_t *rinpre;     \/* right input samples ... *\/$/;"	m	struct:replaygain_data	access:public
rinprebuf	gain_analysis.h	/^        Float_t rinprebuf[MAX_ORDER * 2];$/;"	m	struct:replaygain_data	access:public
rnumlines	util.h	/^        FLOAT   rnumlines[CBANDS];$/;"	m	struct:__anon4	access:public
rout	gain_analysis.h	/^        Float_t *rout;$/;"	m	struct:replaygain_data	access:public
routbuf	gain_analysis.h	/^        Float_t routbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
rpelev	psymodel.h	42;"	d
rpelev2	psymodel.h	43;"	d
rpelev2_s	psymodel.h	45;"	d
rpelev_s	psymodel.h	44;"	d
rstep	gain_analysis.h	/^        Float_t *rstep;$/;"	m	struct:replaygain_data	access:public
rstepbuf	gain_analysis.h	/^        Float_t rstepbuf[MAX_SAMPLES_PER_WINDOW + MAX_ORDER];$/;"	m	struct:replaygain_data	access:public
rsum	gain_analysis.h	/^        double  rsum;$/;"	m	struct:replaygain_data	access:public
rv_tbl	fft.c	/^static const unsigned char rv_tbl[] = {$/;"	v	file:
s	l3side.h	/^    FLOAT   s[SBMAX_s][3];$/;"	m	struct:__anon31	access:public
s	l3side.h	/^    int     s[1 + SBMAX_s];$/;"	m	struct:__anon30	access:public
s	util.h	/^        FLOAT   s[SBMAX_s];  \/* ATH for sfbs in short blocks *\/$/;"	m	struct:__anon3	access:public
s	util.h	/^        PsyConst_CB2SB_t s;$/;"	m	struct:__anon5	access:public
s3	util.h	/^        FLOAT  *s3;$/;"	m	struct:__anon4	access:public
s3_func	psymodel.c	/^s3_func(FLOAT bark)$/;"	f	file:	signature:(FLOAT bark)
s3ind	util.h	/^        int     s3ind[CBANDS][2];$/;"	m	struct:__anon4	access:public
safejoint	presets.c	/^    int     safejoint;$/;"	m	struct:__anon24	file:	access:public
sampfreq	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
sampleWindow	gain_analysis.h	/^        long    sampleWindow; \/* number of samples required to reach number of milliseconds required for RMS window *\/$/;"	m	struct:replaygain_data	access:public
sample_t	machine.h	/^typedef FLOAT sample_t;$/;"	t
samplerate	lame.h	/^  int samplerate;      \/* sample rate                                    *\/$/;"	m	struct:__anon20	access:public
samplerate_in	lame_global_flags.h	/^    int     samplerate_in;   \/* input_samp_rate in Hz. default=44.1 kHz     *\/$/;"	m	struct:lame_global_struct	access:public
samplerate_in	util.h	/^        int     samplerate_in; \/* input_samp_rate in Hz. default=44.1 kHz     *\/$/;"	m	struct:__anon14	access:public
samplerate_index	util.h	/^        int     samplerate_index;$/;"	m	struct:__anon14	access:public
samplerate_out	lame_global_flags.h	/^    int     samplerate_out;  \/* output_samp_rate.$/;"	m	struct:lame_global_struct	access:public
samplerate_out	util.h	/^        int     samplerate_out; \/* output_samp_rate. *\/$/;"	m	struct:__anon14	access:public
samplerate_table	tables.c	/^const int samplerate_table[3][4] = {$/;"	v
samprate	VbrTag.h	/^    int     samprate;        \/* determined from MPEG header *\/$/;"	m	struct:__anon29	access:public
save_gain_values	lame.c	/^save_gain_values(lame_internal_flags * gfc)$/;"	f	file:	signature:(lame_internal_flags * gfc)
sb_sample	util.h	/^        FLOAT   sb_sample[2][2][18][SBLIMIT];$/;"	m	struct:__anon8	access:public
scale	lame_global_flags.h	/^    float   scale;           \/* scale input by this amount before encoding$/;"	m	struct:lame_global_struct	access:public
scale_bitcount	quantize_pvt.h	/^int     scale_bitcount(const lame_internal_flags * gfc, gr_info * cod_info);$/;"	p	signature:(const lame_internal_flags * gfc, gr_info * cod_info)
scale_bitcount	takehiro.c	/^scale_bitcount(const lame_internal_flags * gfc, gr_info * cod_info)$/;"	f	signature:(const lame_internal_flags * gfc, gr_info * cod_info)
scale_left	lame_global_flags.h	/^    float   scale_left;      \/* scale input of channel 0 (left) by this$/;"	m	struct:lame_global_struct	access:public
scale_long	takehiro.c	/^static const int scale_long[16] = {$/;"	v	file:
scale_mixed	takehiro.c	/^static const int scale_mixed[16] = {$/;"	v	file:
scale_right	lame_global_flags.h	/^    float   scale_right;     \/* scale input of channel 1 (right) by this$/;"	m	struct:lame_global_struct	access:public
scale_short	takehiro.c	/^static const int scale_short[16] = {$/;"	v	file:
scalefac	l3side.h	/^    int     scalefac[SFBMAX];$/;"	m	struct:__anon33	access:public
scalefac_band	util.h	/^        scalefac_struct scalefac_band;$/;"	m	struct:lame_internal_flags	access:public
scalefac_compress	l3side.h	/^    int     scalefac_compress;$/;"	m	struct:__anon33	access:public
scalefac_scale	l3side.h	/^    int     scalefac_scale;$/;"	m	struct:__anon33	access:public
scalefac_scale	lame-analysis.h	/^    int     scalefac_scale[2][2];$/;"	m	struct:plotting_data	access:public
scalefac_struct	l3side.h	/^} scalefac_struct;$/;"	t	typeref:struct:__anon30
scfsi	l3side.h	/^    int     scfsi[2][4];$/;"	m	struct:__anon34	access:public
scfsi	lame-analysis.h	/^    int     scfsi[2], mean_bits, resvsize;$/;"	m	struct:plotting_data	access:public
scfsi_band	tables.c	/^const int scfsi_band[5] = { 0, 6, 11, 16, 21 };$/;"	v
scfsi_calc	takehiro.c	/^scfsi_calc(int ch, III_side_info_t * l3_side)$/;"	f	file:	signature:(int ch, III_side_info_t * l3_side)
searchGenre	id3tag.c	/^searchGenre(const char* genre)$/;"	f	file:	signature:(const char* genre)
searchGenre	id3tag.c	/^static int searchGenre(char const* genre);$/;"	p	file:	signature:(char const* genre)
searchGlobalStepsizeMax	vbrquantize.c	/^searchGlobalStepsizeMax(const algo_t * that, const int sfwork[SFBMAX],$/;"	f	file:	signature:(const algo_t * that, const int sfwork[SFBMAX], const int vbrsfmin[SFBMAX], int target)
seen	util.h	/^        int     seen;        \/* how many frames we have seen in this chunk *\/$/;"	m	struct:__anon2	access:public
setLameTagFrameHeader	VbrTag.c	/^setLameTagFrameHeader(lame_internal_flags const *gfc, unsigned char *buffer)$/;"	f	file:	signature:(lame_internal_flags const *gfc, unsigned char *buffer)
setLang	id3tag.c	/^setLang(char *dst, char const *src)$/;"	f	file:	signature:(char *dst, char const *src)
set_4_byte_value	id3tag.c	/^set_4_byte_value(unsigned char *bytes, uint32_t value)$/;"	f	file:	signature:(unsigned char *bytes, uint32_t value)
set_frame_apic	id3tag.c	/^set_frame_apic(unsigned char *frame, const char *mimetype, const unsigned char *data, size_t size)$/;"	f	file:	signature:(unsigned char *frame, const char *mimetype, const unsigned char *data, size_t size)
set_frame_comment	id3tag.c	/^set_frame_comment(unsigned char *frame, FrameDataNode const *node)$/;"	f	file:	signature:(unsigned char *frame, FrameDataNode const *node)
set_frame_custom2	id3tag.c	/^set_frame_custom2(unsigned char *frame, FrameDataNode const *node)$/;"	f	file:	signature:(unsigned char *frame, FrameDataNode const *node)
set_frame_pinfo	quantize_pvt.c	/^set_frame_pinfo(lame_internal_flags * gfc, const III_psy_ratio ratio[2][2])$/;"	f	signature:(lame_internal_flags * gfc, const III_psy_ratio ratio[2][2])
set_frame_pinfo	quantize_pvt.h	/^void    set_frame_pinfo(lame_internal_flags * gfc, const III_psy_ratio ratio[2][2]);$/;"	p	signature:(lame_internal_flags * gfc, const III_psy_ratio ratio[2][2])
set_frame_wxxx	id3tag.c	/^set_frame_wxxx(unsigned char *frame, FrameDataNode const *node)$/;"	f	file:	signature:(unsigned char *frame, FrameDataNode const *node)
set_pinfo	quantize_pvt.c	/^set_pinfo(lame_internal_flags const *gfc,$/;"	f	file:	signature:(lame_internal_flags const *gfc, gr_info * const cod_info, const III_psy_ratio * const ratio, const int gr, const int ch)
set_scalefacs	vbrquantize.c	/^set_scalefacs(gr_info * cod_info, const int *vbrsfmin, int sf[], const uint8_t * max_range)$/;"	f	file:	signature:(gr_info * cod_info, const int *vbrsfmin, int sf[], const uint8_t * max_range)
set_subblock_gain	vbrquantize.c	/^set_subblock_gain(gr_info * cod_info, const int mingain_s[3], int sf[])$/;"	f	file:	signature:(gr_info * cod_info, const int mingain_s[3], int sf[])
set_text_field	id3tag.c	/^set_text_field(unsigned char *field, const char *text, size_t size, int pad)$/;"	f	file:	signature:(unsigned char *field, const char *text, size_t size, int pad)
sfBandIndex	quantize_pvt.c	/^const scalefac_struct sfBandIndex[9] = {$/;"	v
sfDepth	vbrquantize.c	/^sfDepth(const int sfwork[SFBMAX])$/;"	f	file:	signature:(const int sfwork[SFBMAX])
sfb	lame-analysis.h	/^    double  sfb[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
sfb21_extra	util.h	/^        int     sfb21_extra; \/* will be set in lame_init_params *\/$/;"	m	struct:__anon11	access:public
sfb21mod	presets.c	/^    int     sfb21mod;$/;"	m	struct:__anon24	file:	access:public
sfb_count1	quantize_pvt.h	/^    int     sfb_count1;$/;"	m	struct:calc_noise_data_t	access:public
sfb_lmax	l3side.h	/^    int     sfb_lmax;$/;"	m	struct:__anon33	access:public
sfb_partition_table	l3side.h	/^    const int *sfb_partition_table;$/;"	m	struct:__anon33	access:public
sfb_s	lame-analysis.h	/^    double  sfb_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
sfb_smin	l3side.h	/^    int     sfb_smin;$/;"	m	struct:__anon33	access:public
sfbdivide	l3side.h	/^    int     sfbdivide;$/;"	m	struct:__anon33	access:public
sfbits	lame-analysis.h	/^    int     sfbits[2][2];$/;"	m	struct:plotting_data	access:public
sfbmax	l3side.h	/^    int     sfbmax;$/;"	m	struct:__anon33	access:public
short_block_allowed	lame_global_flags.h	/^    short_block_allowed = 0, \/* LAME may use them, even different block types for L\/R *\/$/;"	e	enum:short_block_e
short_block_constrain	vbrquantize.c	/^short_block_constrain(const algo_t * that, const int vbrsf[SFBMAX],$/;"	f	file:	signature:(const algo_t * that, const int vbrsf[SFBMAX], const int vbrsfmin[SFBMAX], int vbrmax)
short_block_coupled	lame_global_flags.h	/^    short_block_coupled, \/* LAME may use them, but always same block types in L\/R *\/$/;"	e	enum:short_block_e
short_block_dispensed	lame_global_flags.h	/^    short_block_dispensed, \/* LAME will not use short blocks, long blocks only *\/$/;"	e	enum:short_block_e
short_block_e	lame_global_flags.h	/^typedef enum short_block_e {$/;"	g
short_block_forced	lame_global_flags.h	/^    short_block_forced  \/* LAME will not use long blocks, short blocks only *\/$/;"	e	enum:short_block_e
short_block_not_set	lame_global_flags.h	/^    short_block_not_set = -1, \/* allow LAME to decide *\/$/;"	e	enum:short_block_e
short_block_t	lame_global_flags.h	/^} short_block_t;$/;"	t	typeref:enum:short_block_e
short_blocks	lame_global_flags.h	/^    short_block_t short_blocks;$/;"	m	struct:lame_global_struct	access:public
short_blocks	util.h	/^        short_block_t short_blocks;$/;"	m	struct:__anon14	access:public
shortfact	util.h	/^        FLOAT   shortfact[SBMAX_s];$/;"	m	struct:__anon11	access:public
sideinfo_len	util.h	/^        int     sideinfo_len;$/;"	m	struct:__anon14	access:public
size	util.h	/^        int     size;        \/* size of our bag *\/$/;"	m	struct:__anon2	access:public
sizeOfCommentNode	id3tag.c	/^sizeOfCommentNode(FrameDataNode const *node)$/;"	f	file:	signature:(FrameDataNode const *node)
sizeOfNode	id3tag.c	/^sizeOfNode(FrameDataNode const *node)$/;"	f	file:	signature:(FrameDataNode const *node)
sizeOfWxxxNode	id3tag.c	/^sizeOfWxxxNode(FrameDataNode const *node)$/;"	f	file:	signature:(FrameDataNode const *node)
skipId3v2	VbrTag.c	/^skipId3v2(FILE * fpStream)$/;"	f	file:	signature:(FILE * fpStream)
slen	l3side.h	/^    int     slen[4];$/;"	m	struct:__anon33	access:public
slen1_n	takehiro.c	/^static const int slen1_n[16] = { 1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16 };$/;"	v	file:
slen1_tab	takehiro.c	/^const int slen1_tab[16] = { 0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4 };$/;"	v
slen2_n	takehiro.c	/^static const int slen2_n[16] = { 1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8 };$/;"	v	file:
slen2_tab	takehiro.c	/^const int slen2_tab[16] = { 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3 };$/;"	v
sloppyCompared	id3tag.c	/^sloppyCompared(const char* p, const char* q)$/;"	f	file:	signature:(const char* p, const char* q)
sloppySearchGenre	id3tag.c	/^sloppySearchGenre(const char *genre)$/;"	f	file:	signature:(const char *genre)
sloppySearchGenre	id3tag.c	/^static int sloppySearchGenre(char const* genre);$/;"	p	file:	signature:(char const* genre)
slot_lag	util.h	/^        int     slot_lag;$/;"	m	struct:__anon8	access:public
sse	lame_global_flags.h	/^        int     sse;$/;"	m	struct:lame_global_struct::__anon26	access:public
st_lrm	presets.c	/^    FLOAT   st_lrm;          \/*short threshold *\/$/;"	m	struct:__anon24	file:	access:public
st_s	presets.c	/^    FLOAT   st_s;$/;"	m	struct:__anon24	file:	access:public
step	quantize_pvt.h	/^    int     step[39];$/;"	m	struct:calc_noise_data_t	access:public
stereo	lame-analysis.h	/^    int     framesize, stereo, js, ms_stereo, i_stereo, emph, bitrate, sampfreq, maindata;$/;"	m	struct:plotting_data	access:public
stereo	lame.h	/^  int stereo;          \/* number of channels                             *\/$/;"	m	struct:__anon20	access:public
stereo_demask	psymodel.c	/^stereo_demask(double f)$/;"	f	file:	signature:(double f)
store4	vector/xmm_quantize_sub.c	/^static void store4(__m128 v, float* f0, float* f1, float* f2, float* f3)$/;"	f	file:	signature:(__m128 v, float* f0, float* f1, float* f2, float* f3)
strchr	id3tag.c	/^char   *strchr(), *strrchr();$/;"	p	file:
strchr	id3tag.c	45;"	d	file:
strchr	machine.h	/^char   *strchr(), *strrchr();$/;"	p	signature:()
strchr	machine.h	39;"	d
strict_ISO	lame_global_flags.h	/^    int     strict_ISO;      \/* enforce ISO spec as much as possible   *\/$/;"	m	struct:lame_global_struct	access:public
strrchr	id3tag.c	/^char   *strchr(), *strrchr();$/;"	p	file:
strrchr	id3tag.c	46;"	d	file:
strrchr	machine.h	/^char   *strchr(), *strrchr();$/;"	p	signature:()
strrchr	machine.h	40;"	d
sub_gain	lame-analysis.h	/^    int     sub_gain[2][2][3];$/;"	m	struct:plotting_data	access:public
subblock_gain	l3side.h	/^    int     subblock_gain[3 + 1];$/;"	m	struct:__anon33	access:public
subblock_gain	lame_global_flags.h	/^    int     subblock_gain;   \/*  0 = no, 1 = yes *\/$/;"	m	struct:lame_global_struct	access:public
subblock_gain	util.h	/^        int     subblock_gain; \/*  0 = no, 1 = yes *\/$/;"	m	struct:__anon14	access:public
subdv_table	takehiro.c	/^} subdv_table[23] = {$/;"	v	typeref:struct:__anon35	file:
substep_shaping	lame_global_flags.h	/^    int     substep_shaping;$/;"	m	struct:lame_global_struct	access:public
substep_shaping	util.h	/^        int     substep_shaping; \/* 0 = no substep$/;"	m	struct:__anon11	access:public
sum	util.h	/^        int     sum;         \/* what we have seen so far *\/$/;"	m	struct:__anon2	access:public
sv_enc	util.h	/^        EncStateVar_t sv_enc; \/* DATA FROM ENCODER.C *\/$/;"	m	struct:lame_internal_flags	access:public
sv_psy	util.h	/^        PsyStateVar_t sv_psy; \/* DATA FROM PSYMODEL.C *\/$/;"	m	struct:lame_internal_flags	access:public
sv_qnt	util.h	/^        QntStateVar_t sv_qnt; \/* DATA FROM QUANTIZE.C *\/$/;"	m	struct:lame_internal_flags	access:public
sv_rpg	util.h	/^        RpgStateVar_t sv_rpg;$/;"	m	struct:lame_internal_flags	access:public
swap_bytes	id3tag.c	/^swap_bytes(unsigned short w)$/;"	f	file:	signature:(unsigned short w)
t10HB	tables.c	/^static const uint16_t t10HB[] = {$/;"	v	file:
t10l	tables.c	/^static const uint8_t t10l[] = {$/;"	v	file:
t11HB	tables.c	/^static const uint16_t t11HB[] = {$/;"	v	file:
t11l	tables.c	/^static const uint8_t t11l[] = {$/;"	v	file:
t12HB	tables.c	/^static const uint16_t t12HB[] = {$/;"	v	file:
t12l	tables.c	/^static const uint8_t t12l[] = {$/;"	v	file:
t13HB	tables.c	/^static const uint16_t t13HB[] = {$/;"	v	file:
t13l	tables.c	/^static const uint8_t t13l[] = {$/;"	v	file:
t15HB	tables.c	/^static const uint16_t t15HB[] = {$/;"	v	file:
t15l	tables.c	/^static const uint8_t t15l[] = {$/;"	v	file:
t16HB	tables.c	/^static const uint16_t t16HB[] = {$/;"	v	file:
t16_5l	tables.c	/^static const uint8_t t16_5l[] = {$/;"	v	file:
t16l	tables.c	/^static const uint8_t t16l[] = {$/;"	v	file:
t1HB	tables.c	/^static const uint16_t t1HB[] = {$/;"	v	file:
t1l	tables.c	/^const uint8_t t1l[] = {$/;"	v
t24HB	tables.c	/^static const uint16_t t24HB[] = {$/;"	v	file:
t24l	tables.c	/^static const uint8_t t24l[] = {$/;"	v	file:
t2HB	tables.c	/^static const uint16_t t2HB[] = {$/;"	v	file:
t2l	tables.c	/^static const uint8_t t2l[] = {$/;"	v	file:
t32HB	tables.c	/^static const uint16_t t32HB[] = {$/;"	v	file:
t32l	tables.c	/^const uint8_t t32l[] = {$/;"	v
t33HB	tables.c	/^static const uint16_t t33HB[] = {$/;"	v	file:
t33l	tables.c	/^const uint8_t t33l[] = {$/;"	v
t3HB	tables.c	/^static const uint16_t t3HB[] = {$/;"	v	file:
t3l	tables.c	/^static const uint8_t t3l[] = {$/;"	v	file:
t5HB	tables.c	/^static const uint16_t t5HB[] = {$/;"	v	file:
t5l	tables.c	/^static const uint8_t t5l[] = {$/;"	v	file:
t6HB	tables.c	/^static const uint16_t t6HB[] = {$/;"	v	file:
t6l	tables.c	/^static const uint8_t t6l[] = {$/;"	v	file:
t7HB	tables.c	/^static const uint16_t t7HB[] = {$/;"	v	file:
t7l	tables.c	/^static const uint8_t t7l[] = {$/;"	v	file:
t8HB	tables.c	/^static const uint16_t t8HB[] = {$/;"	v	file:
t8l	tables.c	/^static const uint8_t t8l[] = {$/;"	v	file:
t9HB	tables.c	/^static const uint16_t t9HB[] = {$/;"	v	file:
t9l	tables.c	/^static const uint8_t t9l[] = {$/;"	v	file:
tab	psymodel.c	/^static const FLOAT tab[] = {$/;"	v	file:
tab_mask_add_delta	psymodel.c	/^static const int tab_mask_add_delta[] = { 2, 2, 2, 1, 1, 1, 0, 0, -1 };$/;"	v	file:
table	tables.h	/^    const uint16_t *table;      \/* pointer to array[xlen][ylen]  *\/$/;"	m	struct:huffcodetab	access:public
table23	tables.c	/^const uint32_t table23[3 * 3] = {$/;"	v
table56	tables.c	/^const uint32_t table56[4 * 4] = {$/;"	v
table_select	l3side.h	/^    int     table_select[3];$/;"	m	struct:__anon33	access:public
tag_spec	util.h	/^        struct id3tag_spec tag_spec;$/;"	m	struct:lame_internal_flags	typeref:struct:lame_internal_flags::id3tag_spec	access:public
tantab_l	newmdct.c	401;"	d	file:
temporalmask_sustain_sec	psymodel.h	54;"	d
test_tag_spec_flags	id3tag.c	/^test_tag_spec_flags(lame_internal_flags const *gfc, unsigned int tst)$/;"	f	file:	signature:(lame_internal_flags const *gfc, unsigned int tst)
thm	l3side.h	/^    III_psy_xmin thm;$/;"	m	struct:__anon32	access:public
thm	util.h	/^        III_psy_xmin thm[4];$/;"	m	struct:__anon6	access:public
thr	lame-analysis.h	/^    double  thr[2][4][SBMAX_l];$/;"	m	struct:plotting_data	access:public
thr_s	lame-analysis.h	/^    double  thr_s[2][4][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
title	id3tag.h	/^    char   *title;$/;"	m	struct:id3tag_spec	access:public
toID3v2TagId	id3tag.c	/^toID3v2TagId(char const *s)$/;"	f	file:	signature:(char const *s)
toID3v2TagId_ucs2	id3tag.c	/^toID3v2TagId_ucs2(unsigned short const *s)$/;"	f	file:	signature:(unsigned short const *s)
toLittleEndian	id3tag.c	/^toLittleEndian(unsigned short bom, unsigned short c)$/;"	f	file:	signature:(unsigned short bom, unsigned short c)
toc	VbrTag.h	/^    unsigned char toc[NUMTOCENTRIES]; \/* may be NULL if toc not desired *\/$/;"	m	struct:__anon29	access:public
tot_ener	util.h	/^        FLOAT   tot_ener[4];$/;"	m	struct:__anon6	access:public
tot_noise	lame-analysis.h	/^    double  tot_noise[2][2];$/;"	m	struct:plotting_data	access:public
tot_noise	quantize_pvt.h	/^    FLOAT   tot_noise;       \/* sum of all quantization noise *\/$/;"	m	struct:calc_noise_result_t	access:public
totalframes	lame.h	/^  int totalframes;     \/* total number of frames in mp3 file             *\/$/;"	m	struct:__anon20	access:public
totbit	util.h	/^        int     totbit;      \/* bit counter of bit stream *\/$/;"	m	struct:bit_stream_struc	access:public
totbits	lame-analysis.h	/^    int     totbits;$/;"	m	struct:plotting_data	access:public
totsamp	gain_analysis.h	/^        long    totsamp;$/;"	m	struct:replaygain_data	access:public
track_id3v1	id3tag.h	/^    int     track_id3v1;$/;"	m	struct:id3tag_spec	access:public
trancate_smallspectrums	quantize.c	/^trancate_smallspectrums(lame_internal_flags const *gfc,$/;"	f	file:	signature:(lame_internal_flags const *gfc, gr_info * const gi, const FLOAT * const l3_xmin, FLOAT * const work)
tri_calc_sfb_noise_x34	vbrquantize.c	/^tri_calc_sfb_noise_x34(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw,$/;"	f	file:	signature:(const FLOAT * xr, const FLOAT * xr34, FLOAT l3_xmin, unsigned int bw, uint8_t sf, calc_noise_cache_t * did_it)
tryGlobalStepsize	vbrquantize.c	/^tryGlobalStepsize(const algo_t * that, const int sfwork[SFBMAX],$/;"	f	file:	signature:(const algo_t * that, const int sfwork[SFBMAX], const int vbrsfmin[SFBMAX], int delta)
tryThatOne	vbrquantize.c	/^tryThatOne(algo_t const* that, const int sftemp[SFBMAX], const int vbrsfmin[SFBMAX], int vbrmax)$/;"	f	file:	signature:(algo_t const* that, const int sftemp[SFBMAX], const int vbrsfmin[SFBMAX], int vbrmax)
tt	l3side.h	/^    gr_info tt[2][2];$/;"	m	struct:__anon34	access:public
tune	lame_global_flags.h	/^    int     tune;            \/* 0 off, 1 on *\/$/;"	m	struct:lame_global_struct	access:public
tune_value_a	lame_global_flags.h	/^    float   tune_value_a;    \/* used to pass values for debugging and stuff *\/$/;"	m	struct:lame_global_struct	access:public
txt	id3tag.h	/^    } dsc  , txt;$/;"	m	struct:FrameDataNode	typeref:struct:FrameDataNode::__anon17	access:public
u	id3tag.h	/^            unsigned short *u; \/* ptr to UCS-2 text                *\/$/;"	m	union:FrameDataNode::__anon17::__anon18	access:public
updateStats	encoder.c	/^updateStats(lame_internal_flags * const gfc)$/;"	f	file:	signature:(lame_internal_flags * const gfc)
update_inbuffer_size	lame.c	/^update_inbuffer_size(lame_internal_flags * gfc, const int nsamples)$/;"	f	file:	signature:(lame_internal_flags * gfc, const int nsamples)
useTemporal	lame_global_flags.h	/^    int     useTemporal;     \/* use temporal masking effect          *\/$/;"	m	struct:lame_global_struct	access:public
use_adjust	util.h	/^        int     use_adjust;  \/* method for the auto adjustment  *\/$/;"	m	struct:__anon3	access:public
use_best_huffman	lame_global_flags.h	/^    int     use_best_huffman; \/* 0 = no.  1=outside loop  2=inside loop(slow) *\/$/;"	m	struct:lame_global_struct	access:public
use_best_huffman	util.h	/^        int     use_best_huffman; \/* 0 = no.  1=outside loop  2=inside loop(slow) *\/$/;"	m	struct:__anon14	access:public
use_safe_joint_stereo	util.h	/^        int     use_safe_joint_stereo;$/;"	m	struct:__anon14	access:public
use_temporal_masking_effect	util.h	/^        int     use_temporal_masking_effect;$/;"	m	struct:__anon14	access:public
v2_head	id3tag.h	/^    FrameDataNode *v2_head, *v2_tail;$/;"	m	struct:id3tag_spec	access:public
v2_tail	id3tag.h	/^    FrameDataNode *v2_head, *v2_tail;$/;"	m	struct:id3tag_spec	access:public
valid	vbrquantize.c	/^    int     valid;$/;"	m	struct:calc_noise_cache	file:	access:public
value	vbrquantize.c	/^    FLOAT   value;$/;"	m	struct:calc_noise_cache	file:	access:public
vbr	util.h	/^        vbr_mode vbr;$/;"	m	struct:__anon14	access:public
vbr_abr	lame.h	/^  vbr_abr,$/;"	e	enum:vbr_mode_e
vbr_avg_bitrate_kbps	util.h	/^        int     vbr_avg_bitrate_kbps;$/;"	m	struct:__anon14	access:public
vbr_default	lame.h	/^  vbr_default=vbr_mtrh    \/* change this to change the default VBR mode of LAME *\/$/;"	e	enum:vbr_mode_e
vbr_max_bitrate_index	util.h	/^        int     vbr_max_bitrate_index; \/* max bitrate index *\/$/;"	m	struct:__anon14	access:public
vbr_max_indicator	lame.h	/^  vbr_max_indicator,    \/* Don't use this! It's used for sanity checks.       *\/$/;"	e	enum:vbr_mode_e
vbr_min_bitrate_index	util.h	/^        int     vbr_min_bitrate_index; \/* min bitrate index *\/$/;"	m	struct:__anon14	access:public
vbr_mode	lame.h	/^} vbr_mode;$/;"	t	typeref:enum:vbr_mode_e
vbr_mode_e	lame.h	/^typedef enum vbr_mode_e {$/;"	g
vbr_mt	lame.h	/^  vbr_mt,               \/* obsolete, same as vbr_mtrh *\/$/;"	e	enum:vbr_mode_e
vbr_mt_psy_switch_map	presets.c	/^    static const vbr_presets_t vbr_mt_psy_switch_map[] = {$/;"	v	file:
vbr_mtrh	lame.h	/^  vbr_mtrh,$/;"	e	enum:vbr_mode_e
vbr_off	lame.h	/^  vbr_off=0,$/;"	e	enum:vbr_mode_e
vbr_old_switch_map	presets.c	/^    static const vbr_presets_t vbr_old_switch_map[] = {$/;"	v	file:
vbr_presets_t	presets.c	/^} vbr_presets_t;$/;"	t	typeref:struct:__anon24	file:
vbr_q	presets.c	/^    int     vbr_q;$/;"	m	struct:__anon24	file:	access:public
vbr_rh	lame.h	/^  vbr_rh,$/;"	e	enum:vbr_mode_e
vbr_scale	VbrTag.h	/^    int     vbr_scale;       \/* encoded vbr scale from Vbr header data *\/$/;"	m	struct:__anon29	access:public
vbrpsy_apply_block_type	psymodel.c	/^vbrpsy_apply_block_type(PsyStateVar_t * psv, int nch, int const *uselongblock, int *blocktype_d)$/;"	f	file:	signature:(PsyStateVar_t * psv, int nch, int const *uselongblock, int *blocktype_d)
vbrpsy_attack_detection	psymodel.c	/^vbrpsy_attack_detection(lame_internal_flags * gfc, const sample_t * const buffer[2], int gr_out,$/;"	f	file:	signature:(lame_internal_flags * gfc, const sample_t * const buffer[2], int gr_out, III_psy_ratio masking_ratio[2][2], III_psy_ratio masking_MS_ratio[2][2], FLOAT energy[4], FLOAT sub_short_factor[4][3], int ns_attacks[4][4], int uselongblock[2])
vbrpsy_calc_mask_index_s	psymodel.c	/^vbrpsy_calc_mask_index_s(lame_internal_flags const *gfc, FLOAT const *max,$/;"	f	file:	signature:(lame_internal_flags const *gfc, FLOAT const *max, FLOAT const *avg, unsigned char *mask_idx)
vbrpsy_compute_MS_thresholds	psymodel.c	/^vbrpsy_compute_MS_thresholds(const FLOAT eb[4][CBANDS], FLOAT thr[4][CBANDS],$/;"	f	file:	signature:(const FLOAT eb[4][CBANDS], FLOAT thr[4][CBANDS], const FLOAT cb_mld[CBANDS], const FLOAT ath_cb[CBANDS], FLOAT athlower, FLOAT msfix, int n)
vbrpsy_compute_block_type	psymodel.c	/^vbrpsy_compute_block_type(SessionConfig_t const *cfg, int *uselongblock)$/;"	f	file:	signature:(SessionConfig_t const *cfg, int *uselongblock)
vbrpsy_compute_fft_l	psymodel.c	/^vbrpsy_compute_fft_l(lame_internal_flags * gfc, const sample_t * const buffer[2], int chn,$/;"	f	file:	signature:(lame_internal_flags * gfc, const sample_t * const buffer[2], int chn, int gr_out, FLOAT fftenergy[HBLKSIZE], FLOAT(*wsamp_l)[BLKSIZE])
vbrpsy_compute_fft_s	psymodel.c	/^vbrpsy_compute_fft_s(lame_internal_flags const *gfc, const sample_t * const buffer[2], int chn,$/;"	f	file:	signature:(lame_internal_flags const *gfc, const sample_t * const buffer[2], int chn, int sblock, FLOAT(*fftenergy_s)[HBLKSIZE_s], FLOAT(*wsamp_s)[3][BLKSIZE_s])
vbrpsy_compute_loudness_approximation_l	psymodel.c	/^vbrpsy_compute_loudness_approximation_l(lame_internal_flags * gfc, int gr_out, int chn,$/;"	f	file:	signature:(lame_internal_flags * gfc, int gr_out, int chn, const FLOAT fftenergy[HBLKSIZE])
vbrpsy_compute_masking_l	psymodel.c	/^vbrpsy_compute_masking_l(lame_internal_flags * gfc, const FLOAT fftenergy[HBLKSIZE],$/;"	f	file:	signature:(lame_internal_flags * gfc, const FLOAT fftenergy[HBLKSIZE], FLOAT eb_l[CBANDS], FLOAT thr[CBANDS], int chn)
vbrpsy_compute_masking_s	psymodel.c	/^vbrpsy_compute_masking_s(lame_internal_flags * gfc, const FLOAT(*fftenergy_s)[HBLKSIZE_s],$/;"	f	file:	signature:(lame_internal_flags * gfc, const FLOAT(*fftenergy_s)[HBLKSIZE_s], FLOAT * eb, FLOAT * thr, int chn, int sblock)
vbrpsy_mask_add	psymodel.c	/^vbrpsy_mask_add(FLOAT m1, FLOAT m2, int b, int delta)$/;"	f	file:	signature:(FLOAT m1, FLOAT m2, int b, int delta)
vbrpsy_skip_masking_s	psymodel.c	/^vbrpsy_skip_masking_s(lame_internal_flags * gfc, int chn, int sblock)$/;"	f	file:	signature:(lame_internal_flags * gfc, int chn, int sblock)
vec_max_c	vbrquantize.c	/^vec_max_c(const float * xr34, unsigned int bw)$/;"	f	file:	signature:(const float * xr34, unsigned int bw)
vecfloat_union	vector/xmm_quantize_sub.c	/^} vecfloat_union;$/;"	t	typeref:union:__anon23	file:
version	util.h	/^        int     version;     \/* 0=MPEG-2\/2.5  1=MPEG-1               *\/$/;"	m	struct:__anon14	access:public
w_ptr	util.h	/^        int     w_ptr;$/;"	m	struct:__anon8	access:public
want	util.h	/^        int     want;        \/* how many frames we want to collect into one chunk *\/$/;"	m	struct:__anon2	access:public
width	l3side.h	/^    int     width[SFBMAX];$/;"	m	struct:__anon33	access:public
win	newmdct.c	/^static const FLOAT win[4][NL] = {$/;"	v	file:
window	fft.c	/^static FLOAT window[BLKSIZE], window_s[BLKSIZE_s \/ 2];$/;"	v	file:
window	l3side.h	/^    int     window[SFBMAX];$/;"	m	struct:__anon33	access:public
window_s	fft.c	/^static FLOAT window[BLKSIZE], window_s[BLKSIZE_s \/ 2];$/;"	v	file:
window_subband	newmdct.c	/^window_subband(const sample_t * x1, FLOAT a[SBLIMIT])$/;"	f	file:	signature:(const sample_t * x1, FLOAT a[SBLIMIT])
writeChars	id3tag.c	/^writeChars(unsigned char *frame, char const *str, size_t n)$/;"	f	file:	signature:(unsigned char *frame, char const *str, size_t n)
writeLoBytes	id3tag.c	/^writeLoBytes(unsigned char *frame, unsigned short const *str, size_t n)$/;"	f	file:	signature:(unsigned char *frame, unsigned short const *str, size_t n)
writeLoBytes	id3tag.c	/^writeLoBytes(unsigned char *frame, unsigned short const *str, size_t n);$/;"	p	file:	signature:(unsigned char *frame, unsigned short const *str, size_t n)
writeMainData	bitstream.c	/^writeMainData(lame_internal_flags * const gfc)$/;"	f	file:	signature:(lame_internal_flags * const gfc)
writeUcs2s	id3tag.c	/^writeUcs2s(unsigned char *frame, unsigned short const *str, size_t n)$/;"	f	file:	signature:(unsigned char *frame, unsigned short const *str, size_t n)
write_id3tag_automatic	lame_global_flags.h	/^    int     write_id3tag_automatic; \/* 1 (default) writes ID3 tags, 0 not *\/$/;"	m	struct:lame_global_struct	access:public
write_lame_tag	lame_global_flags.h	/^    int     write_lame_tag;  \/* add Xing VBR tag?                           *\/$/;"	m	struct:lame_global_struct	access:public
write_lame_tag	util.h	/^        int     write_lame_tag; \/* add Xing VBR tag?                           *\/$/;"	m	struct:__anon14	access:public
write_timing	util.h	/^            int     write_timing;$/;"	m	struct:__anon8::__anon9	access:public
writeheader	bitstream.c	/^writeheader(lame_internal_flags * gfc, int val, int j)$/;"	f	file:	signature:(lame_internal_flags * gfc, int val, int j)
x66	i386/nasm.h	/^%define popf  db 0x66, 0x9D$/;"	v
xfsf	lame-analysis.h	/^    double  xfsf[2][2][SBMAX_l];$/;"	m	struct:plotting_data	access:public
xfsf_s	lame-analysis.h	/^    double  xfsf_s[2][2][3 * SBMAX_s];$/;"	m	struct:plotting_data	access:public
xlen	tables.h	/^    const unsigned int xlen;          \/* max. x-index+   *\/$/;"	m	struct:huffcodetab	access:public
xmm7	i386/nasm.h	/^%define xm7 xmm7$/;"	v
xr	l3side.h	/^    FLOAT   xr[576];$/;"	m	struct:__anon33	access:public
xr	lame-analysis.h	/^    double  xr[2][2][576];$/;"	m	struct:plotting_data	access:public
xr34orig	vbrquantize.c	/^    const FLOAT *xr34orig;$/;"	m	struct:algo_s	file:	access:public
xrpow_max	l3side.h	/^    FLOAT   xrpow_max;$/;"	m	struct:__anon33	access:public
year	id3tag.h	/^    int     year;$/;"	m	struct:id3tag_spec	access:public
